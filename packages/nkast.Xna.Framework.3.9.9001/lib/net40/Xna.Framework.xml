<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Xna.Framework</name>
    </assembly>
    <members>
        <member name="T:Microsoft.Xna.Framework.BoundingBox">
            <summary>
            Represents an axis-aligned bounding box (AABB) in 3D space.
            </summary>
        </member>
        <member name="F:Microsoft.Xna.Framework.BoundingBox.Min">
            <summary>
              The minimum extent of this <see cref="T:Microsoft.Xna.Framework.BoundingBox"/>.
            </summary>
        </member>
        <member name="F:Microsoft.Xna.Framework.BoundingBox.Max">
            <summary>
              The maximum extent of this <see cref="T:Microsoft.Xna.Framework.BoundingBox"/>.
            </summary>
        </member>
        <member name="F:Microsoft.Xna.Framework.BoundingBox.CornerCount">
            <summary>
              The number of corners in a <see cref="T:Microsoft.Xna.Framework.BoundingBox"/>. This is equal to 8.
            </summary>
        </member>
        <member name="M:Microsoft.Xna.Framework.BoundingBox.#ctor(Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Vector3)">
            <summary>
              Create a <see cref="T:Microsoft.Xna.Framework.BoundingBox"/>.
            </summary>
            <param name="min">The minimum extent of the <see cref="T:Microsoft.Xna.Framework.BoundingBox"/>.</param>
            <param name="max">The maximum extent of the <see cref="T:Microsoft.Xna.Framework.BoundingBox"/>.</param>
        </member>
        <member name="M:Microsoft.Xna.Framework.BoundingBox.Contains(Microsoft.Xna.Framework.BoundingBox)">
            <summary>
              Check if this <see cref="T:Microsoft.Xna.Framework.BoundingBox"/> contains another <see cref="T:Microsoft.Xna.Framework.BoundingBox"/>.
            </summary>
            <param name="box">The <see cref="T:Microsoft.Xna.Framework.BoundingBox"/> to test for overlap.</param>
            <returns>
              A value indicating if this <see cref="T:Microsoft.Xna.Framework.BoundingBox"/> contains,
              intersects with or is disjoint with <paramref name="box"/>.
            </returns>
        </member>
        <member name="M:Microsoft.Xna.Framework.BoundingBox.Contains(Microsoft.Xna.Framework.BoundingBox@,Microsoft.Xna.Framework.ContainmentType@)">
            <summary>
              Check if this <see cref="T:Microsoft.Xna.Framework.BoundingBox"/> contains another <see cref="T:Microsoft.Xna.Framework.BoundingBox"/>.
            </summary>
            <param name="box">The <see cref="T:Microsoft.Xna.Framework.BoundingBox"/> to test for overlap.</param>
            <param name="result">
              A value indicating if this <see cref="T:Microsoft.Xna.Framework.BoundingBox"/> contains,
              intersects with or is disjoint with <paramref name="box"/>.
            </param>
        </member>
        <member name="M:Microsoft.Xna.Framework.BoundingBox.Contains(Microsoft.Xna.Framework.BoundingFrustum)">
            <summary>
              Check if this <see cref="T:Microsoft.Xna.Framework.BoundingBox"/> contains a <see cref="T:Microsoft.Xna.Framework.BoundingFrustum"/>.
            WARNING: Reported to not work properly.
            If a BoundingFrustum that is outside a BoundingBox, the returned value will be ContainmentType.Intersects.
            If instead call the equivalent (?) function on the BoundingFrustum.Contains(BoundingBox), we get the right result, namely ContainmentType.Disjoint.
            </summary>
            <param name="frustum">The <see cref="T:Microsoft.Xna.Framework.BoundingFrustum"/> to test for overlap.</param>
            <returns>
              A value indicating if this <see cref="T:Microsoft.Xna.Framework.BoundingBox"/> contains,
              intersects with or is disjoint with <paramref name="frustum"/>.
            </returns>
        </member>
        <member name="M:Microsoft.Xna.Framework.BoundingBox.Contains(Microsoft.Xna.Framework.BoundingSphere)">
            <summary>
              Check if this <see cref="T:Microsoft.Xna.Framework.BoundingBox"/> contains a <see cref="T:Microsoft.Xna.Framework.BoundingSphere"/>.
            </summary>
            <param name="sphere">The <see cref="T:Microsoft.Xna.Framework.BoundingSphere"/> to test for overlap.</param>
            <returns>
              A value indicating if this <see cref="T:Microsoft.Xna.Framework.BoundingBox"/> contains,
              intersects with or is disjoint with <paramref name="sphere"/>.
            </returns>
        </member>
        <member name="M:Microsoft.Xna.Framework.BoundingBox.Contains(Microsoft.Xna.Framework.BoundingSphere@,Microsoft.Xna.Framework.ContainmentType@)">
            <summary>
              Check if this <see cref="T:Microsoft.Xna.Framework.BoundingBox"/> contains a <see cref="T:Microsoft.Xna.Framework.BoundingSphere"/>.
            </summary>
            <param name="sphere">The <see cref="T:Microsoft.Xna.Framework.BoundingSphere"/> to test for overlap.</param>
            <param name="result">
              A value indicating if this <see cref="T:Microsoft.Xna.Framework.BoundingBox"/> contains,
              intersects with or is disjoint with <paramref name="sphere"/>.
            </param>
        </member>
        <member name="M:Microsoft.Xna.Framework.BoundingBox.Contains(Microsoft.Xna.Framework.Vector3)">
            <summary>
              Check if this <see cref="T:Microsoft.Xna.Framework.BoundingBox"/> contains a point.
            </summary>
            <param name="point">The <see cref="T:Microsoft.Xna.Framework.Vector3"/> to test.</param>
            <returns>
              <see cref="F:Microsoft.Xna.Framework.ContainmentType.Contains"/> if this <see cref="T:Microsoft.Xna.Framework.BoundingBox"/> contains
              <paramref name="point"/> or <see cref="F:Microsoft.Xna.Framework.ContainmentType.Disjoint"/> if it does not.
            </returns>
        </member>
        <member name="M:Microsoft.Xna.Framework.BoundingBox.Contains(Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.ContainmentType@)">
            <summary>
              Check if this <see cref="T:Microsoft.Xna.Framework.BoundingBox"/> contains a point.
            </summary>
            <param name="point">The <see cref="T:Microsoft.Xna.Framework.Vector3"/> to test.</param>
            <param name="result">
              <see cref="F:Microsoft.Xna.Framework.ContainmentType.Contains"/> if this <see cref="T:Microsoft.Xna.Framework.BoundingBox"/> contains
              <paramref name="point"/> or <see cref="F:Microsoft.Xna.Framework.ContainmentType.Disjoint"/> if it does not.
            </param>
        </member>
        <member name="M:Microsoft.Xna.Framework.BoundingBox.CreateFromPoints(Microsoft.Xna.Framework.Vector3[],System.Int32,System.Int32)">
            <summary>
            Create a bounding box from the given list of points.
            </summary>
            <param name="points">The array of Vector3 instances defining the point cloud to bound</param>
            <param name="index">The base index to start iterating from</param>
            <param name="count">The number of points to iterate</param>
            <returns>A bounding box that encapsulates the given point cloud.</returns>
            <exception cref="T:System.ArgumentException">Thrown if the given array is null or has no points.</exception>
        </member>
        <member name="M:Microsoft.Xna.Framework.BoundingBox.CreateFromPoints(System.Collections.Generic.List{Microsoft.Xna.Framework.Vector3},System.Int32,System.Int32)">
            <summary>
            Create a bounding box from the given list of points.
            </summary>
            <param name="points">The list of Vector3 instances defining the point cloud to bound</param>
            <param name="index">The base index to start iterating from</param>
            <param name="count">The number of points to iterate</param>
            <returns>A bounding box that encapsulates the given point cloud.</returns>
            <exception cref="T:System.ArgumentException">Thrown if the given list is null or has no points.</exception>
        </member>
        <member name="M:Microsoft.Xna.Framework.BoundingBox.CreateFromPoints(System.Collections.Generic.IEnumerable{Microsoft.Xna.Framework.Vector3})">
            <summary>
              Create the enclosing <see cref="T:Microsoft.Xna.Framework.BoundingBox"/> from the given list of points.
            </summary>
            <param name="points">The list of <see cref="T:Microsoft.Xna.Framework.Vector3"/> instances defining the point cloud to bound.</param>
            <returns>A <see cref="T:Microsoft.Xna.Framework.BoundingBox"/> that encloses the given point cloud.</returns>
            <exception cref="T:System.ArgumentException">Thrown if the given list has no points.</exception>
        </member>
        <member name="M:Microsoft.Xna.Framework.BoundingBox.CreateFromSphere(Microsoft.Xna.Framework.BoundingSphere)">
            <summary>
              Create the enclosing <see cref="T:Microsoft.Xna.Framework.BoundingBox"/> of a <see cref="T:Microsoft.Xna.Framework.BoundingSphere"/>.
            </summary>
            <param name="sphere">The <see cref="T:Microsoft.Xna.Framework.BoundingSphere"/> to enclose.</param>
            <returns>A <see cref="T:Microsoft.Xna.Framework.BoundingBox"/> enclosing <paramref name="sphere"/>.</returns>
        </member>
        <member name="M:Microsoft.Xna.Framework.BoundingBox.CreateFromSphere(Microsoft.Xna.Framework.BoundingSphere@,Microsoft.Xna.Framework.BoundingBox@)">
            <summary>
              Create the enclosing <see cref="T:Microsoft.Xna.Framework.BoundingBox"/> of a <see cref="T:Microsoft.Xna.Framework.BoundingSphere"/>.
            </summary>
            <param name="sphere">The <see cref="T:Microsoft.Xna.Framework.BoundingSphere"/> to enclose.</param>
            <param name="result">A <see cref="T:Microsoft.Xna.Framework.BoundingBox"/> enclosing <paramref name="sphere"/>.</param>
        </member>
        <member name="M:Microsoft.Xna.Framework.BoundingBox.CreateMerged(Microsoft.Xna.Framework.BoundingBox,Microsoft.Xna.Framework.BoundingBox)">
            <summary>
              Create the <see cref="T:Microsoft.Xna.Framework.BoundingBox"/> enclosing two other <see cref="T:Microsoft.Xna.Framework.BoundingBox"/> instances.
            </summary>
            <param name="original">A <see cref="T:Microsoft.Xna.Framework.BoundingBox"/> to enclose.</param>
            <param name="additional">A <see cref="T:Microsoft.Xna.Framework.BoundingBox"/> to enclose.</param>
            <returns>
              The <see cref="T:Microsoft.Xna.Framework.BoundingBox"/> enclosing <paramref name="original"/> and <paramref name="additional"/>.
            </returns>
        </member>
        <member name="M:Microsoft.Xna.Framework.BoundingBox.CreateMerged(Microsoft.Xna.Framework.BoundingBox@,Microsoft.Xna.Framework.BoundingBox@,Microsoft.Xna.Framework.BoundingBox@)">
            <summary>
              Create the <see cref="T:Microsoft.Xna.Framework.BoundingBox"/> enclosing two other <see cref="T:Microsoft.Xna.Framework.BoundingBox"/> instances.
            </summary>
            <param name="original">A <see cref="T:Microsoft.Xna.Framework.BoundingBox"/> to enclose.</param>
            <param name="additional">A <see cref="T:Microsoft.Xna.Framework.BoundingBox"/> to enclose.</param>
            <param name="result">
              The <see cref="T:Microsoft.Xna.Framework.BoundingBox"/> enclosing <paramref name="original"/> and <paramref name="additional"/>.
            </param>
        </member>
        <member name="M:Microsoft.Xna.Framework.BoundingBox.Equals(Microsoft.Xna.Framework.BoundingBox)">
            <summary>
              Check if two <see cref="T:Microsoft.Xna.Framework.BoundingBox"/> instances are equal.
            </summary>
            <param name="other">The <see cref="T:Microsoft.Xna.Framework.BoundingBox"/> to compare with this <see cref="T:Microsoft.Xna.Framework.BoundingBox"/>.</param>
            <returns>
              <code>true</code> if <see cref="!:other"/> is equal to this <see cref="T:Microsoft.Xna.Framework.BoundingBox"/>,
              <code>false</code> if it is not.
            </returns>
        </member>
        <member name="M:Microsoft.Xna.Framework.BoundingBox.Equals(System.Object)">
            <summary>
              Check if two <see cref="T:Microsoft.Xna.Framework.BoundingBox"/> instances are equal.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> to compare with this <see cref="T:Microsoft.Xna.Framework.BoundingBox"/>.</param>
            <returns>
              <code>true</code> if <see cref="!:obj"/> is equal to this <see cref="T:Microsoft.Xna.Framework.BoundingBox"/>,
              <code>false</code> if it is not.
            </returns>
        </member>
        <member name="M:Microsoft.Xna.Framework.BoundingBox.GetCorners">
            <summary>
              Get an array of <see cref="T:Microsoft.Xna.Framework.Vector3"/> containing the corners of this <see cref="T:Microsoft.Xna.Framework.BoundingBox"/>.
            </summary>
            <returns>An array of <see cref="T:Microsoft.Xna.Framework.Vector3"/> containing the corners of this <see cref="T:Microsoft.Xna.Framework.BoundingBox"/>.</returns>
        </member>
        <member name="M:Microsoft.Xna.Framework.BoundingBox.GetCorners(Microsoft.Xna.Framework.Vector3[])">
            <summary>
              Fill the first 8 places of an array of <see cref="T:Microsoft.Xna.Framework.Vector3"/>
              with the corners of this <see cref="T:Microsoft.Xna.Framework.BoundingBox"/>.
            </summary>
            <param name="corners">The array to fill.</param>
            <exception cref="T:System.ArgumentNullException">If <paramref name="corners"/> is <code>null</code>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
              If <paramref name="corners"/> has a length of less than 8.
            </exception>
        </member>
        <member name="M:Microsoft.Xna.Framework.BoundingBox.GetHashCode">
            <summary>
              Get the hash code for this <see cref="T:Microsoft.Xna.Framework.BoundingBox"/>.
            </summary>
            <returns>A hash code for this <see cref="T:Microsoft.Xna.Framework.BoundingBox"/>.</returns>
        </member>
        <member name="M:Microsoft.Xna.Framework.BoundingBox.Intersects(Microsoft.Xna.Framework.BoundingBox)">
            <summary>
              Check if this <see cref="T:Microsoft.Xna.Framework.BoundingBox"/> intersects another <see cref="T:Microsoft.Xna.Framework.BoundingBox"/>.
            </summary>
            <param name="box">The <see cref="T:Microsoft.Xna.Framework.BoundingBox"/> to test for intersection.</param>
            <returns>
              <code>true</code> if this <see cref="T:Microsoft.Xna.Framework.BoundingBox"/> intersects <paramref name="box"/>,
              <code>false</code> if it does not.
            </returns>
        </member>
        <member name="M:Microsoft.Xna.Framework.BoundingBox.Intersects(Microsoft.Xna.Framework.BoundingBox@,System.Boolean@)">
            <summary>
              Check if this <see cref="T:Microsoft.Xna.Framework.BoundingBox"/> intersects another <see cref="T:Microsoft.Xna.Framework.BoundingBox"/>.
            </summary>
            <param name="box">The <see cref="T:Microsoft.Xna.Framework.BoundingBox"/> to test for intersection.</param>
            <param name="result">
              <code>true</code> if this <see cref="T:Microsoft.Xna.Framework.BoundingBox"/> intersects <paramref name="box"/>,
              <code>false</code> if it does not.
            </param>
        </member>
        <member name="M:Microsoft.Xna.Framework.BoundingBox.Intersects(Microsoft.Xna.Framework.BoundingFrustum)">
            <summary>
              Check if this <see cref="T:Microsoft.Xna.Framework.BoundingBox"/> intersects a <see cref="T:Microsoft.Xna.Framework.BoundingFrustum"/>.
            </summary>
            <param name="frustum">The <see cref="T:Microsoft.Xna.Framework.BoundingFrustum"/> to test for intersection.</param>
            <returns>
              <code>true</code> if this <see cref="T:Microsoft.Xna.Framework.BoundingBox"/> intersects <paramref name="frustum"/>,
              <code>false</code> if it does not.
            </returns>
        </member>
        <member name="M:Microsoft.Xna.Framework.BoundingBox.Intersects(Microsoft.Xna.Framework.BoundingSphere)">
            <summary>
              Check if this <see cref="T:Microsoft.Xna.Framework.BoundingBox"/> intersects a <see cref="T:Microsoft.Xna.Framework.BoundingFrustum"/>.
            </summary>
            <param name="sphere">The <see cref="T:Microsoft.Xna.Framework.BoundingFrustum"/> to test for intersection.</param>
            <returns>
              <code>true</code> if this <see cref="T:Microsoft.Xna.Framework.BoundingBox"/> intersects <paramref name="sphere"/>,
              <code>false</code> if it does not.
            </returns>
        </member>
        <member name="M:Microsoft.Xna.Framework.BoundingBox.Intersects(Microsoft.Xna.Framework.BoundingSphere@,System.Boolean@)">
            <summary>
              Check if this <see cref="T:Microsoft.Xna.Framework.BoundingBox"/> intersects a <see cref="T:Microsoft.Xna.Framework.BoundingFrustum"/>.
            </summary>
            <param name="sphere">The <see cref="T:Microsoft.Xna.Framework.BoundingFrustum"/> to test for intersection.</param>
            <param name="result">
              <code>true</code> if this <see cref="T:Microsoft.Xna.Framework.BoundingBox"/> intersects <paramref name="sphere"/>,
              <code>false</code> if it does not.
            </param>
        </member>
        <member name="M:Microsoft.Xna.Framework.BoundingBox.Intersects(Microsoft.Xna.Framework.Plane)">
            <summary>
              Check if this <see cref="T:Microsoft.Xna.Framework.BoundingBox"/> intersects a <see cref="T:Microsoft.Xna.Framework.Plane"/>.
            </summary>
            <param name="plane">The <see cref="T:Microsoft.Xna.Framework.Plane"/> to test for intersection.</param>
            <returns>
              <code>true</code> if this <see cref="T:Microsoft.Xna.Framework.BoundingBox"/> intersects <paramref name="plane"/>,
              <code>false</code> if it does not.
            </returns>
        </member>
        <member name="M:Microsoft.Xna.Framework.BoundingBox.Intersects(Microsoft.Xna.Framework.Plane@,Microsoft.Xna.Framework.PlaneIntersectionType@)">
            <summary>
              Check if this <see cref="T:Microsoft.Xna.Framework.BoundingBox"/> intersects a <see cref="T:Microsoft.Xna.Framework.Plane"/>.
            </summary>
            <param name="plane">The <see cref="T:Microsoft.Xna.Framework.Plane"/> to test for intersection.</param>
            <param name="result">
              <code>true</code> if this <see cref="T:Microsoft.Xna.Framework.BoundingBox"/> intersects <paramref name="plane"/>,
              <code>false</code> if it does not.
            </param>
        </member>
        <member name="M:Microsoft.Xna.Framework.BoundingBox.Intersects(Microsoft.Xna.Framework.Ray)">
            <summary>
              Check if this <see cref="T:Microsoft.Xna.Framework.BoundingBox"/> intersects a <see cref="T:Microsoft.Xna.Framework.Ray"/>.
            </summary>
            <param name="ray">The <see cref="T:Microsoft.Xna.Framework.Ray"/> to test for intersection.</param>
            <returns>
              The distance along the <see cref="T:Microsoft.Xna.Framework.Ray"/> to the intersection point or
              <code>null</code> if the <see cref="T:Microsoft.Xna.Framework.Ray"/> does not intesect this <see cref="T:Microsoft.Xna.Framework.BoundingBox"/>.
            </returns>
        </member>
        <member name="M:Microsoft.Xna.Framework.BoundingBox.Intersects(Microsoft.Xna.Framework.Ray@,System.Nullable{System.Single}@)">
            <summary>
              Check if this <see cref="T:Microsoft.Xna.Framework.BoundingBox"/> intersects a <see cref="T:Microsoft.Xna.Framework.Ray"/>.
            </summary>
            <param name="ray">The <see cref="T:Microsoft.Xna.Framework.Ray"/> to test for intersection.</param>
            <param name="result">
              The distance along the <see cref="T:Microsoft.Xna.Framework.Ray"/> to the intersection point or
              <code>null</code> if the <see cref="T:Microsoft.Xna.Framework.Ray"/> does not intesect this <see cref="T:Microsoft.Xna.Framework.BoundingBox"/>.
            </param>
        </member>
        <member name="M:Microsoft.Xna.Framework.BoundingBox.op_Equality(Microsoft.Xna.Framework.BoundingBox,Microsoft.Xna.Framework.BoundingBox)">
            <summary>
              Check if two <see cref="T:Microsoft.Xna.Framework.BoundingBox"/> instances are equal.
            </summary>
            <param name="left">A <see cref="T:Microsoft.Xna.Framework.BoundingBox"/> to compare the other.</param>
            <param name="right">A <see cref="T:Microsoft.Xna.Framework.BoundingBox"/> to compare the other.</param>
            <returns>
              <code>true</code> if <see cref="!:a"/> is equal to this <see cref="!:b"/>,
              <code>false</code> if it is not.
            </returns>
        </member>
        <member name="M:Microsoft.Xna.Framework.BoundingBox.op_Inequality(Microsoft.Xna.Framework.BoundingBox,Microsoft.Xna.Framework.BoundingBox)">
            <summary>
              Check if two <see cref="T:Microsoft.Xna.Framework.BoundingBox"/> instances are not equal.
            </summary>
            <param name="left">A <see cref="T:Microsoft.Xna.Framework.BoundingBox"/> to compare the other.</param>
            <param name="b">A <see cref="T:Microsoft.Xna.Framework.BoundingBox"/> to compare the other.</param>
            <returns>
              <code>true</code> if <see cref="!:a"/> is not equal to this <see cref="!:b"/>,
              <code>false</code> if it is.
            </returns>
        </member>
        <member name="M:Microsoft.Xna.Framework.BoundingBox.ToString">
            <summary>
            Get a <see cref="T:System.String"/> representation of this <see cref="T:Microsoft.Xna.Framework.BoundingBox"/>.
            </summary>
            <returns>A <see cref="T:System.String"/> representation of this <see cref="T:Microsoft.Xna.Framework.BoundingBox"/>.</returns>
        </member>
        <member name="M:Microsoft.Xna.Framework.BoundingBox.Deconstruct(Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Vector3@)">
            <summary>
            Deconstruction method for <see cref="T:Microsoft.Xna.Framework.BoundingBox"/>.
            </summary>
            <param name="min"></param>
            <param name="max"></param>
        </member>
        <member name="T:Microsoft.Xna.Framework.BoundingFrustum">
            <summary>
            Defines a viewing frustum for intersection operations.
            </summary>
        </member>
        <member name="F:Microsoft.Xna.Framework.BoundingFrustum.PlaneCount">
            <summary>
            The number of planes in the frustum.
            </summary>
        </member>
        <member name="F:Microsoft.Xna.Framework.BoundingFrustum.CornerCount">
            <summary>
            The number of corner points in the frustum.
            </summary>
        </member>
        <member name="P:Microsoft.Xna.Framework.BoundingFrustum.Matrix">
            <summary>
            Gets or sets the <see cref="P:Microsoft.Xna.Framework.BoundingFrustum.Matrix"/> of the frustum.
            </summary>
        </member>
        <member name="P:Microsoft.Xna.Framework.BoundingFrustum.Near">
            <summary>
            Gets the near plane of the frustum.
            </summary>
        </member>
        <member name="P:Microsoft.Xna.Framework.BoundingFrustum.Far">
            <summary>
            Gets the far plane of the frustum.
            </summary>
        </member>
        <member name="P:Microsoft.Xna.Framework.BoundingFrustum.Left">
            <summary>
            Gets the left plane of the frustum.
            </summary>
        </member>
        <member name="P:Microsoft.Xna.Framework.BoundingFrustum.Right">
            <summary>
            Gets the right plane of the frustum.
            </summary>
        </member>
        <member name="P:Microsoft.Xna.Framework.BoundingFrustum.Top">
            <summary>
            Gets the top plane of the frustum.
            </summary>
        </member>
        <member name="P:Microsoft.Xna.Framework.BoundingFrustum.Bottom">
            <summary>
            Gets the bottom plane of the frustum.
            </summary>
        </member>
        <member name="M:Microsoft.Xna.Framework.BoundingFrustum.#ctor(Microsoft.Xna.Framework.Matrix)">
            <summary>
            Constructs the frustum by extracting the view planes from a matrix.
            </summary>
            <param name="value">Combined matrix which usually is (View * Projection).</param>
        </member>
        <member name="M:Microsoft.Xna.Framework.BoundingFrustum.op_Equality(Microsoft.Xna.Framework.BoundingFrustum,Microsoft.Xna.Framework.BoundingFrustum)">
            <summary>
            Compares whether two <see cref="T:Microsoft.Xna.Framework.BoundingFrustum"/> instances are equal.
            </summary>
            <param name="left"><see cref="T:Microsoft.Xna.Framework.BoundingFrustum"/> instance on the left of the equal sign.</param>
            <param name="right"><see cref="T:Microsoft.Xna.Framework.BoundingFrustum"/> instance on the right of the equal sign.</param>
            <returns><c>true</c> if the instances are equal; <c>false</c> otherwise.</returns>
        </member>
        <member name="M:Microsoft.Xna.Framework.BoundingFrustum.op_Inequality(Microsoft.Xna.Framework.BoundingFrustum,Microsoft.Xna.Framework.BoundingFrustum)">
            <summary>
            Compares whether two <see cref="T:Microsoft.Xna.Framework.BoundingFrustum"/> instances are not equal.
            </summary>
            <param name="left"><see cref="T:Microsoft.Xna.Framework.BoundingFrustum"/> instance on the left of the not equal sign.</param>
            <param name="right"><see cref="T:Microsoft.Xna.Framework.BoundingFrustum"/> instance on the right of the not equal sign.</param>
            <returns><c>true</c> if the instances are not equal; <c>false</c> otherwise.</returns>
        </member>
        <member name="M:Microsoft.Xna.Framework.BoundingFrustum.Contains(Microsoft.Xna.Framework.BoundingBox)">
            <summary>
            Containment test between this <see cref="T:Microsoft.Xna.Framework.BoundingFrustum"/> and specified <see cref="T:Microsoft.Xna.Framework.BoundingBox"/>.
            </summary>
            <param name="box">A <see cref="T:Microsoft.Xna.Framework.BoundingBox"/> for testing.</param>
            <returns>Result of testing for containment between this <see cref="T:Microsoft.Xna.Framework.BoundingFrustum"/> and specified <see cref="T:Microsoft.Xna.Framework.BoundingBox"/>.</returns>
        </member>
        <member name="M:Microsoft.Xna.Framework.BoundingFrustum.Contains(Microsoft.Xna.Framework.BoundingBox@,Microsoft.Xna.Framework.ContainmentType@)">
            <summary>
            Containment test between this <see cref="T:Microsoft.Xna.Framework.BoundingFrustum"/> and specified <see cref="T:Microsoft.Xna.Framework.BoundingBox"/>.
            </summary>
            <param name="box">A <see cref="T:Microsoft.Xna.Framework.BoundingBox"/> for testing.</param>
            <param name="result">Result of testing for containment between this <see cref="T:Microsoft.Xna.Framework.BoundingFrustum"/> and specified <see cref="T:Microsoft.Xna.Framework.BoundingBox"/> as an output parameter.</param>
        </member>
        <member name="M:Microsoft.Xna.Framework.BoundingFrustum.Contains(Microsoft.Xna.Framework.BoundingFrustum)">
            <summary>
            Containment test between this <see cref="T:Microsoft.Xna.Framework.BoundingFrustum"/> and specified <see cref="T:Microsoft.Xna.Framework.BoundingFrustum"/>.
            </summary>
            <param name="frustum">A <see cref="T:Microsoft.Xna.Framework.BoundingFrustum"/> for testing.</param>
            <returns>Result of testing for containment between this <see cref="T:Microsoft.Xna.Framework.BoundingFrustum"/> and specified <see cref="T:Microsoft.Xna.Framework.BoundingFrustum"/>.</returns>
        </member>
        <member name="M:Microsoft.Xna.Framework.BoundingFrustum.Contains(Microsoft.Xna.Framework.BoundingSphere)">
            <summary>
            Containment test between this <see cref="T:Microsoft.Xna.Framework.BoundingFrustum"/> and specified <see cref="T:Microsoft.Xna.Framework.BoundingSphere"/>.
            </summary>
            <param name="sphere">A <see cref="T:Microsoft.Xna.Framework.BoundingSphere"/> for testing.</param>
            <returns>Result of testing for containment between this <see cref="T:Microsoft.Xna.Framework.BoundingFrustum"/> and specified <see cref="T:Microsoft.Xna.Framework.BoundingSphere"/>.</returns>
        </member>
        <member name="M:Microsoft.Xna.Framework.BoundingFrustum.Contains(Microsoft.Xna.Framework.BoundingSphere@,Microsoft.Xna.Framework.ContainmentType@)">
            <summary>
            Containment test between this <see cref="T:Microsoft.Xna.Framework.BoundingFrustum"/> and specified <see cref="T:Microsoft.Xna.Framework.BoundingSphere"/>.
            </summary>
            <param name="sphere">A <see cref="T:Microsoft.Xna.Framework.BoundingSphere"/> for testing.</param>
            <param name="result">Result of testing for containment between this <see cref="T:Microsoft.Xna.Framework.BoundingFrustum"/> and specified <see cref="T:Microsoft.Xna.Framework.BoundingSphere"/> as an output parameter.</param>
        </member>
        <member name="M:Microsoft.Xna.Framework.BoundingFrustum.Contains(Microsoft.Xna.Framework.Vector3)">
            <summary>
            Containment test between this <see cref="T:Microsoft.Xna.Framework.BoundingFrustum"/> and specified <see cref="T:Microsoft.Xna.Framework.Vector3"/>.
            </summary>
            <param name="point">A <see cref="T:Microsoft.Xna.Framework.Vector3"/> for testing.</param>
            <returns>Result of testing for containment between this <see cref="T:Microsoft.Xna.Framework.BoundingFrustum"/> and specified <see cref="T:Microsoft.Xna.Framework.Vector3"/>.</returns>
        </member>
        <member name="M:Microsoft.Xna.Framework.BoundingFrustum.Contains(Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.ContainmentType@)">
            <summary>
            Containment test between this <see cref="T:Microsoft.Xna.Framework.BoundingFrustum"/> and specified <see cref="T:Microsoft.Xna.Framework.Vector3"/>.
            </summary>
            <param name="point">A <see cref="T:Microsoft.Xna.Framework.Vector3"/> for testing.</param>
            <param name="result">Result of testing for containment between this <see cref="T:Microsoft.Xna.Framework.BoundingFrustum"/> and specified <see cref="T:Microsoft.Xna.Framework.Vector3"/> as an output parameter.</param>
        </member>
        <member name="M:Microsoft.Xna.Framework.BoundingFrustum.Equals(Microsoft.Xna.Framework.BoundingFrustum)">
            <summary>
            Compares whether current instance is equal to specified <see cref="T:Microsoft.Xna.Framework.BoundingFrustum"/>.
            </summary>
            <param name="other">The <see cref="T:Microsoft.Xna.Framework.BoundingFrustum"/> to compare.</param>
            <returns><c>true</c> if the instances are equal; <c>false</c> otherwise.</returns>
        </member>
        <member name="M:Microsoft.Xna.Framework.BoundingFrustum.Equals(System.Object)">
            <summary>
            Compares whether current instance is equal to specified <see cref="T:Microsoft.Xna.Framework.BoundingFrustum"/>.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> to compare.</param>
            <returns><c>true</c> if the instances are equal; <c>false</c> otherwise.</returns>
        </member>
        <member name="M:Microsoft.Xna.Framework.BoundingFrustum.GetCorners">
            <summary>
            Returns a copy of internal corners array.
            </summary>
            <returns>The array of corners.</returns>
        </member>
        <member name="M:Microsoft.Xna.Framework.BoundingFrustum.GetCorners(Microsoft.Xna.Framework.Vector3[])">
            <summary>
            Returns a copy of internal corners array.
            </summary>
            <param name="corners">The array which values will be replaced to corner values of this instance. It must have size of <see cref="F:Microsoft.Xna.Framework.BoundingFrustum.CornerCount"/>.</param>
        </member>
        <member name="M:Microsoft.Xna.Framework.BoundingFrustum.GetHashCode">
            <summary>
            Gets the hash code of this <see cref="T:Microsoft.Xna.Framework.BoundingFrustum"/>.
            </summary>
            <returns>Hash code of this <see cref="T:Microsoft.Xna.Framework.BoundingFrustum"/>.</returns>
        </member>
        <member name="M:Microsoft.Xna.Framework.BoundingFrustum.Intersects(Microsoft.Xna.Framework.BoundingBox)">
            <summary>
            Gets whether or not a specified <see cref="T:Microsoft.Xna.Framework.BoundingBox"/> intersects with this <see cref="T:Microsoft.Xna.Framework.BoundingFrustum"/>.
            </summary>
            <param name="box">A <see cref="T:Microsoft.Xna.Framework.BoundingBox"/> for intersection test.</param>
            <returns><c>true</c> if specified <see cref="T:Microsoft.Xna.Framework.BoundingBox"/> intersects with this <see cref="T:Microsoft.Xna.Framework.BoundingFrustum"/>; <c>false</c> otherwise.</returns>
        </member>
        <member name="M:Microsoft.Xna.Framework.BoundingFrustum.Intersects(Microsoft.Xna.Framework.BoundingBox@,System.Boolean@)">
            <summary>
            Gets whether or not a specified <see cref="T:Microsoft.Xna.Framework.BoundingBox"/> intersects with this <see cref="T:Microsoft.Xna.Framework.BoundingFrustum"/>.
            </summary>
            <param name="box">A <see cref="T:Microsoft.Xna.Framework.BoundingBox"/> for intersection test.</param>
            <param name="result"><c>true</c> if specified <see cref="T:Microsoft.Xna.Framework.BoundingBox"/> intersects with this <see cref="T:Microsoft.Xna.Framework.BoundingFrustum"/>; <c>false</c> otherwise as an output parameter.</param>
        </member>
        <member name="M:Microsoft.Xna.Framework.BoundingFrustum.Intersects(Microsoft.Xna.Framework.BoundingFrustum)">
            <summary>
            Gets whether or not a specified <see cref="T:Microsoft.Xna.Framework.BoundingFrustum"/> intersects with this <see cref="T:Microsoft.Xna.Framework.BoundingFrustum"/>.
            </summary>
            <param name="frustum">An other <see cref="T:Microsoft.Xna.Framework.BoundingFrustum"/> for intersection test.</param>
            <returns><c>true</c> if other <see cref="T:Microsoft.Xna.Framework.BoundingFrustum"/> intersects with this <see cref="T:Microsoft.Xna.Framework.BoundingFrustum"/>; <c>false</c> otherwise.</returns>
        </member>
        <member name="M:Microsoft.Xna.Framework.BoundingFrustum.Intersects(Microsoft.Xna.Framework.BoundingSphere)">
            <summary>
            Gets whether or not a specified <see cref="T:Microsoft.Xna.Framework.BoundingSphere"/> intersects with this <see cref="T:Microsoft.Xna.Framework.BoundingFrustum"/>.
            </summary>
            <param name="sphere">A <see cref="T:Microsoft.Xna.Framework.BoundingSphere"/> for intersection test.</param>
            <returns><c>true</c> if specified <see cref="T:Microsoft.Xna.Framework.BoundingSphere"/> intersects with this <see cref="T:Microsoft.Xna.Framework.BoundingFrustum"/>; <c>false</c> otherwise.</returns>
        </member>
        <member name="M:Microsoft.Xna.Framework.BoundingFrustum.Intersects(Microsoft.Xna.Framework.BoundingSphere@,System.Boolean@)">
            <summary>
            Gets whether or not a specified <see cref="T:Microsoft.Xna.Framework.BoundingSphere"/> intersects with this <see cref="T:Microsoft.Xna.Framework.BoundingFrustum"/>.
            </summary>
            <param name="sphere">A <see cref="T:Microsoft.Xna.Framework.BoundingSphere"/> for intersection test.</param>
            <param name="result"><c>true</c> if specified <see cref="T:Microsoft.Xna.Framework.BoundingSphere"/> intersects with this <see cref="T:Microsoft.Xna.Framework.BoundingFrustum"/>; <c>false</c> otherwise as an output parameter.</param>
        </member>
        <member name="M:Microsoft.Xna.Framework.BoundingFrustum.Intersects(Microsoft.Xna.Framework.Plane)">
            <summary>
            Gets type of intersection between specified <see cref="T:Microsoft.Xna.Framework.Plane"/> and this <see cref="T:Microsoft.Xna.Framework.BoundingFrustum"/>.
            </summary>
            <param name="plane">A <see cref="T:Microsoft.Xna.Framework.Plane"/> for intersection test.</param>
            <returns>A plane intersection type.</returns>
        </member>
        <member name="M:Microsoft.Xna.Framework.BoundingFrustum.Intersects(Microsoft.Xna.Framework.Plane@,Microsoft.Xna.Framework.PlaneIntersectionType@)">
            <summary>
            Gets type of intersection between specified <see cref="T:Microsoft.Xna.Framework.Plane"/> and this <see cref="T:Microsoft.Xna.Framework.BoundingFrustum"/>.
            </summary>
            <param name="plane">A <see cref="T:Microsoft.Xna.Framework.Plane"/> for intersection test.</param>
            <param name="result">A plane intersection type as an output parameter.</param>
        </member>
        <member name="M:Microsoft.Xna.Framework.BoundingFrustum.Intersects(Microsoft.Xna.Framework.Ray)">
            <summary>
            Gets the distance of intersection of <see cref="T:Microsoft.Xna.Framework.Ray"/> and this <see cref="T:Microsoft.Xna.Framework.BoundingFrustum"/> or null if no intersection happens.
            </summary>
            <param name="ray">A <see cref="T:Microsoft.Xna.Framework.Ray"/> for intersection test.</param>
            <returns>Distance at which ray intersects with this <see cref="T:Microsoft.Xna.Framework.BoundingFrustum"/> or null if no intersection happens.</returns>
        </member>
        <member name="M:Microsoft.Xna.Framework.BoundingFrustum.Intersects(Microsoft.Xna.Framework.Ray@,System.Nullable{System.Single}@)">
            <summary>
            Gets the distance of intersection of <see cref="T:Microsoft.Xna.Framework.Ray"/> and this <see cref="T:Microsoft.Xna.Framework.BoundingFrustum"/> or null if no intersection happens.
            </summary>
            <param name="ray">A <see cref="T:Microsoft.Xna.Framework.Ray"/> for intersection test.</param>
            <param name="result">Distance at which ray intersects with this <see cref="T:Microsoft.Xna.Framework.BoundingFrustum"/> or null if no intersection happens as an output parameter.</param>
        </member>
        <member name="M:Microsoft.Xna.Framework.BoundingFrustum.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> representation of this <see cref="T:Microsoft.Xna.Framework.BoundingFrustum"/> in the format:
            {Near:[nearPlane] Far:[farPlane] Left:[leftPlane] Right:[rightPlane] Top:[topPlane] Bottom:[bottomPlane]}
            </summary>
            <returns><see cref="T:System.String"/> representation of this <see cref="T:Microsoft.Xna.Framework.BoundingFrustum"/>.</returns>
        </member>
        <member name="T:Microsoft.Xna.Framework.BoundingSphere">
            <summary>
            Describes a sphere in 3D-space for bounding operations.
            </summary>
        </member>
        <member name="F:Microsoft.Xna.Framework.BoundingSphere.Center">
            <summary>
            The sphere center.
            </summary>
        </member>
        <member name="F:Microsoft.Xna.Framework.BoundingSphere.Radius">
            <summary>
            The sphere radius.
            </summary>
        </member>
        <member name="M:Microsoft.Xna.Framework.BoundingSphere.#ctor(Microsoft.Xna.Framework.Vector3,System.Single)">
            <summary>
            Constructs a bounding sphere with the specified center and radius.  
            </summary>
            <param name="center">The sphere center.</param>
            <param name="radius">The sphere radius.</param>
        </member>
        <member name="M:Microsoft.Xna.Framework.BoundingSphere.Contains(Microsoft.Xna.Framework.BoundingBox)">
            <summary>
            Test if a bounding box is fully inside, outside, or just intersecting the sphere.
            </summary>
            <param name="box">The box for testing.</param>
            <returns>The containment type.</returns>
        </member>
        <member name="M:Microsoft.Xna.Framework.BoundingSphere.Contains(Microsoft.Xna.Framework.BoundingBox@,Microsoft.Xna.Framework.ContainmentType@)">
            <summary>
            Test if a bounding box is fully inside, outside, or just intersecting the sphere.
            </summary>
            <param name="box">The box for testing.</param>
            <param name="result">The containment type as an output parameter.</param>
        </member>
        <member name="M:Microsoft.Xna.Framework.BoundingSphere.Contains(Microsoft.Xna.Framework.BoundingFrustum)">
            <summary>
            Test if a frustum is fully inside, outside, or just intersecting the sphere.
            </summary>
            <param name="frustum">The frustum for testing.</param>
            <returns>The containment type.</returns>
        </member>
        <member name="M:Microsoft.Xna.Framework.BoundingSphere.Contains(Microsoft.Xna.Framework.BoundingFrustum@,Microsoft.Xna.Framework.ContainmentType@)">
            <summary>
            Test if a frustum is fully inside, outside, or just intersecting the sphere.
            </summary>
            <param name="frustum">The frustum for testing.</param>
            <param name="result">The containment type as an output parameter.</param>
        </member>
        <member name="M:Microsoft.Xna.Framework.BoundingSphere.Contains(Microsoft.Xna.Framework.BoundingSphere)">
            <summary>
            Test if a sphere is fully inside, outside, or just intersecting the sphere.
            </summary>
            <param name="sphere">The other sphere for testing.</param>
            <returns>The containment type.</returns>
        </member>
        <member name="M:Microsoft.Xna.Framework.BoundingSphere.Contains(Microsoft.Xna.Framework.BoundingSphere@,Microsoft.Xna.Framework.ContainmentType@)">
            <summary>
            Test if a sphere is fully inside, outside, or just intersecting the sphere.
            </summary>
            <param name="sphere">The other sphere for testing.</param>
            <param name="result">The containment type as an output parameter.</param>
        </member>
        <member name="M:Microsoft.Xna.Framework.BoundingSphere.Contains(Microsoft.Xna.Framework.Vector3)">
            <summary>
            Test if a point is fully inside, outside, or just intersecting the sphere.
            </summary>
            <param name="point">The vector in 3D-space for testing.</param>
            <returns>The containment type.</returns>
        </member>
        <member name="M:Microsoft.Xna.Framework.BoundingSphere.Contains(Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.ContainmentType@)">
            <summary>
            Test if a point is fully inside, outside, or just intersecting the sphere.
            </summary>
            <param name="point">The vector in 3D-space for testing.</param>
            <param name="result">The containment type as an output parameter.</param>
        </member>
        <member name="M:Microsoft.Xna.Framework.BoundingSphere.CreateFromBoundingBox(Microsoft.Xna.Framework.BoundingBox)">
            <summary>
            Creates the smallest <see cref="T:Microsoft.Xna.Framework.BoundingSphere"/> that can contain a specified <see cref="T:Microsoft.Xna.Framework.BoundingBox"/>.
            </summary>
            <param name="box">The box to create the sphere from.</param>
            <returns>The new <see cref="T:Microsoft.Xna.Framework.BoundingSphere"/>.</returns>
        </member>
        <member name="M:Microsoft.Xna.Framework.BoundingSphere.CreateFromBoundingBox(Microsoft.Xna.Framework.BoundingBox@,Microsoft.Xna.Framework.BoundingSphere@)">
            <summary>
            Creates the smallest <see cref="T:Microsoft.Xna.Framework.BoundingSphere"/> that can contain a specified <see cref="T:Microsoft.Xna.Framework.BoundingBox"/>.
            </summary>
            <param name="box">The box to create the sphere from.</param>
            <param name="result">The new <see cref="T:Microsoft.Xna.Framework.BoundingSphere"/> as an output parameter.</param>
        </member>
        <member name="M:Microsoft.Xna.Framework.BoundingSphere.CreateFromFrustum(Microsoft.Xna.Framework.BoundingFrustum)">
            <summary>
            Creates the smallest <see cref="T:Microsoft.Xna.Framework.BoundingSphere"/> that can contain a specified <see cref="T:Microsoft.Xna.Framework.BoundingFrustum"/>.
            </summary>
            <param name="frustum">The frustum to create the sphere from.</param>
            <returns>The new <see cref="T:Microsoft.Xna.Framework.BoundingSphere"/>.</returns>
        </member>
        <member name="M:Microsoft.Xna.Framework.BoundingSphere.CreateFromPoints(System.Collections.Generic.IEnumerable{Microsoft.Xna.Framework.Vector3})">
            <summary>
            Creates the smallest <see cref="T:Microsoft.Xna.Framework.BoundingSphere"/> that can contain a specified list of points in 3D-space. 
            </summary>
            <param name="points">List of point to create the sphere from.</param>
            <returns>The new <see cref="T:Microsoft.Xna.Framework.BoundingSphere"/>.</returns>
        </member>
        <member name="M:Microsoft.Xna.Framework.BoundingSphere.CreateMerged(Microsoft.Xna.Framework.BoundingSphere,Microsoft.Xna.Framework.BoundingSphere)">
            <summary>
            Creates the smallest <see cref="T:Microsoft.Xna.Framework.BoundingSphere"/> that can contain two spheres.
            </summary>
            <param name="original">First sphere.</param>
            <param name="additional">Second sphere.</param>
            <returns>The new <see cref="T:Microsoft.Xna.Framework.BoundingSphere"/>.</returns>
        </member>
        <member name="M:Microsoft.Xna.Framework.BoundingSphere.CreateMerged(Microsoft.Xna.Framework.BoundingSphere@,Microsoft.Xna.Framework.BoundingSphere@,Microsoft.Xna.Framework.BoundingSphere@)">
            <summary>
            Creates the smallest <see cref="T:Microsoft.Xna.Framework.BoundingSphere"/> that can contain two spheres.
            </summary>
            <param name="original">First sphere.</param>
            <param name="additional">Second sphere.</param>
            <param name="result">The new <see cref="T:Microsoft.Xna.Framework.BoundingSphere"/> as an output parameter.</param>
        </member>
        <member name="M:Microsoft.Xna.Framework.BoundingSphere.Equals(Microsoft.Xna.Framework.BoundingSphere)">
            <summary>
            Compares whether current instance is equal to specified <see cref="T:Microsoft.Xna.Framework.BoundingSphere"/>.
            </summary>
            <param name="other">The <see cref="T:Microsoft.Xna.Framework.BoundingSphere"/> to compare.</param>
            <returns><c>true</c> if the instances are equal; <c>false</c> otherwise.</returns>
        </member>
        <member name="M:Microsoft.Xna.Framework.BoundingSphere.Equals(System.Object)">
            <summary>
            Compares whether current instance is equal to specified <see cref="T:System.Object"/>.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> to compare.</param>
            <returns><c>true</c> if the instances are equal; <c>false</c> otherwise.</returns>
        </member>
        <member name="M:Microsoft.Xna.Framework.BoundingSphere.GetHashCode">
            <summary>
            Gets the hash code of this <see cref="T:Microsoft.Xna.Framework.BoundingSphere"/>.
            </summary>
            <returns>Hash code of this <see cref="T:Microsoft.Xna.Framework.BoundingSphere"/>.</returns>
        </member>
        <member name="M:Microsoft.Xna.Framework.BoundingSphere.Intersects(Microsoft.Xna.Framework.BoundingBox)">
            <summary>
            Gets whether or not a specified <see cref="T:Microsoft.Xna.Framework.BoundingBox"/> intersects with this sphere.
            </summary>
            <param name="box">The box for testing.</param>
            <returns><c>true</c> if <see cref="T:Microsoft.Xna.Framework.BoundingBox"/> intersects with this sphere; <c>false</c> otherwise.</returns>
        </member>
        <member name="M:Microsoft.Xna.Framework.BoundingSphere.Intersects(Microsoft.Xna.Framework.BoundingBox@,System.Boolean@)">
            <summary>
            Gets whether or not a specified <see cref="T:Microsoft.Xna.Framework.BoundingBox"/> intersects with this sphere.
            </summary>
            <param name="box">The box for testing.</param>
            <param name="result"><c>true</c> if <see cref="T:Microsoft.Xna.Framework.BoundingBox"/> intersects with this sphere; <c>false</c> otherwise. As an output parameter.</param>
        </member>
        <member name="M:Microsoft.Xna.Framework.BoundingSphere.Intersects(Microsoft.Xna.Framework.BoundingSphere)">
            <summary>
            Gets whether or not the other <see cref="T:Microsoft.Xna.Framework.BoundingSphere"/> intersects with this sphere.
            </summary>
            <param name="sphere">The other sphere for testing.</param>
            <returns><c>true</c> if other <see cref="T:Microsoft.Xna.Framework.BoundingSphere"/> intersects with this sphere; <c>false</c> otherwise.</returns>
        </member>
        <member name="M:Microsoft.Xna.Framework.BoundingSphere.Intersects(Microsoft.Xna.Framework.BoundingSphere@,System.Boolean@)">
            <summary>
            Gets whether or not the other <see cref="T:Microsoft.Xna.Framework.BoundingSphere"/> intersects with this sphere.
            </summary>
            <param name="sphere">The other sphere for testing.</param>
            <param name="result"><c>true</c> if other <see cref="T:Microsoft.Xna.Framework.BoundingSphere"/> intersects with this sphere; <c>false</c> otherwise. As an output parameter.</param>
        </member>
        <member name="M:Microsoft.Xna.Framework.BoundingSphere.Intersects(Microsoft.Xna.Framework.Plane)">
            <summary>
            Gets whether or not a specified <see cref="T:Microsoft.Xna.Framework.Plane"/> intersects with this sphere.
            </summary>
            <param name="plane">The plane for testing.</param>
            <returns>Type of intersection.</returns>
        </member>
        <member name="M:Microsoft.Xna.Framework.BoundingSphere.Intersects(Microsoft.Xna.Framework.Plane@,Microsoft.Xna.Framework.PlaneIntersectionType@)">
            <summary>
            Gets whether or not a specified <see cref="T:Microsoft.Xna.Framework.Plane"/> intersects with this sphere.
            </summary>
            <param name="plane">The plane for testing.</param>
            <param name="result">Type of intersection as an output parameter.</param>
        </member>
        <member name="M:Microsoft.Xna.Framework.BoundingSphere.Intersects(Microsoft.Xna.Framework.Ray)">
            <summary>
            Gets whether or not a specified <see cref="T:Microsoft.Xna.Framework.Ray"/> intersects with this sphere.
            </summary>
            <param name="ray">The ray for testing.</param>
            <returns>Distance of ray intersection or <c>null</c> if there is no intersection.</returns>
        </member>
        <member name="M:Microsoft.Xna.Framework.BoundingSphere.Intersects(Microsoft.Xna.Framework.Ray@,System.Nullable{System.Single}@)">
            <summary>
            Gets whether or not a specified <see cref="T:Microsoft.Xna.Framework.Ray"/> intersects with this sphere.
            </summary>
            <param name="ray">The ray for testing.</param>
            <param name="result">Distance of ray intersection or <c>null</c> if there is no intersection as an output parameter.</param>
        </member>
        <member name="M:Microsoft.Xna.Framework.BoundingSphere.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> representation of this <see cref="T:Microsoft.Xna.Framework.BoundingSphere"/> in the format:
            {Center:[<see cref="F:Microsoft.Xna.Framework.BoundingSphere.Center"/>] Radius:[<see cref="F:Microsoft.Xna.Framework.BoundingSphere.Radius"/>]}
            </summary>
            <returns>A <see cref="T:System.String"/> representation of this <see cref="T:Microsoft.Xna.Framework.BoundingSphere"/>.</returns>
        </member>
        <member name="M:Microsoft.Xna.Framework.BoundingSphere.Transform(Microsoft.Xna.Framework.Matrix)">
            <summary>
            Creates a new <see cref="T:Microsoft.Xna.Framework.BoundingSphere"/> that contains a transformation of translation and scale from this sphere by the specified <see cref="T:Microsoft.Xna.Framework.Matrix"/>.
            </summary>
            <param name="matrix">The transformation <see cref="T:Microsoft.Xna.Framework.Matrix"/>.</param>
            <returns>Transformed <see cref="T:Microsoft.Xna.Framework.BoundingSphere"/>.</returns>
        </member>
        <member name="M:Microsoft.Xna.Framework.BoundingSphere.Transform(Microsoft.Xna.Framework.Matrix@,Microsoft.Xna.Framework.BoundingSphere@)">
            <summary>
            Creates a new <see cref="T:Microsoft.Xna.Framework.BoundingSphere"/> that contains a transformation of translation and scale from this sphere by the specified <see cref="T:Microsoft.Xna.Framework.Matrix"/>.
            </summary>
            <param name="matrix">The transformation <see cref="T:Microsoft.Xna.Framework.Matrix"/>.</param>
            <param name="result">Transformed <see cref="T:Microsoft.Xna.Framework.BoundingSphere"/> as an output parameter.</param>
        </member>
        <member name="M:Microsoft.Xna.Framework.BoundingSphere.Deconstruct(Microsoft.Xna.Framework.Vector3@,System.Single@)">
            <summary>
            Deconstruction method for <see cref="T:Microsoft.Xna.Framework.BoundingSphere"/>.
            </summary>
            <param name="center"></param>
            <param name="radius"></param>
        </member>
        <member name="M:Microsoft.Xna.Framework.BoundingSphere.op_Equality(Microsoft.Xna.Framework.BoundingSphere,Microsoft.Xna.Framework.BoundingSphere)">
            <summary>
            Compares whether two <see cref="T:Microsoft.Xna.Framework.BoundingSphere"/> instances are equal.
            </summary>
            <param name="a"><see cref="T:Microsoft.Xna.Framework.BoundingSphere"/> instance on the left of the equal sign.</param>
            <param name="b"><see cref="T:Microsoft.Xna.Framework.BoundingSphere"/> instance on the right of the equal sign.</param>
            <returns><c>true</c> if the instances are equal; <c>false</c> otherwise.</returns>
        </member>
        <member name="M:Microsoft.Xna.Framework.BoundingSphere.op_Inequality(Microsoft.Xna.Framework.BoundingSphere,Microsoft.Xna.Framework.BoundingSphere)">
            <summary>
            Compares whether two <see cref="T:Microsoft.Xna.Framework.BoundingSphere"/> instances are not equal.
            </summary>
            <param name="a"><see cref="T:Microsoft.Xna.Framework.BoundingSphere"/> instance on the left of the not equal sign.</param>
            <param name="b"><see cref="T:Microsoft.Xna.Framework.BoundingSphere"/> instance on the right of the not equal sign.</param>
            <returns><c>true</c> if the instances are not equal; <c>false</c> otherwise.</returns>
        </member>
        <member name="F:Microsoft.Xna.Framework.Complex.R">
            <summary>
            The real part of this <see cref="T:Microsoft.Xna.Framework.Complex"/> number.
            </summary>
        </member>
        <member name="F:Microsoft.Xna.Framework.Complex.i">
            <summary>
            The imaginary part of this <see cref="T:Microsoft.Xna.Framework.Complex"/> number.
            </summary>
        </member>
        <member name="P:Microsoft.Xna.Framework.Complex.Zero">
            <summary>
            Returns a <see cref="T:Microsoft.Xna.Framework.Complex"/> number with components (0, 0i).
            </summary>
        </member>
        <member name="P:Microsoft.Xna.Framework.Complex.One">
            <summary>
            Returns a <see cref="T:Microsoft.Xna.Framework.Complex"/> number with components (1, 0i).
            </summary>
        </member>
        <member name="P:Microsoft.Xna.Framework.Complex.ImaginaryOne">
            <summary>
            Returns a <see cref="T:Microsoft.Xna.Framework.Complex"/> number with components (0, 1i).
            </summary>
        </member>
        <member name="P:Microsoft.Xna.Framework.Complex.Identity">
            <summary>
            Returns a <see cref="T:Microsoft.Xna.Framework.Complex"/> number with components (1, 0i).
            </summary>
        </member>
        <member name="M:Microsoft.Xna.Framework.Complex.#ctor(System.Single,System.Single)">
            <summary>
            Constructs a complex number with real and imaginary components.
            </summary>
            <param name="real">The real part of this <see cref="T:Microsoft.Xna.Framework.Complex"/> number.</param>
            <param name="imaginary"> The imaginary part of this <see cref="T:Microsoft.Xna.Framework.Complex"/> number.</param>
        </member>
        <member name="M:Microsoft.Xna.Framework.Complex.#ctor(Microsoft.Xna.Framework.Vector2)">
            <summary>
            Constructs a complex number from <see cref="T:Microsoft.Xna.Framework.Vector2"/>.
            </summary>
            <param name="value">The R,i components.</param>
        </member>
        <member name="M:Microsoft.Xna.Framework.Complex.CreateFromPolarCoordinates(System.Single,System.Single)">
            <summary>
            Creates a new <see cref="T:Microsoft.Xna.Framework.Complex"/> number from the specified angle.
            </summary>
            /// <param name="phase">The angle in radians.</param>
            /// <param name="magnitude">The magnitude.</param>
        </member>
        <member name="M:Microsoft.Xna.Framework.Complex.CreateFromAngle(System.Single)">
            <summary>
            Creates a new <see cref="T:Microsoft.Xna.Framework.Complex"/> number from the specified angle.
            </summary>
            /// <param name="angle">The angle in radians.</param>
        </member>
        <member name="M:Microsoft.Xna.Framework.Complex.Conjugate">
            <summary>
            Transforms this complex number into its conjugated version.
            </summary>
        </member>
        <member name="M:Microsoft.Xna.Framework.Complex.Negate">
            <summary>
            Flips the sign of the all the complex number components.
            </summary>
        </member>
        <member name="M:Microsoft.Xna.Framework.Complex.MagnitudeSquared">
            <summary>
            Returns the squared magnitude of the complex number.
            </summary>
            <returns>The squared magnitude of the complex number components.</returns>
        </member>
        <member name="M:Microsoft.Xna.Framework.Complex.Normalize">
            <summary>
            Scales the complex number magnitude to unit length.
            </summary>
        </member>
        <member name="M:Microsoft.Xna.Framework.Complex.ToVector2">
            <summary>
            Gets a <see cref="T:Microsoft.Xna.Framework.Vector2"/> representation for this complex number.
            </summary>
            <returns>A <see cref="T:Microsoft.Xna.Framework.Vector2"/> representation for this complex number.</returns>
        </member>
        <member name="M:Microsoft.Xna.Framework.Complex.Multiply(Microsoft.Xna.Framework.Complex,Microsoft.Xna.Framework.Complex)">
            <summary>
            Creates a new <see cref="T:Microsoft.Xna.Framework.Complex"/> number that contains a multiplication of two complex numbers.
            </summary>
            <param name="left">Source <see cref="T:Microsoft.Xna.Framework.Complex"/> number.</param>
            <param name="right">Source <see cref="T:Microsoft.Xna.Framework.Complex"/> number.</param>
            <returns>The result of the complex number multiplication.</returns>
        </member>
        <member name="M:Microsoft.Xna.Framework.Complex.Multiply(Microsoft.Xna.Framework.Complex@,Microsoft.Xna.Framework.Complex@,Microsoft.Xna.Framework.Complex@)">
            <summary>
            Creates a new <see cref="T:Microsoft.Xna.Framework.Complex"/> number that contains a multiplication of two complex numbers.
            </summary>
            <param name="left">Source <see cref="T:Microsoft.Xna.Framework.Complex"/> number.</param>
            <param name="right">Source <see cref="T:Microsoft.Xna.Framework.Complex"/> number.</param>
            <param name="result">The result of the complex number multiplication as an output parameter.</param>
        </member>
        <member name="M:Microsoft.Xna.Framework.Complex.Multiply(Microsoft.Xna.Framework.Complex,System.Single)">
            <summary>
            Creates a new <see cref="T:Microsoft.Xna.Framework.Complex"/> that contains a multiplication of <see cref="T:Microsoft.Xna.Framework.Complex"/> and a scalar.
            </summary>
            <param name="left">Source <see cref="T:Microsoft.Xna.Framework.Complex"/>.</param>
            <param name="right">Scalar value.</param>
            <returns>The result of the Complex multiplication with a scalar.</returns>
        </member>
        <member name="M:Microsoft.Xna.Framework.Complex.Multiply(Microsoft.Xna.Framework.Complex@,System.Single,Microsoft.Xna.Framework.Complex@)">
            <summary>
            Creates a new <see cref="T:Microsoft.Xna.Framework.Complex"/> that contains a multiplication of <see cref="T:Microsoft.Xna.Framework.Complex"/> and a scalar.
            </summary>
            <param name="left">Source <see cref="T:Microsoft.Xna.Framework.Complex"/>.</param>
            <param name="right">Scalar value.</param>
            <param name="result">The result of the multiplication with a scalar as an output parameter.</param>
        </member>
        <member name="M:Microsoft.Xna.Framework.Complex.Divide(Microsoft.Xna.Framework.Complex,System.Single)">
            <summary>
            Divides the components of a <see cref="T:Microsoft.Xna.Framework.Complex"/> by a scalar.
            </summary>
            <param name="left">Source <see cref="T:Microsoft.Xna.Framework.Complex"/>.</param>
            <param name="right">Divisor scalar.</param>
            <returns>The result of dividing a Complex by a scalar.</returns>
        </member>
        <member name="M:Microsoft.Xna.Framework.Complex.Divide(Microsoft.Xna.Framework.Complex@,System.Single,Microsoft.Xna.Framework.Complex@)">
            <summary>
            Divides the components of a <see cref="T:Microsoft.Xna.Framework.Complex"/> by a scalar.
            </summary>
            <param name="left">Source <see cref="T:Microsoft.Xna.Framework.Complex"/>.</param>
            <param name="right">Divisor scalar.</param>
            <param name="result">The result of dividing a Complex by a scalar as an output parameter.</param>
        </member>
        <member name="M:Microsoft.Xna.Framework.Complex.Conjugate(Microsoft.Xna.Framework.Complex)">
            <summary>
            Transforms this complex number into its conjugated version.
            </summary>
            <param name="value">The complex number which values will be used to create the conjugated version.</param>
            <returns>The conjugate version of the specified complex number.</returns>
        </member>
        <member name="M:Microsoft.Xna.Framework.Complex.Conjugate(Microsoft.Xna.Framework.Complex@,Microsoft.Xna.Framework.Complex@)">
            <summary>
            Transforms this complex number into its conjugated version.
            </summary>
            <param name="value">The complex number which values will be used to create the conjugated version.</param>
            <param name="result">The conjugated version of the specified complex number as an output parameter.</param>
        </member>
        <member name="M:Microsoft.Xna.Framework.Complex.Negate(Microsoft.Xna.Framework.Complex)">
            <summary>
            Flips the sign of the all the complex number components.
            </summary>
            <param name="value">Source <see cref="T:Microsoft.Xna.Framework.Complex"/>.</param>
            <returns>The result of the complex number negation.</returns>
        </member>
        <member name="M:Microsoft.Xna.Framework.Complex.Negate(Microsoft.Xna.Framework.Complex@,Microsoft.Xna.Framework.Complex@)">
            <summary>
            Flips the sign of the all the complex number components.
            </summary>
            <param name="value">Source <see cref="T:Microsoft.Xna.Framework.Complex"/>.</param>
            <param name="result">The result of the complex number negation as an output parameter.</param>
        </member>
        <member name="M:Microsoft.Xna.Framework.Complex.Normalize(Microsoft.Xna.Framework.Complex)">
            <summary>
            Scales the complex number magnitude to unit length.
            </summary>
            <param name="value">Source <see cref="T:Microsoft.Xna.Framework.Complex"/>.</param>
            <returns>The unit length complex number.</returns>
        </member>
        <member name="M:Microsoft.Xna.Framework.Complex.Normalize(Microsoft.Xna.Framework.Complex@,Microsoft.Xna.Framework.Complex@)">
            <summary>
            Scales the complex number magnitude to unit length.
            </summary>
            <param name="value">Source <see cref="T:Microsoft.Xna.Framework.Complex"/>.</param>
            <param name="result">The unit length complex number as an output parameter.</param>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Microsoft.Xna.Framework.Complex.Deconstruct(System.Single@,System.Single@)" -->
        <member name="M:Microsoft.Xna.Framework.Complex.op_UnaryNegation(Microsoft.Xna.Framework.Complex)">
            <summary>
            Flips the sign of the all the complex number components.
            </summary>
            <param name="value">Source <see cref="T:Microsoft.Xna.Framework.Complex"/> on the right of the sub sign.</param>
            <returns>The result of the complex number negation.</returns>
        </member>
        <member name="M:Microsoft.Xna.Framework.Complex.op_Multiply(Microsoft.Xna.Framework.Complex,Microsoft.Xna.Framework.Complex)">
            <summary>
            Multiplies two complex numbers.
            </summary>
            <param name="left">Source <see cref="T:Microsoft.Xna.Framework.Complex"/> number on the left of the mul sign.</param>
            <param name="right">Source <see cref="T:Microsoft.Xna.Framework.Complex"/> number on the right of the mul sign.</param>
            <returns>Result of the complex numbers multiplication.</returns>
        </member>
        <member name="M:Microsoft.Xna.Framework.Complex.op_Multiply(Microsoft.Xna.Framework.Complex,System.Single)">
            <summary>
            Multiplies the components of a <see cref="T:Microsoft.Xna.Framework.Complex"/> number by a scalar.
            </summary>
            <param name="left">Source <see cref="T:Microsoft.Xna.Framework.Complex"/> on the left of the mul sign.</param>
            <param name="right">Scalar value on the right of the mul sign.</param>
            <returns>Result of the complex number multiplication with a scalar.</returns>
        </member>
        <member name="M:Microsoft.Xna.Framework.Complex.op_Division(Microsoft.Xna.Framework.Complex,Microsoft.Xna.Framework.Complex)">
            <summary>
            Divides a <see cref="T:Microsoft.Xna.Framework.Complex"/> number by the other <see cref="T:Microsoft.Xna.Framework.Complex"/> number.
            </summary>
            <param name="left">Source <see cref="T:Microsoft.Xna.Framework.Complex"/> number on the left of the div sign.</param>
            <param name="right">Divisor <see cref="T:Microsoft.Xna.Framework.Complex"/> number on the right of the div sign.</param>
            <returns>The result of dividing the complex numbers.</returns>
        </member>
        <member name="M:Microsoft.Xna.Framework.Complex.op_Division(Microsoft.Xna.Framework.Complex,System.Single)">
            <summary>
            Divides the components of a <see cref="T:Microsoft.Xna.Framework.Complex"/> number by a scalar.
            </summary>
            <param name="left">Source <see cref="T:Microsoft.Xna.Framework.Complex"/> on the left of the div sign.</param>
            <param name="right">Divisor scalar on the right of the div sign.</param>
            <returns>The result of dividing a complex number by a scalar.</returns>
        </member>
        <member name="M:Microsoft.Xna.Framework.Complex.op_Equality(Microsoft.Xna.Framework.Complex,Microsoft.Xna.Framework.Complex)">
            <summary>
            Compares whether two <see cref="T:Microsoft.Xna.Framework.Complex"/> instances are equal.
            </summary>
            <param name="left"><see cref="T:Microsoft.Xna.Framework.Complex"/> instance on the left of the equal sign.</param>
            <param name="right"><see cref="T:Microsoft.Xna.Framework.Complex"/> instance on the right of the equal sign.</param>
            <returns><c>true</c> if the instances are equal; <c>false</c> otherwise.</returns>
        </member>
        <member name="M:Microsoft.Xna.Framework.Complex.op_Inequality(Microsoft.Xna.Framework.Complex,Microsoft.Xna.Framework.Complex)">
            <summary>
            Compares whether two <see cref="T:Microsoft.Xna.Framework.Complex"/> instances are not equal.
            </summary>
            <param name="left"><see cref="T:Microsoft.Xna.Framework.Complex"/> instance on the left of the not equal sign.</param>
            <param name="right"><see cref="T:Microsoft.Xna.Framework.Complex"/> instance on the right of the not equal sign.</param>
            <returns><c>true</c> if the instances are not equal; <c>false</c> otherwise.</returns>
        </member>
        <member name="M:Microsoft.Xna.Framework.Complex.Equals(System.Object)">
            <summary>
            Compares whether current instance is equal to specified <see cref="T:System.Object"/>.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> to compare.</param>
            <returns><c>true</c> if the instances are equal; <c>false</c> otherwise.</returns>
        </member>
        <member name="M:Microsoft.Xna.Framework.Complex.Equals(Microsoft.Xna.Framework.Complex)">
            <summary>
            Compares whether current instance is equal to specified <see cref="T:Microsoft.Xna.Framework.Complex"/>.
            </summary>
            <param name="other">The <see cref="T:Microsoft.Xna.Framework.Complex"/> to compare.</param>
            <returns><c>true</c> if the instances are equal; <c>false</c> otherwise.</returns>
        </member>
        <member name="M:Microsoft.Xna.Framework.Complex.GetHashCode">
            <summary>
            Gets the hash code of this <see cref="T:Microsoft.Xna.Framework.Complex"/>.
            </summary>
            <returns>Hash code of this <see cref="T:Microsoft.Xna.Framework.Complex"/>.</returns>
        </member>
        <member name="T:Microsoft.Xna.Framework.ContainmentType">
            <summary>
            Defines how the bounding volumes intersects or contain one another.
            </summary>
        </member>
        <member name="F:Microsoft.Xna.Framework.ContainmentType.Disjoint">
            <summary>
            Indicates that there is no overlap between two bounding volumes.
            </summary>
        </member>
        <member name="F:Microsoft.Xna.Framework.ContainmentType.Contains">
            <summary>
            Indicates that one bounding volume completely contains another volume.
            </summary>
        </member>
        <member name="F:Microsoft.Xna.Framework.ContainmentType.Intersects">
            <summary>
            Indicates that bounding volumes partially overlap one another.
            </summary>
        </member>
        <member name="T:Microsoft.Xna.Framework.Curve">
            <summary>
            Contains a collection of <see cref="T:Microsoft.Xna.Framework.CurveKey"/> points in 2D space and provides methods for evaluating features of the curve they define.
            </summary>
        </member>
        <member name="P:Microsoft.Xna.Framework.Curve.IsConstant">
            <summary>
            Returns <c>true</c> if this curve is constant (has zero or one points); <c>false</c> otherwise.
            </summary>
        </member>
        <member name="P:Microsoft.Xna.Framework.Curve.PreLoop">
            <summary>
            Defines how to handle weighting values that are less than the first control point in the curve.
            </summary>
        </member>
        <member name="P:Microsoft.Xna.Framework.Curve.PostLoop">
            <summary>
            Defines how to handle weighting values that are greater than the last control point in the curve.
            </summary>
        </member>
        <member name="P:Microsoft.Xna.Framework.Curve.Keys">
            <summary>
            The collection of curve keys.
            </summary>
        </member>
        <member name="M:Microsoft.Xna.Framework.Curve.#ctor">
            <summary>
            Constructs a curve.
            </summary>
        </member>
        <member name="M:Microsoft.Xna.Framework.Curve.Clone">
            <summary>
            Creates a copy of this curve.
            </summary>
            <returns>A copy of this curve.</returns>
        </member>
        <member name="M:Microsoft.Xna.Framework.Curve.Evaluate(System.Single)">
            <summary>
            Evaluate the value at a position of this <see cref="T:Microsoft.Xna.Framework.Curve"/>.
            </summary>
            <param name="position">The position on this <see cref="T:Microsoft.Xna.Framework.Curve"/>.</param>
            <returns>Value at the position on this <see cref="T:Microsoft.Xna.Framework.Curve"/>.</returns>
        </member>
        <member name="M:Microsoft.Xna.Framework.Curve.ComputeTangents(Microsoft.Xna.Framework.CurveTangent)">
            <summary>
            Computes tangents for all keys in the collection.
            </summary>
            <param name="tangentType">The tangent type for both in and out.</param>
        </member>
        <member name="M:Microsoft.Xna.Framework.Curve.ComputeTangents(Microsoft.Xna.Framework.CurveTangent,Microsoft.Xna.Framework.CurveTangent)">
            <summary>
            Computes tangents for all keys in the collection.
            </summary>
            <param name="tangentInType">The tangent in-type. <see cref="P:Microsoft.Xna.Framework.CurveKey.TangentIn"/> for more details.</param>
            <param name="tangentOutType">The tangent out-type. <see cref="P:Microsoft.Xna.Framework.CurveKey.TangentOut"/> for more details.</param>
        </member>
        <member name="M:Microsoft.Xna.Framework.Curve.ComputeTangent(System.Int32,Microsoft.Xna.Framework.CurveTangent)">
            <summary>
            Computes tangent for the specific key in the collection.
            </summary>
            <param name="keyIndex">The index of a key in the collection.</param>
            <param name="tangentType">The tangent type for both in and out.</param>
        </member>
        <member name="M:Microsoft.Xna.Framework.Curve.ComputeTangent(System.Int32,Microsoft.Xna.Framework.CurveTangent,Microsoft.Xna.Framework.CurveTangent)">
            <summary>
            Computes tangent for the specific key in the collection.
            </summary>
            <param name="keyIndex">The index of key in the collection.</param>
            <param name="tangentInType">The tangent in-type. <see cref="P:Microsoft.Xna.Framework.CurveKey.TangentIn"/> for more details.</param>
            <param name="tangentOutType">The tangent out-type. <see cref="P:Microsoft.Xna.Framework.CurveKey.TangentOut"/> for more details.</param>
        </member>
        <member name="T:Microsoft.Xna.Framework.CurveContinuity">
            <summary>
            Defines the continuity of keys on a <see cref="T:Microsoft.Xna.Framework.Curve"/>.
            </summary>
        </member>
        <member name="F:Microsoft.Xna.Framework.CurveContinuity.Smooth">
            <summary>
            Interpolation can be used between this key and the next.
            </summary>
        </member>
        <member name="F:Microsoft.Xna.Framework.CurveContinuity.Step">
            <summary>
            Interpolation cannot be used. A position between the two points returns this point.
            </summary>
        </member>
        <member name="T:Microsoft.Xna.Framework.CurveKey">
            <summary>
            Key point on the <see cref="T:Microsoft.Xna.Framework.Curve"/>.
            </summary>
        </member>
        <member name="P:Microsoft.Xna.Framework.CurveKey.Continuity">
            <summary>
            Gets or sets the indicator whether the segment between this point and the next point on the curve is discrete or continuous.
            </summary>
        </member>
        <member name="P:Microsoft.Xna.Framework.CurveKey.Position">
            <summary>
            Gets a position of the key on the curve.
            </summary>
        </member>
        <member name="P:Microsoft.Xna.Framework.CurveKey.TangentIn">
            <summary>
            Gets or sets a tangent when approaching this point from the previous point on the curve.
            </summary>
        </member>
        <member name="P:Microsoft.Xna.Framework.CurveKey.TangentOut">
            <summary>
            Gets or sets a tangent when leaving this point to the next point on the curve.
            </summary>
        </member>
        <member name="P:Microsoft.Xna.Framework.CurveKey.Value">
            <summary>
            Gets a value of this point.
            </summary>
        </member>
        <member name="M:Microsoft.Xna.Framework.CurveKey.#ctor">
            <summary>
            Creates a new instance of <see cref="T:Microsoft.Xna.Framework.CurveKey"/> class with position: 0 and value: 0.
            </summary>
        </member>
        <member name="M:Microsoft.Xna.Framework.CurveKey.#ctor(System.Single,System.Single)">
            <summary>
            Creates a new instance of <see cref="T:Microsoft.Xna.Framework.CurveKey"/> class.
            </summary>
            <param name="position">Position on the curve.</param>
            <param name="value">Value of the control point.</param>
        </member>
        <member name="M:Microsoft.Xna.Framework.CurveKey.#ctor(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Creates a new instance of <see cref="T:Microsoft.Xna.Framework.CurveKey"/> class.
            </summary>
            <param name="position">Position on the curve.</param>
            <param name="value">Value of the control point.</param>
            <param name="tangentIn">Tangent approaching point from the previous point on the curve.</param>
            <param name="tangentOut">Tangent leaving point toward next point on the curve.</param>
        </member>
        <member name="M:Microsoft.Xna.Framework.CurveKey.#ctor(System.Single,System.Single,System.Single,System.Single,Microsoft.Xna.Framework.CurveContinuity)">
            <summary>
            Creates a new instance of <see cref="T:Microsoft.Xna.Framework.CurveKey"/> class.
            </summary>
            <param name="position">Position on the curve.</param>
            <param name="value">Value of the control point.</param>
            <param name="tangentIn">Tangent approaching point from the previous point on the curve.</param>
            <param name="tangentOut">Tangent leaving point toward next point on the curve.</param>
            <param name="continuity">Indicates whether the curve is discrete or continuous.</param>
        </member>
        <member name="M:Microsoft.Xna.Framework.CurveKey.op_Inequality(Microsoft.Xna.Framework.CurveKey,Microsoft.Xna.Framework.CurveKey)">
            <summary>
            
            Compares whether two <see cref="T:Microsoft.Xna.Framework.CurveKey"/> instances are not equal.
            </summary>
            <param name="left"><see cref="T:Microsoft.Xna.Framework.CurveKey"/> instance on the left of the not equal sign.</param>
            <param name="right"><see cref="T:Microsoft.Xna.Framework.CurveKey"/> instance on the right of the not equal sign.</param>
            <returns><c>true</c> if the instances are not equal; <c>false</c> otherwise.</returns>	
        </member>
        <member name="M:Microsoft.Xna.Framework.CurveKey.op_Equality(Microsoft.Xna.Framework.CurveKey,Microsoft.Xna.Framework.CurveKey)">
            <summary>
            Compares whether two <see cref="T:Microsoft.Xna.Framework.CurveKey"/> instances are equal.
            </summary>
            <param name="left"><see cref="T:Microsoft.Xna.Framework.CurveKey"/> instance on the left of the equal sign.</param>
            <param name="right"><see cref="T:Microsoft.Xna.Framework.CurveKey"/> instance on the right of the equal sign.</param>
            <returns><c>true</c> if the instances are equal; <c>false</c> otherwise.</returns>
        </member>
        <member name="M:Microsoft.Xna.Framework.CurveKey.Clone">
            <summary>
            Creates a copy of this key.
            </summary>
            <returns>A copy of this key.</returns>
        </member>
        <member name="T:Microsoft.Xna.Framework.CurveKeyCollection">
            <summary>
            The collection of the <see cref="T:Microsoft.Xna.Framework.CurveKey"/> elements and a part of the <see cref="T:Microsoft.Xna.Framework.Curve"/> class.
            </summary>
        </member>
        <member name="P:Microsoft.Xna.Framework.CurveKeyCollection.Item(System.Int32)">
            <summary>
            Indexer.
            </summary>
            <param name="index">The index of key in this collection.</param>
            <returns><see cref="T:Microsoft.Xna.Framework.CurveKey"/> at <paramref name="index"/> position.</returns>
        </member>
        <member name="P:Microsoft.Xna.Framework.CurveKeyCollection.Count">
            <summary>
            Returns the count of keys in this collection.
            </summary>
        </member>
        <member name="P:Microsoft.Xna.Framework.CurveKeyCollection.IsReadOnly">
            <summary>
            Returns false because it is not a read-only collection.
            </summary>
        </member>
        <member name="M:Microsoft.Xna.Framework.CurveKeyCollection.#ctor">
            <summary>
            Creates a new instance of <see cref="T:Microsoft.Xna.Framework.CurveKeyCollection"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.Xna.Framework.CurveKeyCollection.Add(Microsoft.Xna.Framework.CurveKey)">
            <summary>
            Adds a key to this collection.
            </summary>
            <param name="item">New key for the collection.</param>
            <exception cref="T:System.ArgumentNullException">Throws if <paramref name="item"/> is null.</exception>
            <remarks>The new key would be added respectively to a position of that key and the position of other keys.</remarks>
        </member>
        <member name="M:Microsoft.Xna.Framework.CurveKeyCollection.Clear">
            <summary>
            Removes all keys from this collection.
            </summary>
        </member>
        <member name="M:Microsoft.Xna.Framework.CurveKeyCollection.Clone">
            <summary>
            Creates a copy of this collection.
            </summary>
            <returns>A copy of this collection.</returns>
        </member>
        <member name="M:Microsoft.Xna.Framework.CurveKeyCollection.Contains(Microsoft.Xna.Framework.CurveKey)">
            <summary>
            Determines whether this collection contains a specific key.
            </summary>
            <param name="item">The key to locate in this collection.</param>
            <returns><c>true</c> if the key is found; <c>false</c> otherwise.</returns>
        </member>
        <member name="M:Microsoft.Xna.Framework.CurveKeyCollection.CopyTo(Microsoft.Xna.Framework.CurveKey[],System.Int32)">
            <summary>
            Copies the keys of this collection to an array, starting at the array index provided.
            </summary>
            <param name="array">Destination array where elements will be copied.</param>
            <param name="arrayIndex">The zero-based index in the array to start copying from.</param>
        </member>
        <member name="M:Microsoft.Xna.Framework.CurveKeyCollection.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>An enumerator for the <see cref="T:Microsoft.Xna.Framework.CurveKeyCollection"/>.</returns>
        </member>
        <member name="M:Microsoft.Xna.Framework.CurveKeyCollection.IndexOf(Microsoft.Xna.Framework.CurveKey)">
            <summary>
            Finds element in the collection and returns its index.
            </summary>
            <param name="item">Element for the search.</param>
            <returns>Index of the element; or -1 if item is not found.</returns>
        </member>
        <member name="M:Microsoft.Xna.Framework.CurveKeyCollection.RemoveAt(System.Int32)">
            <summary>
            Removes element at the specified index.
            </summary>
            <param name="index">The index which element will be removed.</param>
        </member>
        <member name="M:Microsoft.Xna.Framework.CurveKeyCollection.Remove(Microsoft.Xna.Framework.CurveKey)">
            <summary>
            Removes specific element.
            </summary>
            <param name="item">The element</param>
            <returns><c>true</c> if item is successfully removed; <c>false</c> otherwise. This method also returns <c>false</c> if item was not found.</returns>
        </member>
        <member name="T:Microsoft.Xna.Framework.CurveLoopType">
            <summary>
            Defines how the <see cref="T:Microsoft.Xna.Framework.Curve"/> value is determined for position before first point or after the end point on the <see cref="T:Microsoft.Xna.Framework.Curve"/>.
            </summary>
        </member>
        <member name="F:Microsoft.Xna.Framework.CurveLoopType.Constant">
            <summary>
            The value of <see cref="T:Microsoft.Xna.Framework.Curve"/> will be evaluated as first point for positions before the beginning and end point for positions after the end.
            </summary>
        </member>
        <member name="F:Microsoft.Xna.Framework.CurveLoopType.Cycle">
            <summary>
            The positions will wrap around from the end to beginning of the <see cref="T:Microsoft.Xna.Framework.Curve"/> for determined the value.
            </summary>
        </member>
        <member name="F:Microsoft.Xna.Framework.CurveLoopType.CycleOffset">
            <summary>
            The positions will wrap around from the end to beginning of the <see cref="T:Microsoft.Xna.Framework.Curve"/>.
            The value will be offset by the difference between the values of first and end <see cref="T:Microsoft.Xna.Framework.CurveKey"/> multiplied by the wrap amount.
            If the position is before the beginning of the <see cref="T:Microsoft.Xna.Framework.Curve"/> the difference will be subtracted from its value; otherwise the difference will be added.
            </summary>
        </member>
        <member name="F:Microsoft.Xna.Framework.CurveLoopType.Oscillate">
            <summary>
            The value at the end of the <see cref="T:Microsoft.Xna.Framework.Curve"/> act as an offset from the same side of the <see cref="T:Microsoft.Xna.Framework.Curve"/> toward the opposite side.
            </summary>
        </member>
        <member name="F:Microsoft.Xna.Framework.CurveLoopType.Linear">
            <summary>
            The linear interpolation will be performed for determined the value. 
            </summary>
        </member>
        <member name="T:Microsoft.Xna.Framework.CurveTangent">
            <summary>
            Defines the different tangent types to be calculated for <see cref="T:Microsoft.Xna.Framework.CurveKey"/> points in a <see cref="T:Microsoft.Xna.Framework.Curve"/>.
            </summary>
        </member>
        <member name="F:Microsoft.Xna.Framework.CurveTangent.Flat">
            <summary>
            The tangent which always has a value equal to zero. 
            </summary>
        </member>
        <member name="F:Microsoft.Xna.Framework.CurveTangent.Linear">
            <summary>
            The tangent which contains a difference between current tangent value and the tangent value from the previous <see cref="T:Microsoft.Xna.Framework.CurveKey"/>. 
            </summary>
        </member>
        <member name="F:Microsoft.Xna.Framework.CurveTangent.Smooth">
            <summary>
            The smoouth tangent which contains the inflection between <see cref="P:Microsoft.Xna.Framework.CurveKey.TangentIn"/> and <see cref="P:Microsoft.Xna.Framework.CurveKey.TangentOut"/> by taking into account the values of both neighbors of the <see cref="T:Microsoft.Xna.Framework.CurveKey"/>.
            </summary>
        </member>
        <member name="T:Microsoft.Xna.Framework.FrameworkDispatcher">
            <summary>
            Helper class for processing internal framework events.
            </summary>
            <remarks>
            If you use <see cref="!:Game"/> class, <see cref="M:Microsoft.Xna.Framework.FrameworkDispatcher.Update"/> is called automatically.
            Otherwise you must call it as part of your game loop.
            </remarks>
        </member>
        <member name="P:Microsoft.Xna.Framework.FrameworkDispatcher.Current">
            <summary>
            Returns the current FrameworkDispatcher instance.
            </summary> 
        </member>
        <member name="M:Microsoft.Xna.Framework.FrameworkDispatcher.Update">
            <summary>
            Processes framework events.
            </summary>
        </member>
        <member name="T:Microsoft.Xna.Framework.ICurveEvaluator`1">
            <summary>
            Interface for curve evaluation. Implemented by <see cref="T:Microsoft.Xna.Framework.Curve"/>
            </summary>    
        </member>
        <member name="M:Microsoft.Xna.Framework.ICurveEvaluator`1.Evaluate(System.Single)">
            <summary>
            Evaluate the value at a position of this <see cref="T:Microsoft.Xna.Framework.ICurveEvaluator`1"/>.
            </summary>
            <param name="position">The position on this <see cref="T:Microsoft.Xna.Framework.ICurveEvaluator`1"/>.</param>
            <returns>Value at the position on this <see cref="T:Microsoft.Xna.Framework.ICurveEvaluator`1"/>.</returns>
        </member>
        <member name="T:Microsoft.Xna.Framework.MathHelper">
            <summary>
            Contains commonly used precalculated values and mathematical operations.
            </summary>
        </member>
        <member name="F:Microsoft.Xna.Framework.MathHelper.E">
            <summary>
            Represents the mathematical constant e(2.71828175).
            </summary>
        </member>
        <member name="F:Microsoft.Xna.Framework.MathHelper.Log10E">
            <summary>
            Represents the log base ten of e(0.4342945).
            </summary>
        </member>
        <member name="F:Microsoft.Xna.Framework.MathHelper.Log2E">
            <summary>
            Represents the log base two of e(1.442695).
            </summary>
        </member>
        <member name="F:Microsoft.Xna.Framework.MathHelper.Pi">
            <summary>
            Represents the value of pi(3.14159274).
            </summary>
        </member>
        <member name="F:Microsoft.Xna.Framework.MathHelper.PiOver2">
            <summary>
            Represents the value of pi divided by two(1.57079637).
            </summary>
        </member>
        <member name="F:Microsoft.Xna.Framework.MathHelper.PiOver4">
            <summary>
            Represents the value of pi divided by four(0.7853982).
            </summary>
        </member>
        <member name="F:Microsoft.Xna.Framework.MathHelper.TwoPi">
            <summary>
            Represents the value of pi times two(6.28318548).
            </summary>
        </member>
        <member name="F:Microsoft.Xna.Framework.MathHelper.Tau">
            <summary>
            Represents the value of pi times two(6.28318548).
            This is an alias of TwoPi.
            </summary>
        </member>
        <member name="M:Microsoft.Xna.Framework.MathHelper.Barycentric(System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Returns the Cartesian coordinate for one axis of a point that is defined by a given triangle and two normalized barycentric (areal) coordinates.
            </summary>
            <param name="value1">The coordinate on one axis of vertex 1 of the defining triangle.</param>
            <param name="value2">The coordinate on the same axis of vertex 2 of the defining triangle.</param>
            <param name="value3">The coordinate on the same axis of vertex 3 of the defining triangle.</param>
            <param name="amount1">The normalized barycentric (areal) coordinate b2, equal to the weighting factor for vertex 2, the coordinate of which is specified in value2.</param>
            <param name="amount2">The normalized barycentric (areal) coordinate b3, equal to the weighting factor for vertex 3, the coordinate of which is specified in value3.</param>
            <returns>Cartesian coordinate of the specified point with respect to the axis being used.</returns>
        </member>
        <member name="M:Microsoft.Xna.Framework.MathHelper.CatmullRom(System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Performs a Catmull-Rom interpolation using the specified positions.
            </summary>
            <param name="value1">The first position in the interpolation.</param>
            <param name="value2">The second position in the interpolation.</param>
            <param name="value3">The third position in the interpolation.</param>
            <param name="value4">The fourth position in the interpolation.</param>
            <param name="amount">Weighting factor.</param>
            <returns>A position that is the result of the Catmull-Rom interpolation.</returns>
        </member>
        <member name="M:Microsoft.Xna.Framework.MathHelper.Clamp(System.Single,System.Single,System.Single)">
            <summary>
            Restricts a value to be within a specified range.
            </summary>
            <param name="value">The value to clamp.</param>
            <param name="min">The minimum value. If <c>value</c> is less than <c>min</c>, <c>min</c> will be returned.</param>
            <param name="max">The maximum value. If <c>value</c> is greater than <c>max</c>, <c>max</c> will be returned.</param>
            <returns>The clamped value.</returns>
        </member>
        <member name="M:Microsoft.Xna.Framework.MathHelper.Clamp(System.Int32,System.Int32,System.Int32)">
            <summary>
            Restricts a value to be within a specified range.
            </summary>
            <param name="value">The value to clamp.</param>
            <param name="min">The minimum value. If <c>value</c> is less than <c>min</c>, <c>min</c> will be returned.</param>
            <param name="max">The maximum value. If <c>value</c> is greater than <c>max</c>, <c>max</c> will be returned.</param>
            <returns>The clamped value.</returns>
        </member>
        <member name="M:Microsoft.Xna.Framework.MathHelper.Distance(System.Single,System.Single)">
            <summary>
            Calculates the absolute value of the difference of two values.
            </summary>
            <param name="value1">Source value.</param>
            <param name="value2">Source value.</param>
            <returns>Distance between the two values.</returns>
        </member>
        <member name="M:Microsoft.Xna.Framework.MathHelper.Hermite(System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Performs a Hermite spline interpolation.
            </summary>
            <param name="value1">Source position.</param>
            <param name="tangent1">Source tangent.</param>
            <param name="value2">Source position.</param>
            <param name="tangent2">Source tangent.</param>
            <param name="amount">Weighting factor.</param>
            <returns>The result of the Hermite spline interpolation.</returns>
        </member>
        <member name="M:Microsoft.Xna.Framework.MathHelper.Lerp(System.Single,System.Single,System.Single)">
            <summary>
            Linearly interpolates between two values.
            </summary>
            <param name="start">Source value.</param>
            <param name="end">Destination value.</param>
            <param name="amount">Value between 0 and 1 indicating the weight of value2.</param>
            <returns>Interpolated value.</returns> 
            <remarks>This method performs the linear interpolation based on the following formula:
            <code>value1 + (value2 - value1) * amount</code>.
            Passing amount a value of 0 will cause value1 to be returned, a value of 1 will cause value2 to be returned.
            See <see cref="M:Microsoft.Xna.Framework.MathHelper.LerpPrecise(System.Single,System.Single,System.Single)"/> for a less efficient version with more precision around edge cases.
            </remarks>
        </member>
        <member name="M:Microsoft.Xna.Framework.MathHelper.LerpPrecise(System.Single,System.Single,System.Single)">
            <summary>
            Linearly interpolates between two values.
            This method is a less efficient, more precise version of <see cref="M:Microsoft.Xna.Framework.MathHelper.Lerp(System.Single,System.Single,System.Single)"/>.
            See remarks for more info.
            </summary>
            <param name="start">Source value.</param>
            <param name="end">Destination value.</param>
            <param name="amount">Value between 0 and 1 indicating the weight of value2.</param>
            <returns>Interpolated value.</returns>
            <remarks>This method performs the linear interpolation based on the following formula:
            <code>((1 - amount) * value1) + (value2 * amount)</code>.
            Passing amount a value of 0 will cause value1 to be returned, a value of 1 will cause value2 to be returned.
            This method does not have the floating point precision issue that <see cref="M:Microsoft.Xna.Framework.MathHelper.Lerp(System.Single,System.Single,System.Single)"/> has.
            i.e. If there is a big gap between value1 and value2 in magnitude (e.g. value1=10000000000000000, value2=1),
            right at the edge of the interpolation range (amount=1), <see cref="M:Microsoft.Xna.Framework.MathHelper.Lerp(System.Single,System.Single,System.Single)"/> will return 0 (whereas it should return 1).
            This also holds for value1=10^17, value2=10; value1=10^18,value2=10^2... so on.
            For an in depth explanation of the issue, see below references:
            Relevant Wikipedia Article: https://en.wikipedia.org/wiki/Linear_interpolation#Programming_language_support
            Relevant StackOverflow Answer: http://stackoverflow.com/questions/4353525/floating-point-linear-interpolation#answer-23716956
            </remarks>
        </member>
        <member name="M:Microsoft.Xna.Framework.MathHelper.Max(System.Single,System.Single)">
            <summary>
            Returns the greater of two values.
            </summary>
            <param name="value1">Source value.</param>
            <param name="value2">Source value.</param>
            <returns>The greater value.</returns>
        </member>
        <member name="M:Microsoft.Xna.Framework.MathHelper.Max(System.Int32,System.Int32)">
            <summary>
            Returns the greater of two values.
            </summary>
            <param name="value1">Source value.</param>
            <param name="value2">Source value.</param>
            <returns>The greater value.</returns>
        </member>
        <member name="M:Microsoft.Xna.Framework.MathHelper.Min(System.Single,System.Single)">
            <summary>
            Returns the lesser of two values.
            </summary>
            <param name="value1">Source value.</param>
            <param name="value2">Source value.</param>
            <returns>The lesser value.</returns>
        </member>
        <member name="M:Microsoft.Xna.Framework.MathHelper.Min(System.Int32,System.Int32)">
            <summary>
            Returns the lesser of two values.
            </summary>
            <param name="value1">Source value.</param>
            <param name="value2">Source value.</param>
            <returns>The lesser value.</returns>
        </member>
        <member name="M:Microsoft.Xna.Framework.MathHelper.SmoothStep(System.Single,System.Single,System.Single)">
            <summary>
            Interpolates between two values using a cubic equation.
            </summary>
            <param name="value1">Source value.</param>
            <param name="value2">Source value.</param>
            <param name="amount">Weighting value.</param>
            <returns>Interpolated value.</returns>
        </member>
        <member name="M:Microsoft.Xna.Framework.MathHelper.ToDegrees(System.Single)">
            <summary>
            Converts radians to degrees.
            </summary>
            <param name="radians">The angle in radians.</param>
            <returns>The angle in degrees.</returns>
            <remarks>
            This method uses double precission internally,
            though it returns single float
            Factor = 180 / pi
            </remarks>
        </member>
        <member name="M:Microsoft.Xna.Framework.MathHelper.ToRadians(System.Single)">
            <summary>
            Converts degrees to radians.
            </summary>
            <param name="degrees">The angle in degrees.</param>
            <returns>The angle in radians.</returns>
            <remarks>
            This method uses double precission internally,
            though it returns single float
            Factor = pi / 180
            </remarks>
        </member>
        <member name="M:Microsoft.Xna.Framework.MathHelper.WrapAngle(System.Single)">
            <summary>
            Reduces a given angle to a value between π and -π.
            </summary>
            <param name="angle">The angle to reduce, in radians.</param>
            <returns>The new angle, in radians.</returns>
        </member>
        <member name="M:Microsoft.Xna.Framework.MathHelper.IsPowerOfTwo(System.Int32)">
            <summary>
            Determines if value is powered by two.
            </summary>
            <param name="value">A value.</param>
            <returns><c>true</c> if <c>value</c> is powered by two; otherwise <c>false</c>.</returns>
        </member>
        <member name="T:Microsoft.Xna.Framework.Matrix">
            <summary>
            Represents the right-handed 4x4 floating point matrix, which can store translation, scale and rotation information.
            </summary>
        </member>
        <member name="M:Microsoft.Xna.Framework.Matrix.#ctor(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Constructs a matrix.
            </summary>
            <param name="m11">A first row and first column value.</param>
            <param name="m12">A first row and second column value.</param>
            <param name="m13">A first row and third column value.</param>
            <param name="m14">A first row and fourth column value.</param>
            <param name="m21">A second row and first column value.</param>
            <param name="m22">A second row and second column value.</param>
            <param name="m23">A second row and third column value.</param>
            <param name="m24">A second row and fourth column value.</param>
            <param name="m31">A third row and first column value.</param>
            <param name="m32">A third row and second column value.</param>
            <param name="m33">A third row and third column value.</param>
            <param name="m34">A third row and fourth column value.</param>
            <param name="m41">A fourth row and first column value.</param>
            <param name="m42">A fourth row and second column value.</param>
            <param name="m43">A fourth row and third column value.</param>
            <param name="m44">A fourth row and fourth column value.</param>
        </member>
        <member name="M:Microsoft.Xna.Framework.Matrix.#ctor(Microsoft.Xna.Framework.Vector4,Microsoft.Xna.Framework.Vector4,Microsoft.Xna.Framework.Vector4,Microsoft.Xna.Framework.Vector4)">
            <summary>
            Constructs a matrix.
            </summary>
            <param name="row1">A first row of the created matrix.</param>
            <param name="row2">A second row of the created matrix.</param>
            <param name="row3">A third row of the created matrix.</param>
            <param name="row4">A fourth row of the created matrix.</param>
        </member>
        <member name="F:Microsoft.Xna.Framework.Matrix.M11">
            <summary>
            A first row and first column value.
            </summary>
        </member>
        <member name="F:Microsoft.Xna.Framework.Matrix.M12">
            <summary>
            A first row and second column value.
            </summary>
        </member>
        <member name="F:Microsoft.Xna.Framework.Matrix.M13">
            <summary>
            A first row and third column value.
            </summary>
        </member>
        <member name="F:Microsoft.Xna.Framework.Matrix.M14">
            <summary>
            A first row and fourth column value.
            </summary>
        </member>
        <member name="F:Microsoft.Xna.Framework.Matrix.M21">
            <summary>
            A second row and first column value.
            </summary>
        </member>
        <member name="F:Microsoft.Xna.Framework.Matrix.M22">
            <summary>
            A second row and second column value.
            </summary>
        </member>
        <member name="F:Microsoft.Xna.Framework.Matrix.M23">
            <summary>
            A second row and third column value.
            </summary>
        </member>
        <member name="F:Microsoft.Xna.Framework.Matrix.M24">
            <summary>
            A second row and fourth column value.
            </summary>
        </member>
        <member name="F:Microsoft.Xna.Framework.Matrix.M31">
            <summary>
            A third row and first column value.
            </summary>
        </member>
        <member name="F:Microsoft.Xna.Framework.Matrix.M32">
            <summary>
            A third row and second column value.
            </summary>
        </member>
        <member name="F:Microsoft.Xna.Framework.Matrix.M33">
            <summary>
            A third row and third column value.
            </summary>
        </member>
        <member name="F:Microsoft.Xna.Framework.Matrix.M34">
            <summary>
            A third row and fourth column value.
            </summary>
        </member>
        <member name="F:Microsoft.Xna.Framework.Matrix.M41">
            <summary>
            A fourth row and first column value.
            </summary>
        </member>
        <member name="F:Microsoft.Xna.Framework.Matrix.M42">
            <summary>
            A fourth row and second column value.
            </summary>
        </member>
        <member name="F:Microsoft.Xna.Framework.Matrix.M43">
            <summary>
            A fourth row and third column value.
            </summary>
        </member>
        <member name="F:Microsoft.Xna.Framework.Matrix.M44">
            <summary>
            A fourth row and fourth column value.
            </summary>
        </member>
        <member name="P:Microsoft.Xna.Framework.Matrix.Item(System.Int32)">
            <summary>
            Get or set the matrix element at the given index, indexed in row major order.
            </summary>
            <param name="index">The linearized, zero-based index of the matrix element.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            If the index is less than <code>0</code> or larger than <code>15</code>.
            </exception>
        </member>
        <member name="P:Microsoft.Xna.Framework.Matrix.Item(System.Int32,System.Int32)">
            <summary>
            Get or set the value at the specified row and column (indices are zero-based).
            </summary>
            <param name="row">The row of the element.</param>
            <param name="column">The column of the element.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            If the row or column is less than <code>0</code> or larger than <code>3</code>.
            </exception>
        </member>
        <member name="P:Microsoft.Xna.Framework.Matrix.Backward">
            <summary>
            The backward vector formed from the third row M31, M32, M33 elements.
            </summary>
        </member>
        <member name="P:Microsoft.Xna.Framework.Matrix.Down">
            <summary>
            The down vector formed from the second row -M21, -M22, -M23 elements.
            </summary>
        </member>
        <member name="P:Microsoft.Xna.Framework.Matrix.Forward">
            <summary>
            The forward vector formed from the third row -M31, -M32, -M33 elements.
            </summary>
        </member>
        <member name="P:Microsoft.Xna.Framework.Matrix.Identity">
            <summary>
            Returns the identity matrix.
            </summary>
        </member>
        <member name="P:Microsoft.Xna.Framework.Matrix.Left">
            <summary>
            The left vector formed from the first row -M11, -M12, -M13 elements.
            </summary>
        </member>
        <member name="P:Microsoft.Xna.Framework.Matrix.Right">
            <summary>
            The right vector formed from the first row M11, M12, M13 elements.
            </summary>
        </member>
        <member name="P:Microsoft.Xna.Framework.Matrix.Translation">
            <summary>
            Position stored in this matrix.
            </summary>
        </member>
        <member name="P:Microsoft.Xna.Framework.Matrix.Up">
            <summary>
            The upper vector formed from the second row M21, M22, M23 elements.
            </summary>
        </member>
        <member name="M:Microsoft.Xna.Framework.Matrix.Add(Microsoft.Xna.Framework.Matrix,Microsoft.Xna.Framework.Matrix)">
            <summary>
            Creates a new <see cref="T:Microsoft.Xna.Framework.Matrix"/> which contains sum of two matrixes.
            </summary>
            <param name="left">The first matrix to add.</param>
            <param name="right">The second matrix to add.</param>
            <returns>The result of the matrix addition.</returns>
        </member>
        <member name="M:Microsoft.Xna.Framework.Matrix.Add(Microsoft.Xna.Framework.Matrix@,Microsoft.Xna.Framework.Matrix@,Microsoft.Xna.Framework.Matrix@)">
            <summary>
            Creates a new <see cref="T:Microsoft.Xna.Framework.Matrix"/> which contains sum of two matrixes.
            </summary>
            <param name="left">The first matrix to add.</param>
            <param name="right">The second matrix to add.</param>
            <param name="result">The result of the matrix addition as an output parameter.</param>
        </member>
        <member name="M:Microsoft.Xna.Framework.Matrix.CreateBillboard(Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Vector3,System.Nullable{Microsoft.Xna.Framework.Vector3})">
            <summary>
            Creates a new <see cref="T:Microsoft.Xna.Framework.Matrix"/> for spherical billboarding that rotates around specified object position.
            </summary>
            <param name="objectPosition">Position of billboard object. It will rotate around that vector.</param>
            <param name="cameraPosition">The camera position.</param>
            <param name="cameraUpVector">The camera up vector.</param>
            <param name="cameraForwardVector">Optional camera forward vector.</param>
            <returns>The <see cref="T:Microsoft.Xna.Framework.Matrix"/> for spherical billboarding.</returns>
        </member>
        <member name="M:Microsoft.Xna.Framework.Matrix.CreateBillboard(Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Vector3@,System.Nullable{Microsoft.Xna.Framework.Vector3},Microsoft.Xna.Framework.Matrix@)">
            <summary>
            Creates a new <see cref="T:Microsoft.Xna.Framework.Matrix"/> for spherical billboarding that rotates around specified object position.
            </summary>
            <param name="objectPosition">Position of billboard object. It will rotate around that vector.</param>
            <param name="cameraPosition">The camera position.</param>
            <param name="cameraUpVector">The camera up vector.</param>
            <param name="cameraForwardVector">Optional camera forward vector.</param>
            <param name="result">The <see cref="T:Microsoft.Xna.Framework.Matrix"/> for spherical billboarding as an output parameter.</param>
        </member>
        <member name="M:Microsoft.Xna.Framework.Matrix.CreateConstrainedBillboard(Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Vector3,System.Nullable{Microsoft.Xna.Framework.Vector3},System.Nullable{Microsoft.Xna.Framework.Vector3})">
            <summary>
            Creates a new <see cref="T:Microsoft.Xna.Framework.Matrix"/> for cylindrical billboarding that rotates around specified axis.
            </summary>
            <param name="objectPosition">Object position the billboard will rotate around.</param>
            <param name="cameraPosition">Camera position.</param>
            <param name="rotateAxis">Axis of billboard for rotation.</param>
            <param name="cameraForwardVector">Optional camera forward vector.</param>
            <param name="objectForwardVector">Optional object forward vector.</param>
            <returns>The <see cref="T:Microsoft.Xna.Framework.Matrix"/> for cylindrical billboarding.</returns>
        </member>
        <member name="M:Microsoft.Xna.Framework.Matrix.CreateConstrainedBillboard(Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Vector3@,System.Nullable{Microsoft.Xna.Framework.Vector3},System.Nullable{Microsoft.Xna.Framework.Vector3},Microsoft.Xna.Framework.Matrix@)">
            <summary>
            Creates a new <see cref="T:Microsoft.Xna.Framework.Matrix"/> for cylindrical billboarding that rotates around specified axis.
            </summary>
            <param name="objectPosition">Object position the billboard will rotate around.</param>
            <param name="cameraPosition">Camera position.</param>
            <param name="rotateAxis">Axis of billboard for rotation.</param>
            <param name="cameraForwardVector">Optional camera forward vector.</param>
            <param name="objectForwardVector">Optional object forward vector.</param>
            <param name="result">The <see cref="T:Microsoft.Xna.Framework.Matrix"/> for cylindrical billboarding as an output parameter.</param>
        </member>
        <member name="M:Microsoft.Xna.Framework.Matrix.CreateFromAxisAngle(Microsoft.Xna.Framework.Vector3,System.Single)">
            <summary>
            Creates a new <see cref="T:Microsoft.Xna.Framework.Matrix"/> which contains the rotation moment around specified axis.
            </summary>
            <param name="axis">The axis of rotation.</param>
            <param name="angle">The angle of rotation in radians.</param>
            <returns>The rotation <see cref="T:Microsoft.Xna.Framework.Matrix"/>.</returns>
        </member>
        <member name="M:Microsoft.Xna.Framework.Matrix.CreateFromAxisAngle(Microsoft.Xna.Framework.Vector3@,System.Single,Microsoft.Xna.Framework.Matrix@)">
            <summary>
            Creates a new <see cref="T:Microsoft.Xna.Framework.Matrix"/> which contains the rotation moment around specified axis.
            </summary>
            <param name="axis">The axis of rotation.</param>
            <param name="angle">The angle of rotation in radians.</param>
            <param name="result">The rotation <see cref="T:Microsoft.Xna.Framework.Matrix"/> as an output parameter.</param>
        </member>
        <member name="M:Microsoft.Xna.Framework.Matrix.CreateFromQuaternion(Microsoft.Xna.Framework.Quaternion)">
            <summary>
            Creates a new rotation <see cref="T:Microsoft.Xna.Framework.Matrix"/> from a <see cref="T:Microsoft.Xna.Framework.Quaternion"/>.
            </summary>
            <param name="quaternion"><see cref="T:Microsoft.Xna.Framework.Quaternion"/> of rotation moment.</param>
            <returns>The rotation <see cref="T:Microsoft.Xna.Framework.Matrix"/>.</returns>
        </member>
        <member name="M:Microsoft.Xna.Framework.Matrix.CreateFromQuaternion(Microsoft.Xna.Framework.Quaternion@,Microsoft.Xna.Framework.Matrix@)">
            <summary>
            Creates a new rotation <see cref="T:Microsoft.Xna.Framework.Matrix"/> from a <see cref="T:Microsoft.Xna.Framework.Quaternion"/>.
            </summary>
            <param name="quaternion"><see cref="T:Microsoft.Xna.Framework.Quaternion"/> of rotation moment.</param>
            <param name="result">The rotation <see cref="T:Microsoft.Xna.Framework.Matrix"/> as an output parameter.</param>
        </member>
        <member name="M:Microsoft.Xna.Framework.Matrix.CreateFromYawPitchRoll(System.Single,System.Single,System.Single)">
            <summary>
            Creates a new rotation <see cref="T:Microsoft.Xna.Framework.Matrix"/> from the specified yaw, pitch and roll values.
            </summary>
            <param name="yaw">The yaw rotation value in radians.</param>
            <param name="pitch">The pitch rotation value in radians.</param>
            <param name="roll">The roll rotation value in radians.</param>
            <returns>The rotation <see cref="T:Microsoft.Xna.Framework.Matrix"/>.</returns>
            <remarks>For more information about yaw, pitch and roll visit http://en.wikipedia.org/wiki/Euler_angles.
            </remarks>
        </member>
        <member name="M:Microsoft.Xna.Framework.Matrix.CreateFromYawPitchRoll(System.Single,System.Single,System.Single,Microsoft.Xna.Framework.Matrix@)">
            <summary>
            Creates a new rotation <see cref="T:Microsoft.Xna.Framework.Matrix"/> from the specified yaw, pitch and roll values.
            </summary>
            <param name="yaw">The yaw rotation value in radians.</param>
            <param name="pitch">The pitch rotation value in radians.</param>
            <param name="roll">The roll rotation value in radians.</param>
            <param name="result">The rotation <see cref="T:Microsoft.Xna.Framework.Matrix"/> as an output parameter.</param>
            <remarks>For more information about yaw, pitch and roll visit http://en.wikipedia.org/wiki/Euler_angles.
            </remarks>
        </member>
        <member name="M:Microsoft.Xna.Framework.Matrix.CreateLookAt(Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Vector3)">
            <summary>
            Creates a new viewing <see cref="T:Microsoft.Xna.Framework.Matrix"/>.
            </summary>
            <param name="cameraPosition">Position of the camera.</param>
            <param name="cameraTarget">Lookup vector of the camera.</param>
            <param name="cameraUpVector">The direction of the upper edge of the camera.</param>
            <returns>The viewing <see cref="T:Microsoft.Xna.Framework.Matrix"/>.</returns>
        </member>
        <member name="M:Microsoft.Xna.Framework.Matrix.CreateLookAt(Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Matrix@)">
            <summary>
            Creates a new viewing <see cref="T:Microsoft.Xna.Framework.Matrix"/>.
            </summary>
            <param name="cameraPosition">Position of the camera.</param>
            <param name="cameraTarget">Lookup vector of the camera.</param>
            <param name="cameraUpVector">The direction of the upper edge of the camera.</param>
            <param name="result">The viewing <see cref="T:Microsoft.Xna.Framework.Matrix"/> as an output parameter.</param>
        </member>
        <member name="M:Microsoft.Xna.Framework.Matrix.CreateOrthographic(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Creates a new projection <see cref="T:Microsoft.Xna.Framework.Matrix"/> for orthographic view.
            </summary>
            <param name="width">Width of the viewing volume.</param>
            <param name="height">Height of the viewing volume.</param>
            <param name="zNearPlane">Depth of the near plane.</param>
            <param name="zFarPlane">Depth of the far plane.</param>
            <returns>The new projection <see cref="T:Microsoft.Xna.Framework.Matrix"/> for orthographic view.</returns>
        </member>
        <member name="M:Microsoft.Xna.Framework.Matrix.CreateOrthographic(System.Single,System.Single,System.Single,System.Single,Microsoft.Xna.Framework.Matrix@)">
            <summary>
            Creates a new projection <see cref="T:Microsoft.Xna.Framework.Matrix"/> for orthographic view.
            </summary>
            <param name="width">Width of the viewing volume.</param>
            <param name="height">Height of the viewing volume.</param>
            <param name="zNearPlane">Depth of the near plane.</param>
            <param name="zFarPlane">Depth of the far plane.</param>
            <param name="result">The new projection <see cref="T:Microsoft.Xna.Framework.Matrix"/> for orthographic view as an output parameter.</param>
        </member>
        <member name="M:Microsoft.Xna.Framework.Matrix.CreateOrthographicOffCenter(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Creates a new projection <see cref="T:Microsoft.Xna.Framework.Matrix"/> for customized orthographic view.
            </summary>
            <param name="left">Lower x-value at the near plane.</param>
            <param name="right">Upper x-value at the near plane.</param>
            <param name="bottom">Lower y-coordinate at the near plane.</param>
            <param name="top">Upper y-value at the near plane.</param>
            <param name="zNearPlane">Depth of the near plane.</param>
            <param name="zFarPlane">Depth of the far plane.</param>
            <returns>The new projection <see cref="T:Microsoft.Xna.Framework.Matrix"/> for customized orthographic view.</returns>
        </member>
        <member name="M:Microsoft.Xna.Framework.Matrix.CreateOrthographicOffCenter(Microsoft.Xna.Framework.Rectangle,System.Single,System.Single)">
            <summary>
            Creates a new projection <see cref="T:Microsoft.Xna.Framework.Matrix"/> for customized orthographic view.
            </summary>
            <param name="viewingVolume">The viewing volume.</param>
            <param name="zNearPlane">Depth of the near plane.</param>
            <param name="zFarPlane">Depth of the far plane.</param>
            <returns>The new projection <see cref="T:Microsoft.Xna.Framework.Matrix"/> for customized orthographic view.</returns>
        </member>
        <member name="M:Microsoft.Xna.Framework.Matrix.CreateOrthographicOffCenter(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,Microsoft.Xna.Framework.Matrix@)">
            <summary>
            Creates a new projection <see cref="T:Microsoft.Xna.Framework.Matrix"/> for customized orthographic view.
            </summary>
            <param name="left">Lower x-value at the near plane.</param>
            <param name="right">Upper x-value at the near plane.</param>
            <param name="bottom">Lower y-coordinate at the near plane.</param>
            <param name="top">Upper y-value at the near plane.</param>
            <param name="zNearPlane">Depth of the near plane.</param>
            <param name="zFarPlane">Depth of the far plane.</param>
            <param name="result">The new projection <see cref="T:Microsoft.Xna.Framework.Matrix"/> for customized orthographic view as an output parameter.</param>
        </member>
        <member name="M:Microsoft.Xna.Framework.Matrix.CreatePerspective(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Creates a new projection <see cref="T:Microsoft.Xna.Framework.Matrix"/> for perspective view.
            </summary>
            <param name="width">Width of the viewing volume.</param>
            <param name="height">Height of the viewing volume.</param>
            <param name="nearPlaneDistance">Distance to the near plane.</param>
            <param name="farPlaneDistance">Distance to the far plane.</param>
            <returns>The new projection <see cref="T:Microsoft.Xna.Framework.Matrix"/> for perspective view.</returns>
        </member>
        <member name="M:Microsoft.Xna.Framework.Matrix.CreatePerspective(System.Single,System.Single,System.Single,System.Single,Microsoft.Xna.Framework.Matrix@)">
            <summary>
            Creates a new projection <see cref="T:Microsoft.Xna.Framework.Matrix"/> for perspective view.
            </summary>
            <param name="width">Width of the viewing volume.</param>
            <param name="height">Height of the viewing volume.</param>
            <param name="nearPlaneDistance">Distance to the near plane.</param>
            <param name="farPlaneDistance">Distance to the far plane.</param>
            <param name="result">The new projection <see cref="T:Microsoft.Xna.Framework.Matrix"/> for perspective view as an output parameter.</param>
        </member>
        <member name="M:Microsoft.Xna.Framework.Matrix.CreatePerspectiveFieldOfView(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Creates a new projection <see cref="T:Microsoft.Xna.Framework.Matrix"/> for perspective view with field of view.
            </summary>
            <param name="fieldOfView">Field of view in the y direction in radians.</param>
            <param name="aspectRatio">Width divided by height of the viewing volume.</param>
            <param name="nearPlaneDistance">Distance to the near plane.</param>
            <param name="farPlaneDistance">Distance to the far plane.</param>
            <returns>The new projection <see cref="T:Microsoft.Xna.Framework.Matrix"/> for perspective view with FOV.</returns>
        </member>
        <member name="M:Microsoft.Xna.Framework.Matrix.CreatePerspectiveFieldOfView(System.Single,System.Single,System.Single,System.Single,Microsoft.Xna.Framework.Matrix@)">
            <summary>
            Creates a new projection <see cref="T:Microsoft.Xna.Framework.Matrix"/> for perspective view with field of view.
            </summary>
            <param name="fieldOfView">Field of view in the y direction in radians.</param>
            <param name="aspectRatio">Width divided by height of the viewing volume.</param>
            <param name="nearPlaneDistance">Distance of the near plane.</param>
            <param name="farPlaneDistance">Distance of the far plane.</param>
            <param name="result">The new projection <see cref="T:Microsoft.Xna.Framework.Matrix"/> for perspective view with FOV as an output parameter.</param>
        </member>
        <member name="M:Microsoft.Xna.Framework.Matrix.CreatePerspectiveOffCenter(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Creates a new projection <see cref="T:Microsoft.Xna.Framework.Matrix"/> for customized perspective view.
            </summary>
            <param name="left">Lower x-value at the near plane.</param>
            <param name="right">Upper x-value at the near plane.</param>
            <param name="bottom">Lower y-coordinate at the near plane.</param>
            <param name="top">Upper y-value at the near plane.</param>
            <param name="nearPlaneDistance">Distance to the near plane.</param>
            <param name="farPlaneDistance">Distance to the far plane.</param>
            <returns>The new <see cref="T:Microsoft.Xna.Framework.Matrix"/> for customized perspective view.</returns>
        </member>
        <member name="M:Microsoft.Xna.Framework.Matrix.CreatePerspectiveOffCenter(Microsoft.Xna.Framework.Rectangle,System.Single,System.Single)">
            <summary>
            Creates a new projection <see cref="T:Microsoft.Xna.Framework.Matrix"/> for customized perspective view.
            </summary>
            <param name="viewingVolume">The viewing volume.</param>
            <param name="nearPlaneDistance">Distance to the near plane.</param>
            <param name="farPlaneDistance">Distance to the far plane.</param>
            <returns>The new <see cref="T:Microsoft.Xna.Framework.Matrix"/> for customized perspective view.</returns>
        </member>
        <member name="M:Microsoft.Xna.Framework.Matrix.CreatePerspectiveOffCenter(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,Microsoft.Xna.Framework.Matrix@)">
            <summary>
            Creates a new projection <see cref="T:Microsoft.Xna.Framework.Matrix"/> for customized perspective view.
            </summary>
            <param name="left">Lower x-value at the near plane.</param>
            <param name="right">Upper x-value at the near plane.</param>
            <param name="bottom">Lower y-coordinate at the near plane.</param>
            <param name="top">Upper y-value at the near plane.</param>
            <param name="nearPlaneDistance">Distance to the near plane.</param>
            <param name="farPlaneDistance">Distance to the far plane.</param>
            <param name="result">The new <see cref="T:Microsoft.Xna.Framework.Matrix"/> for customized perspective view as an output parameter.</param>
        </member>
        <member name="M:Microsoft.Xna.Framework.Matrix.CreateRotationX(System.Single)">
            <summary>
            Creates a new rotation <see cref="T:Microsoft.Xna.Framework.Matrix"/> around X axis.
            </summary>
            <param name="radians">Angle in radians.</param>
            <returns>The rotation <see cref="T:Microsoft.Xna.Framework.Matrix"/> around X axis.</returns>
        </member>
        <member name="M:Microsoft.Xna.Framework.Matrix.CreateRotationX(System.Single,Microsoft.Xna.Framework.Matrix@)">
            <summary>
            Creates a new rotation <see cref="T:Microsoft.Xna.Framework.Matrix"/> around X axis.
            </summary>
            <param name="radians">Angle in radians.</param>
            <param name="result">The rotation <see cref="T:Microsoft.Xna.Framework.Matrix"/> around X axis as an output parameter.</param>
        </member>
        <member name="M:Microsoft.Xna.Framework.Matrix.CreateRotationY(System.Single)">
            <summary>
            Creates a new rotation <see cref="T:Microsoft.Xna.Framework.Matrix"/> around Y axis.
            </summary>
            <param name="radians">Angle in radians.</param>
            <returns>The rotation <see cref="T:Microsoft.Xna.Framework.Matrix"/> around Y axis.</returns>
        </member>
        <member name="M:Microsoft.Xna.Framework.Matrix.CreateRotationY(System.Single,Microsoft.Xna.Framework.Matrix@)">
            <summary>
            Creates a new rotation <see cref="T:Microsoft.Xna.Framework.Matrix"/> around Y axis.
            </summary>
            <param name="radians">Angle in radians.</param>
            <param name="result">The rotation <see cref="T:Microsoft.Xna.Framework.Matrix"/> around Y axis as an output parameter.</param>
        </member>
        <member name="M:Microsoft.Xna.Framework.Matrix.CreateRotationZ(System.Single)">
            <summary>
            Creates a new rotation <see cref="T:Microsoft.Xna.Framework.Matrix"/> around Z axis.
            </summary>
            <param name="radians">Angle in radians.</param>
            <returns>The rotation <see cref="T:Microsoft.Xna.Framework.Matrix"/> around Z axis.</returns>
        </member>
        <member name="M:Microsoft.Xna.Framework.Matrix.CreateRotationZ(System.Single,Microsoft.Xna.Framework.Matrix@)">
            <summary>
            Creates a new rotation <see cref="T:Microsoft.Xna.Framework.Matrix"/> around Z axis.
            </summary>
            <param name="radians">Angle in radians.</param>
            <param name="result">The rotation <see cref="T:Microsoft.Xna.Framework.Matrix"/> around Z axis as an output parameter.</param>
        </member>
        <member name="M:Microsoft.Xna.Framework.Matrix.CreateScale(System.Single)">
            <summary>
            Creates a new scaling <see cref="T:Microsoft.Xna.Framework.Matrix"/>.
            </summary>
            <param name="scale">Scale value for all three axises.</param>
            <returns>The scaling <see cref="T:Microsoft.Xna.Framework.Matrix"/>.</returns>
        </member>
        <member name="M:Microsoft.Xna.Framework.Matrix.CreateScale(System.Single,Microsoft.Xna.Framework.Matrix@)">
            <summary>
            Creates a new scaling <see cref="T:Microsoft.Xna.Framework.Matrix"/>.
            </summary>
            <param name="scale">Scale value for all three axises.</param>
            <param name="result">The scaling <see cref="T:Microsoft.Xna.Framework.Matrix"/> as an output parameter.</param>
        </member>
        <member name="M:Microsoft.Xna.Framework.Matrix.CreateScale(System.Single,System.Single,System.Single)">
            <summary>
            Creates a new scaling <see cref="T:Microsoft.Xna.Framework.Matrix"/>.
            </summary>
            <param name="xScale">Scale value for X axis.</param>
            <param name="yScale">Scale value for Y axis.</param>
            <param name="zScale">Scale value for Z axis.</param>
            <returns>The scaling <see cref="T:Microsoft.Xna.Framework.Matrix"/>.</returns>
        </member>
        <member name="M:Microsoft.Xna.Framework.Matrix.CreateScale(System.Single,System.Single,System.Single,Microsoft.Xna.Framework.Matrix@)">
            <summary>
            Creates a new scaling <see cref="T:Microsoft.Xna.Framework.Matrix"/>.
            </summary>
            <param name="xScale">Scale value for X axis.</param>
            <param name="yScale">Scale value for Y axis.</param>
            <param name="zScale">Scale value for Z axis.</param>
            <param name="result">The scaling <see cref="T:Microsoft.Xna.Framework.Matrix"/> as an output parameter.</param>
        </member>
        <member name="M:Microsoft.Xna.Framework.Matrix.CreateScale(Microsoft.Xna.Framework.Vector3)">
            <summary>
            Creates a new scaling <see cref="T:Microsoft.Xna.Framework.Matrix"/>.
            </summary>
            <param name="scales"><see cref="T:Microsoft.Xna.Framework.Vector3"/> representing x,y and z scale values.</param>
            <returns>The scaling <see cref="T:Microsoft.Xna.Framework.Matrix"/>.</returns>
        </member>
        <member name="M:Microsoft.Xna.Framework.Matrix.CreateScale(Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Matrix@)">
            <summary>
            Creates a new scaling <see cref="T:Microsoft.Xna.Framework.Matrix"/>.
            </summary>
            <param name="scales"><see cref="T:Microsoft.Xna.Framework.Vector3"/> representing x,y and z scale values.</param>
            <param name="result">The scaling <see cref="T:Microsoft.Xna.Framework.Matrix"/> as an output parameter.</param>
        </member>
        <member name="M:Microsoft.Xna.Framework.Matrix.CreateShadow(Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Plane)">
            <summary>
            Creates a new <see cref="T:Microsoft.Xna.Framework.Matrix"/> that flattens geometry into a specified <see cref="T:Microsoft.Xna.Framework.Plane"/> as if casting a shadow from a specified light source. 
            </summary>
            <param name="lightDirection">A vector specifying the direction from which the light that will cast the shadow is coming.</param>
            <param name="plane">The plane onto which the new matrix should flatten geometry so as to cast a shadow.</param>
            <returns>A <see cref="T:Microsoft.Xna.Framework.Matrix"/> that can be used to flatten geometry onto the specified plane from the specified direction. </returns>
        </member>
        <member name="M:Microsoft.Xna.Framework.Matrix.CreateShadow(Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Plane@,Microsoft.Xna.Framework.Matrix@)">
            <summary>
            Creates a new <see cref="T:Microsoft.Xna.Framework.Matrix"/> that flattens geometry into a specified <see cref="T:Microsoft.Xna.Framework.Plane"/> as if casting a shadow from a specified light source. 
            </summary>
            <param name="lightDirection">A vector specifying the direction from which the light that will cast the shadow is coming.</param>
            <param name="plane">The plane onto which the new matrix should flatten geometry so as to cast a shadow.</param>
            <param name="result">A <see cref="T:Microsoft.Xna.Framework.Matrix"/> that can be used to flatten geometry onto the specified plane from the specified direction as an output parameter.</param>
        </member>
        <member name="M:Microsoft.Xna.Framework.Matrix.CreateTranslation(System.Single,System.Single,System.Single)">
            <summary>
            Creates a new translation <see cref="T:Microsoft.Xna.Framework.Matrix"/>.
            </summary>
            <param name="xPosition">X coordinate of translation.</param>
            <param name="yPosition">Y coordinate of translation.</param>
            <param name="zPosition">Z coordinate of translation.</param>
            <returns>The translation <see cref="T:Microsoft.Xna.Framework.Matrix"/>.</returns>
        </member>
        <member name="M:Microsoft.Xna.Framework.Matrix.CreateTranslation(Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Matrix@)">
            <summary>
            Creates a new translation <see cref="T:Microsoft.Xna.Framework.Matrix"/>.
            </summary>
            <param name="position">X,Y and Z coordinates of translation.</param>
            <param name="result">The translation <see cref="T:Microsoft.Xna.Framework.Matrix"/> as an output parameter.</param>
        </member>
        <member name="M:Microsoft.Xna.Framework.Matrix.CreateTranslation(Microsoft.Xna.Framework.Vector3)">
            <summary>
            Creates a new translation <see cref="T:Microsoft.Xna.Framework.Matrix"/>.
            </summary>
            <param name="position">X,Y and Z coordinates of translation.</param>
            <returns>The translation <see cref="T:Microsoft.Xna.Framework.Matrix"/>.</returns>
        </member>
        <member name="M:Microsoft.Xna.Framework.Matrix.CreateTranslation(System.Single,System.Single,System.Single,Microsoft.Xna.Framework.Matrix@)">
            <summary>
            Creates a new translation <see cref="T:Microsoft.Xna.Framework.Matrix"/>.
            </summary>
            <param name="xPosition">X coordinate of translation.</param>
            <param name="yPosition">Y coordinate of translation.</param>
            <param name="zPosition">Z coordinate of translation.</param>
            <param name="result">The translation <see cref="T:Microsoft.Xna.Framework.Matrix"/> as an output parameter.</param>
        </member>
        <member name="M:Microsoft.Xna.Framework.Matrix.CreateReflection(Microsoft.Xna.Framework.Plane)">
            <summary>
            Creates a new reflection <see cref="T:Microsoft.Xna.Framework.Matrix"/>.
            </summary>
            <param name="value">The plane that used for reflection calculation.</param>
            <returns>The reflection <see cref="T:Microsoft.Xna.Framework.Matrix"/>.</returns>
        </member>
        <member name="M:Microsoft.Xna.Framework.Matrix.CreateReflection(Microsoft.Xna.Framework.Plane@,Microsoft.Xna.Framework.Matrix@)">
            <summary>
            Creates a new reflection <see cref="T:Microsoft.Xna.Framework.Matrix"/>.
            </summary>
            <param name="value">The plane that used for reflection calculation.</param>
            <param name="result">The reflection <see cref="T:Microsoft.Xna.Framework.Matrix"/> as an output parameter.</param>
        </member>
        <member name="M:Microsoft.Xna.Framework.Matrix.CreateWorld(Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Vector3)">
            <summary>
            Creates a new world <see cref="T:Microsoft.Xna.Framework.Matrix"/>.
            </summary>
            <param name="position">The position vector.</param>
            <param name="forward">The forward direction vector.</param>
            <param name="up">The upward direction vector. Usually <see cref="P:Microsoft.Xna.Framework.Vector3.Up"/>.</param>
            <returns>The world <see cref="T:Microsoft.Xna.Framework.Matrix"/>.</returns>
        </member>
        <member name="M:Microsoft.Xna.Framework.Matrix.CreateWorld(Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Matrix@)">
            <summary>
            Creates a new world <see cref="T:Microsoft.Xna.Framework.Matrix"/>.
            </summary>
            <param name="position">The position vector.</param>
            <param name="forward">The forward direction vector.</param>
            <param name="up">The upward direction vector. Usually <see cref="P:Microsoft.Xna.Framework.Vector3.Up"/>.</param>
            <param name="result">The world <see cref="T:Microsoft.Xna.Framework.Matrix"/> as an output parameter.</param>
        </member>
        <member name="M:Microsoft.Xna.Framework.Matrix.Decompose(Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Quaternion@,Microsoft.Xna.Framework.Vector3@)">
            <summary>
            Decomposes this matrix to translation, rotation and scale elements. Returns <c>true</c> if matrix can be decomposed; <c>false</c> otherwise.
            </summary>
            <param name="scale">Scale vector as an output parameter.</param>
            <param name="rotation">Rotation quaternion as an output parameter.</param>
            <param name="translation">Translation vector as an output parameter.</param>
            <returns><c>true</c> if matrix can be decomposed; <c>false</c> otherwise.</returns>
        </member>
        <member name="M:Microsoft.Xna.Framework.Matrix.Determinant">
            <summary>
            Returns a determinant of this <see cref="T:Microsoft.Xna.Framework.Matrix"/>.
            </summary>
            <returns>Determinant of this <see cref="T:Microsoft.Xna.Framework.Matrix"/></returns>
            <remarks>See more about determinant here - http://en.wikipedia.org/wiki/Determinant.
            </remarks>
        </member>
        <member name="M:Microsoft.Xna.Framework.Matrix.Divide(Microsoft.Xna.Framework.Matrix,Microsoft.Xna.Framework.Matrix)">
            <summary>
            Divides the elements of a <see cref="T:Microsoft.Xna.Framework.Matrix"/> by the elements of another matrix.
            </summary>
            <param name="left">Source <see cref="T:Microsoft.Xna.Framework.Matrix"/>.</param>
            <param name="right">Divisor <see cref="T:Microsoft.Xna.Framework.Matrix"/>.</param>
            <returns>The result of dividing the matrix.</returns>
        </member>
        <member name="M:Microsoft.Xna.Framework.Matrix.Divide(Microsoft.Xna.Framework.Matrix@,Microsoft.Xna.Framework.Matrix@,Microsoft.Xna.Framework.Matrix@)">
            <summary>
            Divides the elements of a <see cref="T:Microsoft.Xna.Framework.Matrix"/> by the elements of another matrix.
            </summary>
            <param name="left">Source <see cref="T:Microsoft.Xna.Framework.Matrix"/>.</param>
            <param name="right">Divisor <see cref="T:Microsoft.Xna.Framework.Matrix"/>.</param>
            <param name="result">The result of dividing the matrix as an output parameter.</param>
        </member>
        <member name="M:Microsoft.Xna.Framework.Matrix.Divide(Microsoft.Xna.Framework.Matrix,System.Single)">
            <summary>
            Divides the elements of a <see cref="T:Microsoft.Xna.Framework.Matrix"/> by a scalar.
            </summary>
            <param name="left">Source <see cref="T:Microsoft.Xna.Framework.Matrix"/>.</param>
            <param name="right">Divisor scalar.</param>
            <returns>The result of dividing a matrix by a scalar.</returns>
        </member>
        <member name="M:Microsoft.Xna.Framework.Matrix.Divide(Microsoft.Xna.Framework.Matrix@,System.Single,Microsoft.Xna.Framework.Matrix@)">
            <summary>
            Divides the elements of a <see cref="T:Microsoft.Xna.Framework.Matrix"/> by a scalar.
            </summary>
            <param name="left">Source <see cref="T:Microsoft.Xna.Framework.Matrix"/>.</param>
            <param name="right">Divisor scalar.</param>
            <param name="result">The result of dividing a matrix by a scalar as an output parameter.</param>
        </member>
        <member name="M:Microsoft.Xna.Framework.Matrix.Equals(Microsoft.Xna.Framework.Matrix)">
            <summary>
            Compares whether current instance is equal to specified <see cref="T:Microsoft.Xna.Framework.Matrix"/> without any tolerance.
            </summary>
            <param name="other">The <see cref="T:Microsoft.Xna.Framework.Matrix"/> to compare.</param>
            <returns><c>true</c> if the instances are equal; <c>false</c> otherwise.</returns>
        </member>
        <member name="M:Microsoft.Xna.Framework.Matrix.Equals(System.Object)">
            <summary>
            Compares whether current instance is equal to specified <see cref="T:System.Object"/> without any tolerance.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> to compare.</param>
            <returns><c>true</c> if the instances are equal; <c>false</c> otherwise.</returns>
        </member>
        <member name="M:Microsoft.Xna.Framework.Matrix.GetHashCode">
            <summary>
            Gets the hash code of this <see cref="T:Microsoft.Xna.Framework.Matrix"/>.
            </summary>
            <returns>Hash code of this <see cref="T:Microsoft.Xna.Framework.Matrix"/>.</returns>
        </member>
        <member name="M:Microsoft.Xna.Framework.Matrix.Invert(Microsoft.Xna.Framework.Matrix)">
            <summary>
            Creates a new <see cref="T:Microsoft.Xna.Framework.Matrix"/> which contains inversion of the specified matrix. 
            </summary>
            <param name="value">Source <see cref="T:Microsoft.Xna.Framework.Matrix"/>.</param>
            <returns>The inverted matrix.</returns>
        </member>
        <member name="M:Microsoft.Xna.Framework.Matrix.Invert(Microsoft.Xna.Framework.Matrix@,Microsoft.Xna.Framework.Matrix@)">
            <summary>
            Creates a new <see cref="T:Microsoft.Xna.Framework.Matrix"/> which contains inversion of the specified matrix. 
            </summary>
            <param name="value">Source <see cref="T:Microsoft.Xna.Framework.Matrix"/>.</param>
            <param name="result">The inverted matrix as output parameter.</param>
        </member>
        <member name="M:Microsoft.Xna.Framework.Matrix.Lerp(Microsoft.Xna.Framework.Matrix,Microsoft.Xna.Framework.Matrix,System.Single)">
            <summary>
            Creates a new <see cref="T:Microsoft.Xna.Framework.Matrix"/> that contains linear interpolation of the values in specified matrixes.
            </summary>
            <param name="start">The first <see cref="T:Microsoft.Xna.Framework.Matrix"/>.</param>
            <param name="end">The second <see cref="T:Microsoft.Xna.Framework.Vector2"/>.</param>
            <param name="amount">Weighting value(between 0.0 and 1.0).</param>
            <returns>>The result of linear interpolation of the specified matrixes.</returns>
        </member>
        <member name="M:Microsoft.Xna.Framework.Matrix.Lerp(Microsoft.Xna.Framework.Matrix@,Microsoft.Xna.Framework.Matrix@,System.Single,Microsoft.Xna.Framework.Matrix@)">
            <summary>
            Creates a new <see cref="T:Microsoft.Xna.Framework.Matrix"/> that contains linear interpolation of the values in specified matrixes.
            </summary>
            <param name="start">The first <see cref="T:Microsoft.Xna.Framework.Matrix"/>.</param>
            <param name="end">The second <see cref="T:Microsoft.Xna.Framework.Vector2"/>.</param>
            <param name="amount">Weighting value(between 0.0 and 1.0).</param>
            <param name="result">The result of linear interpolation of the specified matrixes as an output parameter.</param>
        </member>
        <member name="M:Microsoft.Xna.Framework.Matrix.Multiply(Microsoft.Xna.Framework.Matrix,Microsoft.Xna.Framework.Matrix)">
            <summary>
            Creates a new <see cref="T:Microsoft.Xna.Framework.Matrix"/> that contains a multiplication of two matrix.
            </summary>
            <param name="left">Source <see cref="T:Microsoft.Xna.Framework.Matrix"/>.</param>
            <param name="right">Source <see cref="T:Microsoft.Xna.Framework.Matrix"/>.</param>
            <returns>Result of the matrix multiplication.</returns>
        </member>
        <member name="M:Microsoft.Xna.Framework.Matrix.Multiply(Microsoft.Xna.Framework.Matrix@,Microsoft.Xna.Framework.Matrix@,Microsoft.Xna.Framework.Matrix@)">
            <summary>
            Creates a new <see cref="T:Microsoft.Xna.Framework.Matrix"/> that contains a multiplication of two matrix.
            </summary>
            <param name="left">Source <see cref="T:Microsoft.Xna.Framework.Matrix"/>.</param>
            <param name="right">Source <see cref="T:Microsoft.Xna.Framework.Matrix"/>.</param>
            <param name="result">Result of the matrix multiplication as an output parameter.</param>
        </member>
        <member name="M:Microsoft.Xna.Framework.Matrix.Multiply(Microsoft.Xna.Framework.Matrix,System.Single)">
            <summary>
            Creates a new <see cref="T:Microsoft.Xna.Framework.Matrix"/> that contains a multiplication of <see cref="T:Microsoft.Xna.Framework.Matrix"/> and a scalar.
            </summary>
            <param name="left">Source <see cref="T:Microsoft.Xna.Framework.Matrix"/>.</param>
            <param name="right">Scalar value.</param>
            <returns>Result of the matrix multiplication with a scalar.</returns>
        </member>
        <member name="M:Microsoft.Xna.Framework.Matrix.Multiply(Microsoft.Xna.Framework.Matrix@,System.Single,Microsoft.Xna.Framework.Matrix@)">
            <summary>
            Creates a new <see cref="T:Microsoft.Xna.Framework.Matrix"/> that contains a multiplication of <see cref="T:Microsoft.Xna.Framework.Matrix"/> and a scalar.
            </summary>
            <param name="left">Source <see cref="T:Microsoft.Xna.Framework.Matrix"/>.</param>
            <param name="right">Scalar value.</param>
            <param name="result">Result of the matrix multiplication with a scalar as an output parameter.</param>
        </member>
        <member name="M:Microsoft.Xna.Framework.Matrix.ToFloatArray(Microsoft.Xna.Framework.Matrix)">
            <summary>
            Copy the values of specified <see cref="T:Microsoft.Xna.Framework.Matrix"/> to the float array.
            </summary>
            <param name="matrix">The source <see cref="T:Microsoft.Xna.Framework.Matrix"/>.</param>
            <returns>The array which matrix values will be stored.</returns>
            <remarks>
            Required for OpenGL 2.0 projection matrix stuff.
            </remarks>
        </member>
        <member name="M:Microsoft.Xna.Framework.Matrix.Negate(Microsoft.Xna.Framework.Matrix)">
            <summary>
            Returns a matrix with the all values negated.
            </summary>
            <param name="value">Source <see cref="T:Microsoft.Xna.Framework.Matrix"/>.</param>
            <returns>Result of the matrix negation.</returns>
        </member>
        <member name="M:Microsoft.Xna.Framework.Matrix.Negate(Microsoft.Xna.Framework.Matrix@,Microsoft.Xna.Framework.Matrix@)">
            <summary>
            Returns a matrix with the all values negated.
            </summary>
            <param name="value">Source <see cref="T:Microsoft.Xna.Framework.Matrix"/>.</param>
            <param name="result">Result of the matrix negation as an output parameter.</param>
        </member>
        <member name="M:Microsoft.Xna.Framework.Matrix.op_Addition(Microsoft.Xna.Framework.Matrix,Microsoft.Xna.Framework.Matrix)">
            <summary>
            Adds two matrixes.
            </summary>
            <param name="left">Source <see cref="T:Microsoft.Xna.Framework.Matrix"/> on the left of the add sign.</param>
            <param name="right">Source <see cref="T:Microsoft.Xna.Framework.Matrix"/> on the right of the add sign.</param>
            <returns>Sum of the matrixes.</returns>
        </member>
        <member name="M:Microsoft.Xna.Framework.Matrix.op_Division(Microsoft.Xna.Framework.Matrix,Microsoft.Xna.Framework.Matrix)">
            <summary>
            Divides the elements of a <see cref="T:Microsoft.Xna.Framework.Matrix"/> by the elements of another <see cref="T:Microsoft.Xna.Framework.Matrix"/>.
            </summary>
            <param name="left">Source <see cref="T:Microsoft.Xna.Framework.Matrix"/> on the left of the div sign.</param>
            <param name="right">Divisor <see cref="T:Microsoft.Xna.Framework.Matrix"/> on the right of the div sign.</param>
            <returns>The result of dividing the matrixes.</returns>
        </member>
        <member name="M:Microsoft.Xna.Framework.Matrix.op_Division(Microsoft.Xna.Framework.Matrix,System.Single)">
            <summary>
            Divides the elements of a <see cref="T:Microsoft.Xna.Framework.Matrix"/> by a scalar.
            </summary>
            <param name="left">Source <see cref="T:Microsoft.Xna.Framework.Matrix"/> on the left of the div sign.</param>
            <param name="right">Divisor scalar on the right of the div sign.</param>
            <returns>The result of dividing a matrix by a scalar.</returns>
        </member>
        <member name="M:Microsoft.Xna.Framework.Matrix.op_Equality(Microsoft.Xna.Framework.Matrix,Microsoft.Xna.Framework.Matrix)">
            <summary>
            Compares whether two <see cref="T:Microsoft.Xna.Framework.Matrix"/> instances are equal without any tolerance.
            </summary>
            <param name="left">Source <see cref="T:Microsoft.Xna.Framework.Matrix"/> on the left of the equal sign.</param>
            <param name="right">Source <see cref="T:Microsoft.Xna.Framework.Matrix"/> on the right of the equal sign.</param>
            <returns><c>true</c> if the instances are equal; <c>false</c> otherwise.</returns>
        </member>
        <member name="M:Microsoft.Xna.Framework.Matrix.op_Inequality(Microsoft.Xna.Framework.Matrix,Microsoft.Xna.Framework.Matrix)">
            <summary>
            Compares whether two <see cref="T:Microsoft.Xna.Framework.Matrix"/> instances are not equal without any tolerance.
            </summary>
            <param name="left">Source <see cref="T:Microsoft.Xna.Framework.Matrix"/> on the left of the not equal sign.</param>
            <param name="matrix2">Source <see cref="T:Microsoft.Xna.Framework.Matrix"/> on the right of the not equal sign.</param>
            <returns><c>true</c> if the instances are not equal; <c>false</c> otherwise.</returns>
        </member>
        <member name="M:Microsoft.Xna.Framework.Matrix.op_Multiply(Microsoft.Xna.Framework.Matrix,Microsoft.Xna.Framework.Matrix)">
            <summary>
            Multiplies two matrixes.
            </summary>
            <param name="left">Source <see cref="T:Microsoft.Xna.Framework.Matrix"/> on the left of the mul sign.</param>
            <param name="right">Source <see cref="T:Microsoft.Xna.Framework.Matrix"/> on the right of the mul sign.</param>
            <returns>Result of the matrix multiplication.</returns>
            <remarks>
            Using matrix multiplication algorithm - see http://en.wikipedia.org/wiki/Matrix_multiplication.
            </remarks>
        </member>
        <member name="M:Microsoft.Xna.Framework.Matrix.op_Multiply(Microsoft.Xna.Framework.Matrix,System.Single)">
            <summary>
            Multiplies the elements of matrix by a scalar.
            </summary>
            <param name="left">Source <see cref="T:Microsoft.Xna.Framework.Matrix"/> on the left of the mul sign.</param>
            <param name="right">Scalar value on the right of the mul sign.</param>
            <returns>Result of the matrix multiplication with a scalar.</returns>
        </member>
        <member name="M:Microsoft.Xna.Framework.Matrix.op_Subtraction(Microsoft.Xna.Framework.Matrix,Microsoft.Xna.Framework.Matrix)">
            <summary>
            Subtracts the values of one <see cref="T:Microsoft.Xna.Framework.Matrix"/> from another <see cref="T:Microsoft.Xna.Framework.Matrix"/>.
            </summary>
            <param name="left">Source <see cref="T:Microsoft.Xna.Framework.Matrix"/> on the left of the sub sign.</param>
            <param name="right">Source <see cref="T:Microsoft.Xna.Framework.Matrix"/> on the right of the sub sign.</param>
            <returns>Result of the matrix subtraction.</returns>
        </member>
        <member name="M:Microsoft.Xna.Framework.Matrix.op_UnaryNegation(Microsoft.Xna.Framework.Matrix)">
            <summary>
            Inverts values in the specified <see cref="T:Microsoft.Xna.Framework.Matrix"/>.
            </summary>
            <param name="value">Source <see cref="T:Microsoft.Xna.Framework.Matrix"/> on the right of the sub sign.</param>
            <returns>Result of the inversion.</returns>
        </member>
        <member name="M:Microsoft.Xna.Framework.Matrix.Subtract(Microsoft.Xna.Framework.Matrix,Microsoft.Xna.Framework.Matrix)">
            <summary>
            Creates a new <see cref="T:Microsoft.Xna.Framework.Matrix"/> that contains subtraction of one matrix from another.
            </summary>
            <param name="left">The first <see cref="T:Microsoft.Xna.Framework.Matrix"/>.</param>
            <param name="right">The second <see cref="T:Microsoft.Xna.Framework.Matrix"/>.</param>
            <returns>The result of the matrix subtraction.</returns>
        </member>
        <member name="M:Microsoft.Xna.Framework.Matrix.Subtract(Microsoft.Xna.Framework.Matrix@,Microsoft.Xna.Framework.Matrix@,Microsoft.Xna.Framework.Matrix@)">
            <summary>
            Creates a new <see cref="T:Microsoft.Xna.Framework.Matrix"/> that contains subtraction of one matrix from another.
            </summary>
            <param name="left">The first <see cref="T:Microsoft.Xna.Framework.Matrix"/>.</param>
            <param name="right">The second <see cref="T:Microsoft.Xna.Framework.Matrix"/>.</param>
            <param name="result">The result of the matrix subtraction as an output parameter.</param>
        </member>
        <member name="M:Microsoft.Xna.Framework.Matrix.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> representation of this <see cref="T:Microsoft.Xna.Framework.Matrix"/> in the format:
            {M11:[<see cref="F:Microsoft.Xna.Framework.Matrix.M11"/>] M12:[<see cref="F:Microsoft.Xna.Framework.Matrix.M12"/>] M13:[<see cref="F:Microsoft.Xna.Framework.Matrix.M13"/>] M14:[<see cref="F:Microsoft.Xna.Framework.Matrix.M14"/>]}
            {M21:[<see cref="F:Microsoft.Xna.Framework.Matrix.M21"/>] M12:[<see cref="F:Microsoft.Xna.Framework.Matrix.M22"/>] M13:[<see cref="F:Microsoft.Xna.Framework.Matrix.M23"/>] M14:[<see cref="F:Microsoft.Xna.Framework.Matrix.M24"/>]}
            {M31:[<see cref="F:Microsoft.Xna.Framework.Matrix.M31"/>] M32:[<see cref="F:Microsoft.Xna.Framework.Matrix.M32"/>] M33:[<see cref="F:Microsoft.Xna.Framework.Matrix.M33"/>] M34:[<see cref="F:Microsoft.Xna.Framework.Matrix.M34"/>]}
            {M41:[<see cref="F:Microsoft.Xna.Framework.Matrix.M41"/>] M42:[<see cref="F:Microsoft.Xna.Framework.Matrix.M42"/>] M43:[<see cref="F:Microsoft.Xna.Framework.Matrix.M43"/>] M44:[<see cref="F:Microsoft.Xna.Framework.Matrix.M44"/>]}
            </summary>
            <returns>A <see cref="T:System.String"/> representation of this <see cref="T:Microsoft.Xna.Framework.Matrix"/>.</returns>
        </member>
        <member name="M:Microsoft.Xna.Framework.Matrix.Transpose(Microsoft.Xna.Framework.Matrix)">
            <summary>
            Swap the matrix rows and columns.
            </summary>
            <param name="value">The matrix for transposing operation.</param>
            <returns>The new <see cref="T:Microsoft.Xna.Framework.Matrix"/> which contains the transposing result.</returns>
        </member>
        <member name="M:Microsoft.Xna.Framework.Matrix.Transpose(Microsoft.Xna.Framework.Matrix@,Microsoft.Xna.Framework.Matrix@)">
            <summary>
            Swap the matrix rows and columns.
            </summary>
            <param name="value">The matrix for transposing operation.</param>
            <param name="result">The new <see cref="T:Microsoft.Xna.Framework.Matrix"/> which contains the transposing result as an output parameter.</param>
        </member>
        <member name="M:Microsoft.Xna.Framework.Matrix.FindDeterminants(Microsoft.Xna.Framework.Matrix@,System.Single@,System.Single@,System.Single@,System.Single@,System.Single@,System.Single@,System.Single@,System.Single@,System.Single@,System.Single@,System.Single@,System.Single@,System.Single@)">
            <summary>
            Helper method for using the Laplace expansion theorem using two rows expansions to calculate major and 
            minor determinants of a 4x4 matrix. This method is used for inverting a matrix.
            </summary>
        </member>
        <member name="T:Microsoft.Xna.Framework.Plane">
            <summary>
            A plane in 3d space, represented by its normal away from the origin and its distance from the origin, D.
            </summary>
        </member>
        <member name="F:Microsoft.Xna.Framework.Plane.Normal">
            <summary>
            The normal of the <see cref="T:Microsoft.Xna.Framework.Plane"/>.
            </summary>
        </member>
        <member name="F:Microsoft.Xna.Framework.Plane.D">
            <summary>
            The distance of the <see cref="T:Microsoft.Xna.Framework.Plane"/> to the origin.
            </summary>
        </member>
        <member name="M:Microsoft.Xna.Framework.Plane.#ctor(Microsoft.Xna.Framework.Vector4)">
            <summary>
            Create a <see cref="T:Microsoft.Xna.Framework.Plane"/> with the first three components of the specified <see cref="T:Microsoft.Xna.Framework.Vector4"/>
            as the normal and the last component as the distance to the origin.
            </summary>
            <param name="value">A vector holding the normal and distance to origin.</param>
        </member>
        <member name="M:Microsoft.Xna.Framework.Plane.#ctor(Microsoft.Xna.Framework.Vector3,System.Single)">
            <summary>
            Create a <see cref="T:Microsoft.Xna.Framework.Plane"/> with the specified normal and distance to the origin.
            </summary>
            <param name="normal">The normal of the plane.</param>
            <param name="d">The distance to the origin.</param>
        </member>
        <member name="M:Microsoft.Xna.Framework.Plane.#ctor(Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Vector3)">
            <summary>
            Create the <see cref="T:Microsoft.Xna.Framework.Plane"/> that contains the three specified points.
            </summary>
            <param name="a">A point the created <see cref="T:Microsoft.Xna.Framework.Plane"/> should contain.</param>
            <param name="b">A point the created <see cref="T:Microsoft.Xna.Framework.Plane"/> should contain.</param>
            <param name="c">A point the created <see cref="T:Microsoft.Xna.Framework.Plane"/> should contain.</param>
        </member>
        <member name="M:Microsoft.Xna.Framework.Plane.#ctor(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Create a <see cref="T:Microsoft.Xna.Framework.Plane"/> with the first three values as the X, Y and Z
            components of the normal and the last value as the distance to the origin.
            </summary>
            <param name="a">The X component of the normal.</param>
            <param name="b">The Y component of the normal.</param>
            <param name="c">The Z component of the normal.</param>
            <param name="d">The distance to the origin.</param>
        </member>
        <member name="M:Microsoft.Xna.Framework.Plane.Dot(Microsoft.Xna.Framework.Vector4)">
            <summary>
            Get the dot product of a <see cref="T:Microsoft.Xna.Framework.Vector4"/> with this <see cref="T:Microsoft.Xna.Framework.Plane"/>.
            </summary>
            <param name="value">The <see cref="T:Microsoft.Xna.Framework.Vector4"/> to calculate the dot product with.</param>
            <returns>The dot product of the specified <see cref="T:Microsoft.Xna.Framework.Vector4"/> and this <see cref="T:Microsoft.Xna.Framework.Plane"/>.</returns>
        </member>
        <member name="M:Microsoft.Xna.Framework.Plane.Dot(Microsoft.Xna.Framework.Vector4@,System.Single@)">
            <summary>
            Get the dot product of a <see cref="T:Microsoft.Xna.Framework.Vector4"/> with this <see cref="T:Microsoft.Xna.Framework.Plane"/>.
            </summary>
            <param name="value">The <see cref="T:Microsoft.Xna.Framework.Vector4"/> to calculate the dot product with.</param>
            <param name="result">
            The dot product of the specified <see cref="T:Microsoft.Xna.Framework.Vector4"/> and this <see cref="T:Microsoft.Xna.Framework.Plane"/>.
            </param>
        </member>
        <member name="M:Microsoft.Xna.Framework.Plane.DotCoordinate(Microsoft.Xna.Framework.Vector3)">
            <summary>
            Get the dot product of a <see cref="T:Microsoft.Xna.Framework.Vector3"/> with
            the <see cref="F:Microsoft.Xna.Framework.Plane.Normal"/> vector of this <see cref="T:Microsoft.Xna.Framework.Plane"/>
            plus the <see cref="F:Microsoft.Xna.Framework.Plane.D"/> value of this <see cref="T:Microsoft.Xna.Framework.Plane"/>.
            </summary>
            <param name="value">The <see cref="T:Microsoft.Xna.Framework.Vector3"/> to calculate the dot product with.</param>
            <returns>
            The dot product of the specified <see cref="T:Microsoft.Xna.Framework.Vector3"/> and the normal of this <see cref="T:Microsoft.Xna.Framework.Plane"/>
            plus the <see cref="F:Microsoft.Xna.Framework.Plane.D"/> value of this <see cref="T:Microsoft.Xna.Framework.Plane"/>.
            </returns>
        </member>
        <member name="M:Microsoft.Xna.Framework.Plane.DotCoordinate(Microsoft.Xna.Framework.Vector3@,System.Single@)">
            <summary>
            Get the dot product of a <see cref="T:Microsoft.Xna.Framework.Vector3"/> with
            the <see cref="F:Microsoft.Xna.Framework.Plane.Normal"/> vector of this <see cref="T:Microsoft.Xna.Framework.Plane"/>
            plus the <see cref="F:Microsoft.Xna.Framework.Plane.D"/> value of this <see cref="T:Microsoft.Xna.Framework.Plane"/>.
            </summary>
            <param name="value">The <see cref="T:Microsoft.Xna.Framework.Vector3"/> to calculate the dot product with.</param>
            <param name="result">
            The dot product of the specified <see cref="T:Microsoft.Xna.Framework.Vector3"/> and the normal of this <see cref="T:Microsoft.Xna.Framework.Plane"/>
            plus the <see cref="F:Microsoft.Xna.Framework.Plane.D"/> value of this <see cref="T:Microsoft.Xna.Framework.Plane"/>.
            </param>
        </member>
        <member name="M:Microsoft.Xna.Framework.Plane.DotNormal(Microsoft.Xna.Framework.Vector3)">
            <summary>
            Get the dot product of a <see cref="T:Microsoft.Xna.Framework.Vector3"/> with
            the <see cref="F:Microsoft.Xna.Framework.Plane.Normal"/> vector of this <see cref="T:Microsoft.Xna.Framework.Plane"/>.
            </summary>
            <param name="value">The <see cref="T:Microsoft.Xna.Framework.Vector3"/> to calculate the dot product with.</param>
            <returns>
            The dot product of the specified <see cref="T:Microsoft.Xna.Framework.Vector3"/> and the normal of this <see cref="T:Microsoft.Xna.Framework.Plane"/>.
            </returns>
        </member>
        <member name="M:Microsoft.Xna.Framework.Plane.DotNormal(Microsoft.Xna.Framework.Vector3@,System.Single@)">
            <summary>
            Get the dot product of a <see cref="T:Microsoft.Xna.Framework.Vector3"/> with
            the <see cref="F:Microsoft.Xna.Framework.Plane.Normal"/> vector of this <see cref="T:Microsoft.Xna.Framework.Plane"/>.
            </summary>
            <param name="value">The <see cref="T:Microsoft.Xna.Framework.Vector3"/> to calculate the dot product with.</param>
            <param name="result">
            The dot product of the specified <see cref="T:Microsoft.Xna.Framework.Vector3"/> and the normal of this <see cref="T:Microsoft.Xna.Framework.Plane"/>.
            </param>
        </member>
        <member name="M:Microsoft.Xna.Framework.Plane.FromPoint(Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Vector3)">
            <summary>
            Create a <see cref="T:Microsoft.Xna.Framework.Plane"/> that contains the specified point and has the specified <see cref="F:Microsoft.Xna.Framework.Plane.Normal"/> vector.
            </summary>
            <param name="normal">The normal of the plane.</param>
            <param name="point">A point the created <see cref="T:Microsoft.Xna.Framework.Plane"/> should contain.</param>
        </member>
        <member name="M:Microsoft.Xna.Framework.Plane.Transform(Microsoft.Xna.Framework.Plane,Microsoft.Xna.Framework.Matrix)">
            <summary>
            Transforms a normalized plane by a matrix.
            </summary>
            <param name="plane">The normalized plane to transform.</param>
            <param name="matrix">The transformation matrix.</param>
            <returns>The transformed plane.</returns>
        </member>
        <member name="M:Microsoft.Xna.Framework.Plane.Transform(Microsoft.Xna.Framework.Plane@,Microsoft.Xna.Framework.Matrix@,Microsoft.Xna.Framework.Plane@)">
            <summary>
            Transforms a normalized plane by a matrix.
            </summary>
            <param name="plane">The normalized plane to transform.</param>
            <param name="matrix">The transformation matrix.</param>
            <param name="result">The transformed plane.</param>
        </member>
        <member name="M:Microsoft.Xna.Framework.Plane.Transform(Microsoft.Xna.Framework.Plane,Microsoft.Xna.Framework.Quaternion)">
            <summary>
            Transforms a normalized plane by a quaternion rotation.
            </summary>
            <param name="plane">The normalized plane to transform.</param>
            <param name="rotation">The quaternion rotation.</param>
            <returns>The transformed plane.</returns>
        </member>
        <member name="M:Microsoft.Xna.Framework.Plane.Transform(Microsoft.Xna.Framework.Plane@,Microsoft.Xna.Framework.Quaternion@,Microsoft.Xna.Framework.Plane@)">
            <summary>
            Transforms a normalized plane by a quaternion rotation.
            </summary>
            <param name="plane">The normalized plane to transform.</param>
            <param name="rotation">The quaternion rotation.</param>
            <param name="result">The transformed plane.</param>
        </member>
        <member name="M:Microsoft.Xna.Framework.Plane.Normalize">
            <summary>
            Normalize the normal vector of this plane.
            </summary>
        </member>
        <member name="M:Microsoft.Xna.Framework.Plane.Normalize(Microsoft.Xna.Framework.Plane)">
            <summary>
            Get a normalized version of the specified plane.
            </summary>
            <param name="value">The <see cref="T:Microsoft.Xna.Framework.Plane"/> to normalize.</param>
            <returns>A normalized version of the specified <see cref="T:Microsoft.Xna.Framework.Plane"/>.</returns>
        </member>
        <member name="M:Microsoft.Xna.Framework.Plane.Normalize(Microsoft.Xna.Framework.Plane@,Microsoft.Xna.Framework.Plane@)">
            <summary>
            Get a normalized version of the specified plane.
            </summary>
            <param name="value">The <see cref="T:Microsoft.Xna.Framework.Plane"/> to normalize.</param>
            <param name="result">A normalized version of the specified <see cref="T:Microsoft.Xna.Framework.Plane"/>.</param>
        </member>
        <member name="M:Microsoft.Xna.Framework.Plane.op_Inequality(Microsoft.Xna.Framework.Plane,Microsoft.Xna.Framework.Plane)">
            <summary>
            Check if two planes are not equal.
            </summary>
            <param name="left">A <see cref="T:Microsoft.Xna.Framework.Plane"/> to check for inequality.</param>
            <param name="right">A <see cref="T:Microsoft.Xna.Framework.Plane"/> to check for inequality.</param>
            <returns><code>true</code> if the two planes are not equal, <code>false</code> if they are.</returns>
        </member>
        <member name="M:Microsoft.Xna.Framework.Plane.op_Equality(Microsoft.Xna.Framework.Plane,Microsoft.Xna.Framework.Plane)">
            <summary>
            Check if two planes are equal.
            </summary>
            <param name="left">A <see cref="T:Microsoft.Xna.Framework.Plane"/> to check for equality.</param>
            <param name="right">A <see cref="T:Microsoft.Xna.Framework.Plane"/> to check for equality.</param>
            <returns><code>true</code> if the two planes are equal, <code>false</code> if they are not.</returns>
        </member>
        <member name="M:Microsoft.Xna.Framework.Plane.Equals(System.Object)">
            <summary>
            Check if this <see cref="T:Microsoft.Xna.Framework.Plane"/> is equal to another <see cref="T:Microsoft.Xna.Framework.Plane"/>.
            </summary>
            <param name="other">An <see cref="T:System.Object"/> to check for equality with this <see cref="T:Microsoft.Xna.Framework.Plane"/>.</param>
            <returns>
            <code>true</code> if the specified <see cref="T:System.Object"/> is equal to this <see cref="T:Microsoft.Xna.Framework.Plane"/>,
            <code>false</code> if it is not.
            </returns>
        </member>
        <member name="M:Microsoft.Xna.Framework.Plane.Equals(Microsoft.Xna.Framework.Plane)">
            <summary>
            Check if this <see cref="T:Microsoft.Xna.Framework.Plane"/> is equal to another <see cref="T:Microsoft.Xna.Framework.Plane"/>.
            </summary>
            <param name="other">A <see cref="T:Microsoft.Xna.Framework.Plane"/> to check for equality with this <see cref="T:Microsoft.Xna.Framework.Plane"/>.</param>
            <returns>
            <code>true</code> if the specified <see cref="T:Microsoft.Xna.Framework.Plane"/> is equal to this one,
            <code>false</code> if it is not.
            </returns>
        </member>
        <member name="M:Microsoft.Xna.Framework.Plane.GetHashCode">
            <summary>
            Get a hash code for this <see cref="T:Microsoft.Xna.Framework.Plane"/>.
            </summary>
            <returns>A hash code for this <see cref="T:Microsoft.Xna.Framework.Plane"/>.</returns>
        </member>
        <member name="M:Microsoft.Xna.Framework.Plane.Intersects(Microsoft.Xna.Framework.BoundingBox)">
            <summary>
            Check if this <see cref="T:Microsoft.Xna.Framework.Plane"/> intersects a <see cref="T:Microsoft.Xna.Framework.BoundingBox"/>.
            </summary>
            <param name="box">The <see cref="T:Microsoft.Xna.Framework.BoundingBox"/> to test for intersection.</param>
            <returns>
            The type of intersection of this <see cref="T:Microsoft.Xna.Framework.Plane"/> with the specified <see cref="T:Microsoft.Xna.Framework.BoundingBox"/>.
            </returns>
        </member>
        <member name="M:Microsoft.Xna.Framework.Plane.Intersects(Microsoft.Xna.Framework.BoundingBox@,Microsoft.Xna.Framework.PlaneIntersectionType@)">
            <summary>
            Check if this <see cref="T:Microsoft.Xna.Framework.Plane"/> intersects a <see cref="T:Microsoft.Xna.Framework.BoundingBox"/>.
            </summary>
            <param name="box">The <see cref="T:Microsoft.Xna.Framework.BoundingBox"/> to test for intersection.</param>
            <param name="result">
            The type of intersection of this <see cref="T:Microsoft.Xna.Framework.Plane"/> with the specified <see cref="T:Microsoft.Xna.Framework.BoundingBox"/>.
            </param>
        </member>
        <member name="M:Microsoft.Xna.Framework.Plane.Intersects(Microsoft.Xna.Framework.BoundingFrustum)">
            <summary>
            Check if this <see cref="T:Microsoft.Xna.Framework.Plane"/> intersects a <see cref="T:Microsoft.Xna.Framework.BoundingFrustum"/>.
            </summary>
            <param name="frustum">The <see cref="T:Microsoft.Xna.Framework.BoundingFrustum"/> to test for intersection.</param>
            <returns>
            The type of intersection of this <see cref="T:Microsoft.Xna.Framework.Plane"/> with the specified <see cref="T:Microsoft.Xna.Framework.BoundingFrustum"/>.
            </returns>
        </member>
        <member name="M:Microsoft.Xna.Framework.Plane.Intersects(Microsoft.Xna.Framework.BoundingSphere)">
            <summary>
            Check if this <see cref="T:Microsoft.Xna.Framework.Plane"/> intersects a <see cref="T:Microsoft.Xna.Framework.BoundingSphere"/>.
            </summary>
            <param name="sphere">The <see cref="T:Microsoft.Xna.Framework.BoundingSphere"/> to test for intersection.</param>
            <returns>
            The type of intersection of this <see cref="T:Microsoft.Xna.Framework.Plane"/> with the specified <see cref="T:Microsoft.Xna.Framework.BoundingSphere"/>.
            </returns>
        </member>
        <member name="M:Microsoft.Xna.Framework.Plane.Intersects(Microsoft.Xna.Framework.BoundingSphere@,Microsoft.Xna.Framework.PlaneIntersectionType@)">
            <summary>
            Check if this <see cref="T:Microsoft.Xna.Framework.Plane"/> intersects a <see cref="T:Microsoft.Xna.Framework.BoundingSphere"/>.
            </summary>
            <param name="sphere">The <see cref="T:Microsoft.Xna.Framework.BoundingSphere"/> to test for intersection.</param>
            <param name="result">
            The type of intersection of this <see cref="T:Microsoft.Xna.Framework.Plane"/> with the specified <see cref="T:Microsoft.Xna.Framework.BoundingSphere"/>.
            </param>
        </member>
        <member name="M:Microsoft.Xna.Framework.Plane.ToString">
            <summary>
            Get a <see cref="T:System.String"/> representation of this <see cref="T:Microsoft.Xna.Framework.Plane"/>.
            </summary>
            <returns>A <see cref="T:System.String"/> representation of this <see cref="T:Microsoft.Xna.Framework.Plane"/>.</returns>
        </member>
        <member name="M:Microsoft.Xna.Framework.Plane.Deconstruct(Microsoft.Xna.Framework.Vector3@,System.Single@)">
            <summary>
            Deconstruction method for <see cref="T:Microsoft.Xna.Framework.Plane"/>.
            </summary>
            <param name="normal"></param>
            <param name="d"></param>
        </member>
        <member name="T:Microsoft.Xna.Framework.PlaneIntersectionType">
            <summary>
            Defines the intersection between a <see cref="T:Microsoft.Xna.Framework.Plane"/> and a bounding volume.
            </summary>
        </member>
        <member name="F:Microsoft.Xna.Framework.PlaneIntersectionType.Front">
            <summary>
            There is no intersection, the bounding volume is in the negative half space of the plane.
            </summary>
        </member>
        <member name="F:Microsoft.Xna.Framework.PlaneIntersectionType.Back">
            <summary>
            There is no intersection, the bounding volume is in the positive half space of the plane.
            </summary>
        </member>
        <member name="F:Microsoft.Xna.Framework.PlaneIntersectionType.Intersecting">
            <summary>
            The plane is intersected.
            </summary>
        </member>
        <member name="T:Microsoft.Xna.Framework.PlayerIndex">
            <summary>
            Defines the index of player for various MonoGame components.
            </summary>
        </member>
        <member name="F:Microsoft.Xna.Framework.PlayerIndex.One">
            <summary>
            The first player index.
            </summary>
        </member>
        <member name="F:Microsoft.Xna.Framework.PlayerIndex.Two">
            <summary>
            The second player index.
            </summary>
        </member>
        <member name="F:Microsoft.Xna.Framework.PlayerIndex.Three">
            <summary>
            The third player index.
            </summary>
        </member>
        <member name="F:Microsoft.Xna.Framework.PlayerIndex.Four">
            <summary>
            The fourth player index.
            </summary>
        </member>
        <member name="T:Microsoft.Xna.Framework.Point">
            <summary>
            Describes a 2D-point.
            </summary>
        </member>
        <member name="F:Microsoft.Xna.Framework.Point.X">
            <summary>
            The x coordinate of this <see cref="T:Microsoft.Xna.Framework.Point"/>.
            </summary>
        </member>
        <member name="F:Microsoft.Xna.Framework.Point.Y">
            <summary>
            The y coordinate of this <see cref="T:Microsoft.Xna.Framework.Point"/>.
            </summary>
        </member>
        <member name="P:Microsoft.Xna.Framework.Point.Zero">
            <summary>
            Returns a <see cref="T:Microsoft.Xna.Framework.Point"/> with coordinates 0, 0.
            </summary>
        </member>
        <member name="M:Microsoft.Xna.Framework.Point.#ctor(System.Int32,System.Int32)">
            <summary>
            Constructs a point with X and Y from two values.
            </summary>
            <param name="x">The x coordinate in 2d-space.</param>
            <param name="y">The y coordinate in 2d-space.</param>
        </member>
        <member name="M:Microsoft.Xna.Framework.Point.#ctor(System.Int32)">
            <summary>
            Constructs a point with X and Y set to the same value.
            </summary>
            <param name="value">The x and y coordinates in 2d-space.</param>
        </member>
        <member name="M:Microsoft.Xna.Framework.Point.op_Addition(Microsoft.Xna.Framework.Point,Microsoft.Xna.Framework.Point)">
            <summary>
            Adds two points.
            </summary>
            <param name="left">Source <see cref="T:Microsoft.Xna.Framework.Point"/> on the left of the add sign.</param>
            <param name="right">Source <see cref="T:Microsoft.Xna.Framework.Point"/> on the right of the add sign.</param>
            <returns>Sum of the points.</returns>
        </member>
        <member name="M:Microsoft.Xna.Framework.Point.op_Subtraction(Microsoft.Xna.Framework.Point,Microsoft.Xna.Framework.Point)">
            <summary>
            Subtracts a <see cref="T:Microsoft.Xna.Framework.Point"/> from a <see cref="T:Microsoft.Xna.Framework.Point"/>.
            </summary>
            <param name="left">Source <see cref="T:Microsoft.Xna.Framework.Point"/> on the left of the sub sign.</param>
            <param name="right">Source <see cref="T:Microsoft.Xna.Framework.Point"/> on the right of the sub sign.</param>
            <returns>Result of the subtraction.</returns>
        </member>
        <member name="M:Microsoft.Xna.Framework.Point.op_Multiply(Microsoft.Xna.Framework.Point,Microsoft.Xna.Framework.Point)">
            <summary>
            Multiplies the components of two points by each other.
            </summary>
            <param name="left">Source <see cref="T:Microsoft.Xna.Framework.Point"/> on the left of the mul sign.</param>
            <param name="right">Source <see cref="T:Microsoft.Xna.Framework.Point"/> on the right of the mul sign.</param>
            <returns>Result of the multiplication.</returns>
        </member>
        <member name="M:Microsoft.Xna.Framework.Point.op_Division(Microsoft.Xna.Framework.Point,Microsoft.Xna.Framework.Point)">
            <summary>
            Divides the components of a <see cref="T:Microsoft.Xna.Framework.Point"/> by the components of another <see cref="T:Microsoft.Xna.Framework.Point"/>.
            </summary>
            <param name="left">Source <see cref="T:Microsoft.Xna.Framework.Point"/> on the left of the div sign.</param>
            <param name="right">Divisor <see cref="T:Microsoft.Xna.Framework.Point"/> on the right of the div sign.</param>
            <returns>The result of dividing the points.</returns>
        </member>
        <member name="M:Microsoft.Xna.Framework.Point.op_Equality(Microsoft.Xna.Framework.Point,Microsoft.Xna.Framework.Point)">
            <summary>
            Compares whether two <see cref="T:Microsoft.Xna.Framework.Point"/> instances are equal.
            </summary>
            <param name="left"><see cref="T:Microsoft.Xna.Framework.Point"/> instance on the left of the equal sign.</param>
            <param name="right"><see cref="T:Microsoft.Xna.Framework.Point"/> instance on the right of the equal sign.</param>
            <returns><c>true</c> if the instances are equal; <c>false</c> otherwise.</returns>
        </member>
        <member name="M:Microsoft.Xna.Framework.Point.op_Inequality(Microsoft.Xna.Framework.Point,Microsoft.Xna.Framework.Point)">
            <summary>
            Compares whether two <see cref="T:Microsoft.Xna.Framework.Point"/> instances are not equal.
            </summary>
            <param name="left"><see cref="T:Microsoft.Xna.Framework.Point"/> instance on the left of the not equal sign.</param>
            <param name="right"><see cref="T:Microsoft.Xna.Framework.Point"/> instance on the right of the not equal sign.</param>
            <returns><c>true</c> if the instances are not equal; <c>false</c> otherwise.</returns>	
        </member>
        <member name="M:Microsoft.Xna.Framework.Point.Equals(System.Object)">
            <summary>
            Compares whether current instance is equal to specified <see cref="T:System.Object"/>.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> to compare.</param>
            <returns><c>true</c> if the instances are equal; <c>false</c> otherwise.</returns>
        </member>
        <member name="M:Microsoft.Xna.Framework.Point.Equals(Microsoft.Xna.Framework.Point)">
            <summary>
            Compares whether current instance is equal to specified <see cref="T:Microsoft.Xna.Framework.Point"/>.
            </summary>
            <param name="other">The <see cref="T:Microsoft.Xna.Framework.Point"/> to compare.</param>
            <returns><c>true</c> if the instances are equal; <c>false</c> otherwise.</returns>
        </member>
        <member name="M:Microsoft.Xna.Framework.Point.GetHashCode">
            <summary>
            Gets the hash code of this <see cref="T:Microsoft.Xna.Framework.Point"/>.
            </summary>
            <returns>Hash code of this <see cref="T:Microsoft.Xna.Framework.Point"/>.</returns>
        </member>
        <member name="M:Microsoft.Xna.Framework.Point.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> representation of this <see cref="T:Microsoft.Xna.Framework.Point"/> in the format:
            {X:[<see cref="F:Microsoft.Xna.Framework.Point.X"/>] Y:[<see cref="F:Microsoft.Xna.Framework.Point.Y"/>]}
            </summary>
            <returns><see cref="T:System.String"/> representation of this <see cref="T:Microsoft.Xna.Framework.Point"/>.</returns>
        </member>
        <member name="M:Microsoft.Xna.Framework.Point.ToVector2">
            <summary>
            Gets a <see cref="T:Microsoft.Xna.Framework.Vector2"/> representation for this object.
            </summary>
            <returns>A <see cref="T:Microsoft.Xna.Framework.Vector2"/> representation for this object.</returns>
        </member>
        <member name="M:Microsoft.Xna.Framework.Point.Deconstruct(System.Int32@,System.Int32@)">
            <summary>
            Deconstruction method for <see cref="T:Microsoft.Xna.Framework.Point"/>.
            </summary>
            <param name="x"></param>
            <param name="y"></param>
        </member>
        <member name="T:Microsoft.Xna.Framework.Quaternion">
            <summary>
            An efficient mathematical representation for three dimensional rotations.
            </summary>
        </member>
        <member name="F:Microsoft.Xna.Framework.Quaternion.X">
            <summary>
            The x coordinate of this <see cref="T:Microsoft.Xna.Framework.Quaternion"/>.
            </summary>
        </member>
        <member name="F:Microsoft.Xna.Framework.Quaternion.Y">
            <summary>
            The y coordinate of this <see cref="T:Microsoft.Xna.Framework.Quaternion"/>.
            </summary>
        </member>
        <member name="F:Microsoft.Xna.Framework.Quaternion.Z">
            <summary>
            The z coordinate of this <see cref="T:Microsoft.Xna.Framework.Quaternion"/>.
            </summary>
        </member>
        <member name="F:Microsoft.Xna.Framework.Quaternion.W">
            <summary>
            The rotation component of this <see cref="T:Microsoft.Xna.Framework.Quaternion"/>.
            </summary>
        </member>
        <member name="M:Microsoft.Xna.Framework.Quaternion.#ctor(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Constructs a quaternion with X, Y, Z and W from four values.
            </summary>
            <param name="x">The x coordinate in 3d-space.</param>
            <param name="y">The y coordinate in 3d-space.</param>
            <param name="z">The z coordinate in 3d-space.</param>
            <param name="w">The rotation component.</param>
        </member>
        <member name="M:Microsoft.Xna.Framework.Quaternion.#ctor(Microsoft.Xna.Framework.Vector3,System.Single)">
            <summary>
            Constructs a quaternion with X, Y, Z from <see cref="T:Microsoft.Xna.Framework.Vector3"/> and rotation component from a scalar.
            </summary>
            <param name="value">The x, y, z coordinates in 3d-space.</param>
            <param name="w">The rotation component.</param>
        </member>
        <member name="M:Microsoft.Xna.Framework.Quaternion.#ctor(Microsoft.Xna.Framework.Vector4)">
            <summary>
            Constructs a quaternion from <see cref="T:Microsoft.Xna.Framework.Vector4"/>.
            </summary>
            <param name="value">The x, y, z coordinates in 3d-space and the rotation component.</param>
        </member>
        <member name="P:Microsoft.Xna.Framework.Quaternion.Identity">
            <summary>
            Returns a quaternion representing no rotation.
            </summary>
        </member>
        <member name="M:Microsoft.Xna.Framework.Quaternion.Add(Microsoft.Xna.Framework.Quaternion,Microsoft.Xna.Framework.Quaternion)">
            <summary>
            Creates a new <see cref="T:Microsoft.Xna.Framework.Quaternion"/> that contains the sum of two quaternions.
            </summary>
            <param name="left">Source <see cref="T:Microsoft.Xna.Framework.Quaternion"/>.</param>
            <param name="right">Source <see cref="T:Microsoft.Xna.Framework.Quaternion"/>.</param>
            <returns>The result of the quaternion addition.</returns>
        </member>
        <member name="M:Microsoft.Xna.Framework.Quaternion.Add(Microsoft.Xna.Framework.Quaternion@,Microsoft.Xna.Framework.Quaternion@,Microsoft.Xna.Framework.Quaternion@)">
            <summary>
            Creates a new <see cref="T:Microsoft.Xna.Framework.Quaternion"/> that contains the sum of two quaternions.
            </summary>
            <param name="left">Source <see cref="T:Microsoft.Xna.Framework.Quaternion"/>.</param>
            <param name="right">Source <see cref="T:Microsoft.Xna.Framework.Quaternion"/>.</param>
            <param name="result">The result of the quaternion addition as an output parameter.</param>
        </member>
        <member name="M:Microsoft.Xna.Framework.Quaternion.Concatenate(Microsoft.Xna.Framework.Quaternion,Microsoft.Xna.Framework.Quaternion)">
            <summary>
            Creates a new <see cref="T:Microsoft.Xna.Framework.Quaternion"/> that contains concatenation between two quaternion.
            </summary>
            <param name="value1">The first <see cref="T:Microsoft.Xna.Framework.Quaternion"/> to concatenate.</param>
            <param name="value2">The second <see cref="T:Microsoft.Xna.Framework.Quaternion"/> to concatenate.</param>
            <returns>The result of rotation of <paramref name="value1"/> followed by <paramref name="value2"/> rotation.</returns>
        </member>
        <member name="M:Microsoft.Xna.Framework.Quaternion.Concatenate(Microsoft.Xna.Framework.Quaternion@,Microsoft.Xna.Framework.Quaternion@,Microsoft.Xna.Framework.Quaternion@)">
            <summary>
            Creates a new <see cref="T:Microsoft.Xna.Framework.Quaternion"/> that contains concatenation between two quaternion.
            </summary>
            <param name="value1">The first <see cref="T:Microsoft.Xna.Framework.Quaternion"/> to concatenate.</param>
            <param name="value2">The second <see cref="T:Microsoft.Xna.Framework.Quaternion"/> to concatenate.</param>
            <param name="result">The result of rotation of <paramref name="value1"/> followed by <paramref name="value2"/> rotation as an output parameter.</param>
        </member>
        <member name="M:Microsoft.Xna.Framework.Quaternion.Conjugate">
            <summary>
            Transforms this quaternion into its conjugated version.
            </summary>
        </member>
        <member name="M:Microsoft.Xna.Framework.Quaternion.Conjugate(Microsoft.Xna.Framework.Quaternion)">
            <summary>
            Creates a new <see cref="T:Microsoft.Xna.Framework.Quaternion"/> that contains conjugated version of the specified quaternion.
            </summary>
            <param name="value">The quaternion which values will be used to create the conjugated version.</param>
            <returns>The conjugate version of the specified quaternion.</returns>
        </member>
        <member name="M:Microsoft.Xna.Framework.Quaternion.Conjugate(Microsoft.Xna.Framework.Quaternion@,Microsoft.Xna.Framework.Quaternion@)">
            <summary>
            Creates a new <see cref="T:Microsoft.Xna.Framework.Quaternion"/> that contains conjugated version of the specified quaternion.
            </summary>
            <param name="value">The quaternion which values will be used to create the conjugated version.</param>
            <param name="result">The conjugated version of the specified quaternion as an output parameter.</param>
        </member>
        <member name="M:Microsoft.Xna.Framework.Quaternion.CreateFromAxisAngle(Microsoft.Xna.Framework.Vector3,System.Single)">
            <summary>
            Creates a new <see cref="T:Microsoft.Xna.Framework.Quaternion"/> from the specified axis and angle.
            </summary>
            <param name="axis">The axis of rotation.</param>
            <param name="angle">The angle in radians.</param>
            <returns>The new quaternion builded from axis and angle.</returns>
        </member>
        <member name="M:Microsoft.Xna.Framework.Quaternion.CreateFromAxisAngle(Microsoft.Xna.Framework.Vector3@,System.Single,Microsoft.Xna.Framework.Quaternion@)">
            <summary>
            Creates a new <see cref="T:Microsoft.Xna.Framework.Quaternion"/> from the specified axis and angle.
            </summary>
            <param name="axis">The axis of rotation.</param>
            <param name="angle">The angle in radians.</param>
            <param name="result">The new quaternion builded from axis and angle as an output parameter.</param>
        </member>
        <member name="M:Microsoft.Xna.Framework.Quaternion.CreateFromRotationMatrix(Microsoft.Xna.Framework.Matrix)">
            <summary>
            Creates a new <see cref="T:Microsoft.Xna.Framework.Quaternion"/> from the specified <see cref="T:Microsoft.Xna.Framework.Matrix"/>.
            </summary>
            <param name="matrix">The rotation matrix.</param>
            <returns>A quaternion composed from the rotation part of the matrix.</returns>
        </member>
        <member name="M:Microsoft.Xna.Framework.Quaternion.CreateFromRotationMatrix(Microsoft.Xna.Framework.Matrix@,Microsoft.Xna.Framework.Quaternion@)">
            <summary>
            Creates a new <see cref="T:Microsoft.Xna.Framework.Quaternion"/> from the specified <see cref="T:Microsoft.Xna.Framework.Matrix"/>.
            </summary>
            <param name="matrix">The rotation matrix.</param>
            <param name="result">A quaternion composed from the rotation part of the matrix as an output parameter.</param>
        </member>
        <member name="M:Microsoft.Xna.Framework.Quaternion.CreateFromYawPitchRoll(System.Single,System.Single,System.Single)">
            <summary>
            Creates a new <see cref="T:Microsoft.Xna.Framework.Quaternion"/> from the specified yaw, pitch and roll angles.
            </summary>
            <param name="yaw">Yaw around the y axis in radians.</param>
            <param name="pitch">Pitch around the x axis in radians.</param>
            <param name="roll">Roll around the z axis in radians.</param>
            <returns>A new quaternion from the concatenated yaw, pitch, and roll angles.</returns>
        </member>
        <member name="M:Microsoft.Xna.Framework.Quaternion.CreateFromYawPitchRoll(System.Single,System.Single,System.Single,Microsoft.Xna.Framework.Quaternion@)">
            <summary>
            Creates a new <see cref="T:Microsoft.Xna.Framework.Quaternion"/> from the specified yaw, pitch and roll angles.
            </summary>
            <param name="yaw">Yaw around the y axis in radians.</param>
            <param name="pitch">Pitch around the x axis in radians.</param>
            <param name="roll">Roll around the z axis in radians.</param>
            <param name="result">A new quaternion from the concatenated yaw, pitch, and roll angles as an output parameter.</param>
        </member>
        <member name="M:Microsoft.Xna.Framework.Quaternion.Divide(Microsoft.Xna.Framework.Quaternion,Microsoft.Xna.Framework.Quaternion)">
            <summary>
            Divides a <see cref="T:Microsoft.Xna.Framework.Quaternion"/> by the other <see cref="T:Microsoft.Xna.Framework.Quaternion"/>.
            </summary>
            <param name="left">Source <see cref="T:Microsoft.Xna.Framework.Quaternion"/>.</param>
            <param name="right">Divisor <see cref="T:Microsoft.Xna.Framework.Quaternion"/>.</param>
            <returns>The result of dividing the quaternions.</returns>
        </member>
        <member name="M:Microsoft.Xna.Framework.Quaternion.Divide(Microsoft.Xna.Framework.Quaternion@,Microsoft.Xna.Framework.Quaternion@,Microsoft.Xna.Framework.Quaternion@)">
            <summary>
            Divides a <see cref="T:Microsoft.Xna.Framework.Quaternion"/> by the other <see cref="T:Microsoft.Xna.Framework.Quaternion"/>.
            </summary>
            <param name="left">Source <see cref="T:Microsoft.Xna.Framework.Quaternion"/>.</param>
            <param name="right">Divisor <see cref="T:Microsoft.Xna.Framework.Quaternion"/>.</param>
            <param name="result">The result of dividing the quaternions as an output parameter.</param>
        </member>
        <member name="M:Microsoft.Xna.Framework.Quaternion.Dot(Microsoft.Xna.Framework.Quaternion,Microsoft.Xna.Framework.Quaternion)">
            <summary>
            Returns a dot product of two quaternions.
            </summary>
            <param name="left">The first quaternion.</param>
            <param name="right">The second quaternion.</param>
            <returns>The dot product of two quaternions.</returns>
        </member>
        <member name="M:Microsoft.Xna.Framework.Quaternion.Dot(Microsoft.Xna.Framework.Quaternion@,Microsoft.Xna.Framework.Quaternion@,System.Single@)">
            <summary>
            Returns a dot product of two quaternions.
            </summary>
            <param name="left">The first quaternion.</param>
            <param name="right">The second quaternion.</param>
            <param name="result">The dot product of two quaternions as an output parameter.</param>
        </member>
        <member name="M:Microsoft.Xna.Framework.Quaternion.Equals(System.Object)">
            <summary>
            Compares whether current instance is equal to specified <see cref="T:System.Object"/>.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> to compare.</param>
            <returns><c>true</c> if the instances are equal; <c>false</c> otherwise.</returns>
        </member>
        <member name="M:Microsoft.Xna.Framework.Quaternion.Equals(Microsoft.Xna.Framework.Quaternion)">
            <summary>
            Compares whether current instance is equal to specified <see cref="T:Microsoft.Xna.Framework.Quaternion"/>.
            </summary>
            <param name="other">The <see cref="T:Microsoft.Xna.Framework.Quaternion"/> to compare.</param>
            <returns><c>true</c> if the instances are equal; <c>false</c> otherwise.</returns>
        </member>
        <member name="M:Microsoft.Xna.Framework.Quaternion.GetHashCode">
            <summary>
            Gets the hash code of this <see cref="T:Microsoft.Xna.Framework.Quaternion"/>.
            </summary>
            <returns>Hash code of this <see cref="T:Microsoft.Xna.Framework.Quaternion"/>.</returns>
        </member>
        <member name="M:Microsoft.Xna.Framework.Quaternion.Inverse(Microsoft.Xna.Framework.Quaternion)">
            <summary>
            Returns the inverse quaternion which represents the opposite rotation.
            </summary>
            <param name="value">Source <see cref="T:Microsoft.Xna.Framework.Quaternion"/>.</param>
            <returns>The inverse quaternion.</returns>
        </member>
        <member name="M:Microsoft.Xna.Framework.Quaternion.Inverse(Microsoft.Xna.Framework.Quaternion@,Microsoft.Xna.Framework.Quaternion@)">
            <summary>
            Returns the inverse quaternion which represents the opposite rotation.
            </summary>
            <param name="value">Source <see cref="T:Microsoft.Xna.Framework.Quaternion"/>.</param>
            <param name="result">The inverse quaternion as an output parameter.</param>
        </member>
        <member name="M:Microsoft.Xna.Framework.Quaternion.Length">
            <summary>
            Returns the magnitude of the quaternion components.
            </summary>
            <returns>The magnitude of the quaternion components.</returns>
        </member>
        <member name="M:Microsoft.Xna.Framework.Quaternion.LengthSquared">
            <summary>
            Returns the squared magnitude of the quaternion components.
            </summary>
            <returns>The squared magnitude of the quaternion components.</returns>
        </member>
        <member name="M:Microsoft.Xna.Framework.Quaternion.Lerp(Microsoft.Xna.Framework.Quaternion,Microsoft.Xna.Framework.Quaternion,System.Single)">
            <summary>
            Performs a linear blend between two quaternions.
            </summary>
            <param name="start">Source <see cref="T:Microsoft.Xna.Framework.Quaternion"/>.</param>
            <param name="end">Source <see cref="T:Microsoft.Xna.Framework.Quaternion"/>.</param>
            <param name="amount">The blend amount where 0 returns <paramref name="start"/> and 1 <paramref name="end"/>.</param>
            <returns>The result of linear blending between two quaternions.</returns>
        </member>
        <member name="M:Microsoft.Xna.Framework.Quaternion.Lerp(Microsoft.Xna.Framework.Quaternion@,Microsoft.Xna.Framework.Quaternion@,System.Single,Microsoft.Xna.Framework.Quaternion@)">
            <summary>
            Performs a linear blend between two quaternions.
            </summary>
            <param name="start">Source <see cref="T:Microsoft.Xna.Framework.Quaternion"/>.</param>
            <param name="end">Source <see cref="T:Microsoft.Xna.Framework.Quaternion"/>.</param>
            <param name="amount">The blend amount where 0 returns <paramref name="start"/> and 1 <paramref name="end"/>.</param>
            <param name="result">The result of linear blending between two quaternions as an output parameter.</param>
        </member>
        <member name="M:Microsoft.Xna.Framework.Quaternion.Slerp(Microsoft.Xna.Framework.Quaternion,Microsoft.Xna.Framework.Quaternion,System.Single)">
            <summary>
            Performs a spherical linear blend between two quaternions.
            </summary>
            <param name="start">Source <see cref="T:Microsoft.Xna.Framework.Quaternion"/>.</param>
            <param name="end">Source <see cref="T:Microsoft.Xna.Framework.Quaternion"/>.</param>
            <param name="amount">The blend amount where 0 returns <paramref name="start"/> and 1 <paramref name="end"/>.</param>
            <returns>The result of spherical linear blending between two quaternions.</returns>
        </member>
        <member name="M:Microsoft.Xna.Framework.Quaternion.Slerp(Microsoft.Xna.Framework.Quaternion@,Microsoft.Xna.Framework.Quaternion@,System.Single,Microsoft.Xna.Framework.Quaternion@)">
            <summary>
            Performs a spherical linear blend between two quaternions.
            </summary>
            <param name="start">Source <see cref="T:Microsoft.Xna.Framework.Quaternion"/>.</param>
            <param name="end">Source <see cref="T:Microsoft.Xna.Framework.Quaternion"/>.</param>
            <param name="amount">The blend amount where 0 returns <paramref name="start"/> and 1 <paramref name="end"/>.</param>
            <param name="result">The result of spherical linear blending between two quaternions as an output parameter.</param>
        </member>
        <member name="M:Microsoft.Xna.Framework.Quaternion.Subtract(Microsoft.Xna.Framework.Quaternion,Microsoft.Xna.Framework.Quaternion)">
            <summary>
            Creates a new <see cref="T:Microsoft.Xna.Framework.Quaternion"/> that contains subtraction of one <see cref="T:Microsoft.Xna.Framework.Quaternion"/> from another.
            </summary>
            <param name="left">Source <see cref="T:Microsoft.Xna.Framework.Quaternion"/>.</param>
            <param name="right">Source <see cref="T:Microsoft.Xna.Framework.Quaternion"/>.</param>
            <returns>The result of the quaternion subtraction.</returns>
        </member>
        <member name="M:Microsoft.Xna.Framework.Quaternion.Subtract(Microsoft.Xna.Framework.Quaternion@,Microsoft.Xna.Framework.Quaternion@,Microsoft.Xna.Framework.Quaternion@)">
            <summary>
            Creates a new <see cref="T:Microsoft.Xna.Framework.Quaternion"/> that contains subtraction of one <see cref="T:Microsoft.Xna.Framework.Quaternion"/> from another.
            </summary>
            <param name="left">Source <see cref="T:Microsoft.Xna.Framework.Quaternion"/>.</param>
            <param name="right">Source <see cref="T:Microsoft.Xna.Framework.Quaternion"/>.</param>
            <param name="result">The result of the quaternion subtraction as an output parameter.</param>
        </member>
        <member name="M:Microsoft.Xna.Framework.Quaternion.Multiply(Microsoft.Xna.Framework.Quaternion,Microsoft.Xna.Framework.Quaternion)">
            <summary>
            Creates a new <see cref="T:Microsoft.Xna.Framework.Quaternion"/> that contains a multiplication of two quaternions.
            </summary>
            <param name="left">Source <see cref="T:Microsoft.Xna.Framework.Quaternion"/>.</param>
            <param name="right">Source <see cref="T:Microsoft.Xna.Framework.Quaternion"/>.</param>
            <returns>The result of the quaternion multiplication.</returns>
        </member>
        <member name="M:Microsoft.Xna.Framework.Quaternion.Multiply(Microsoft.Xna.Framework.Quaternion,System.Single)">
            <summary>
            Creates a new <see cref="T:Microsoft.Xna.Framework.Quaternion"/> that contains a multiplication of <see cref="T:Microsoft.Xna.Framework.Quaternion"/> and a scalar.
            </summary>
            <param name="left">Source <see cref="T:Microsoft.Xna.Framework.Quaternion"/>.</param>
            <param name="right">Scalar value.</param>
            <returns>The result of the quaternion multiplication with a scalar.</returns>
        </member>
        <member name="M:Microsoft.Xna.Framework.Quaternion.Multiply(Microsoft.Xna.Framework.Quaternion@,System.Single,Microsoft.Xna.Framework.Quaternion@)">
            <summary>
            Creates a new <see cref="T:Microsoft.Xna.Framework.Quaternion"/> that contains a multiplication of <see cref="T:Microsoft.Xna.Framework.Quaternion"/> and a scalar.
            </summary>
            <param name="left">Source <see cref="T:Microsoft.Xna.Framework.Quaternion"/>.</param>
            <param name="right">Scalar value.</param>
            <param name="result">The result of the quaternion multiplication with a scalar as an output parameter.</param>
        </member>
        <member name="M:Microsoft.Xna.Framework.Quaternion.Multiply(Microsoft.Xna.Framework.Quaternion@,Microsoft.Xna.Framework.Quaternion@,Microsoft.Xna.Framework.Quaternion@)">
            <summary>
            Creates a new <see cref="T:Microsoft.Xna.Framework.Quaternion"/> that contains a multiplication of two quaternions.
            </summary>
            <param name="left">Source <see cref="T:Microsoft.Xna.Framework.Quaternion"/>.</param>
            <param name="right">Source <see cref="T:Microsoft.Xna.Framework.Quaternion"/>.</param>
            <param name="result">The result of the quaternion multiplication as an output parameter.</param>
        </member>
        <member name="M:Microsoft.Xna.Framework.Quaternion.Negate(Microsoft.Xna.Framework.Quaternion)">
            <summary>
            Flips the sign of the all the quaternion components.
            </summary>
            <param name="value">Source <see cref="T:Microsoft.Xna.Framework.Quaternion"/>.</param>
            <returns>The result of the quaternion negation.</returns>
        </member>
        <member name="M:Microsoft.Xna.Framework.Quaternion.Negate(Microsoft.Xna.Framework.Quaternion@,Microsoft.Xna.Framework.Quaternion@)">
            <summary>
            Flips the sign of the all the quaternion components.
            </summary>
            <param name="value">Source <see cref="T:Microsoft.Xna.Framework.Quaternion"/>.</param>
            <param name="result">The result of the quaternion negation as an output parameter.</param>
        </member>
        <member name="M:Microsoft.Xna.Framework.Quaternion.Normalize">
            <summary>
            Scales the quaternion magnitude to unit length.
            </summary>
        </member>
        <member name="M:Microsoft.Xna.Framework.Quaternion.Normalize(Microsoft.Xna.Framework.Quaternion)">
            <summary>
            Scales the quaternion magnitude to unit length.
            </summary>
            <param name="value">Source <see cref="T:Microsoft.Xna.Framework.Quaternion"/>.</param>
            <returns>The unit length quaternion.</returns>
        </member>
        <member name="M:Microsoft.Xna.Framework.Quaternion.Normalize(Microsoft.Xna.Framework.Quaternion@,Microsoft.Xna.Framework.Quaternion@)">
            <summary>
            Scales the quaternion magnitude to unit length.
            </summary>
            <param name="value">Source <see cref="T:Microsoft.Xna.Framework.Quaternion"/>.</param>
            <param name="result">The unit length quaternion an output parameter.</param>
        </member>
        <member name="M:Microsoft.Xna.Framework.Quaternion.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> representation of this <see cref="T:Microsoft.Xna.Framework.Quaternion"/> in the format:
            {X:[<see cref="F:Microsoft.Xna.Framework.Quaternion.X"/>] Y:[<see cref="F:Microsoft.Xna.Framework.Quaternion.Y"/>] Z:[<see cref="F:Microsoft.Xna.Framework.Quaternion.Z"/>] W:[<see cref="F:Microsoft.Xna.Framework.Quaternion.W"/>]}
            </summary>
            <returns>A <see cref="T:System.String"/> representation of this <see cref="T:Microsoft.Xna.Framework.Quaternion"/>.</returns>
        </member>
        <member name="M:Microsoft.Xna.Framework.Quaternion.ToVector4">
            <summary>
            Gets a <see cref="T:Microsoft.Xna.Framework.Vector4"/> representation for this object.
            </summary>
            <returns>A <see cref="T:Microsoft.Xna.Framework.Vector4"/> representation for this object.</returns>
        </member>
        <member name="M:Microsoft.Xna.Framework.Quaternion.op_Addition(Microsoft.Xna.Framework.Quaternion,Microsoft.Xna.Framework.Quaternion)">
            <summary>
            Adds two quaternions.
            </summary>
            <param name="left">Source <see cref="T:Microsoft.Xna.Framework.Quaternion"/> on the left of the add sign.</param>
            <param name="right">Source <see cref="T:Microsoft.Xna.Framework.Quaternion"/> on the right of the add sign.</param>
            <returns>Sum of the vectors.</returns>
        </member>
        <member name="M:Microsoft.Xna.Framework.Quaternion.op_Division(Microsoft.Xna.Framework.Quaternion,Microsoft.Xna.Framework.Quaternion)">
            <summary>
            Divides a <see cref="T:Microsoft.Xna.Framework.Quaternion"/> by the other <see cref="T:Microsoft.Xna.Framework.Quaternion"/>.
            </summary>
            <param name="left">Source <see cref="T:Microsoft.Xna.Framework.Quaternion"/> on the left of the div sign.</param>
            <param name="right">Divisor <see cref="T:Microsoft.Xna.Framework.Quaternion"/> on the right of the div sign.</param>
            <returns>The result of dividing the quaternions.</returns>
        </member>
        <member name="M:Microsoft.Xna.Framework.Quaternion.op_Equality(Microsoft.Xna.Framework.Quaternion,Microsoft.Xna.Framework.Quaternion)">
            <summary>
            Compares whether two <see cref="T:Microsoft.Xna.Framework.Quaternion"/> instances are equal.
            </summary>
            <param name="left"><see cref="T:Microsoft.Xna.Framework.Quaternion"/> instance on the left of the equal sign.</param>
            <param name="right"><see cref="T:Microsoft.Xna.Framework.Quaternion"/> instance on the right of the equal sign.</param>
            <returns><c>true</c> if the instances are equal; <c>false</c> otherwise.</returns>
        </member>
        <member name="M:Microsoft.Xna.Framework.Quaternion.op_Inequality(Microsoft.Xna.Framework.Quaternion,Microsoft.Xna.Framework.Quaternion)">
            <summary>
            Compares whether two <see cref="T:Microsoft.Xna.Framework.Quaternion"/> instances are not equal.
            </summary>
            <param name="left"><see cref="T:Microsoft.Xna.Framework.Quaternion"/> instance on the left of the not equal sign.</param>
            <param name="right"><see cref="T:Microsoft.Xna.Framework.Quaternion"/> instance on the right of the not equal sign.</param>
            <returns><c>true</c> if the instances are not equal; <c>false</c> otherwise.</returns>
        </member>
        <member name="M:Microsoft.Xna.Framework.Quaternion.op_Multiply(Microsoft.Xna.Framework.Quaternion,Microsoft.Xna.Framework.Quaternion)">
            <summary>
            Multiplies two quaternions.
            </summary>
            <param name="left">Source <see cref="T:Microsoft.Xna.Framework.Quaternion"/> on the left of the mul sign.</param>
            <param name="right">Source <see cref="T:Microsoft.Xna.Framework.Quaternion"/> on the right of the mul sign.</param>
            <returns>Result of the quaternions multiplication.</returns>
        </member>
        <member name="M:Microsoft.Xna.Framework.Quaternion.op_Multiply(Microsoft.Xna.Framework.Quaternion,System.Single)">
            <summary>
            Multiplies the components of quaternion by a scalar.
            </summary>
            <param name="left">Source <see cref="T:Microsoft.Xna.Framework.Vector3"/> on the left of the mul sign.</param>
            <param name="right">Scalar value on the right of the mul sign.</param>
            <returns>Result of the quaternion multiplication with a scalar.</returns>
        </member>
        <member name="M:Microsoft.Xna.Framework.Quaternion.op_Subtraction(Microsoft.Xna.Framework.Quaternion,Microsoft.Xna.Framework.Quaternion)">
            <summary>
            Subtracts a <see cref="T:Microsoft.Xna.Framework.Quaternion"/> from a <see cref="T:Microsoft.Xna.Framework.Quaternion"/>.
            </summary>
            <param name="left">Source <see cref="T:Microsoft.Xna.Framework.Vector3"/> on the left of the sub sign.</param>
            <param name="right">Source <see cref="T:Microsoft.Xna.Framework.Vector3"/> on the right of the sub sign.</param>
            <returns>Result of the quaternion subtraction.</returns>
        </member>
        <member name="M:Microsoft.Xna.Framework.Quaternion.op_UnaryNegation(Microsoft.Xna.Framework.Quaternion)">
            <summary>
            Flips the sign of the all the quaternion components.
            </summary>
            <param name="value">Source <see cref="T:Microsoft.Xna.Framework.Quaternion"/> on the right of the sub sign.</param>
            <returns>The result of the quaternion negation.</returns>
        </member>
        <member name="T:Microsoft.Xna.Framework.Ray">
            <summary>
            Represents a ray with an origin and a direction in 3D space.
            </summary>
        </member>
        <member name="F:Microsoft.Xna.Framework.Ray.Direction">
            <summary>
            The direction of this <see cref="T:Microsoft.Xna.Framework.Ray"/>.
            </summary>
        </member>
        <member name="F:Microsoft.Xna.Framework.Ray.Position">
            <summary>
            The origin of this <see cref="T:Microsoft.Xna.Framework.Ray"/>.
            </summary>
        </member>
        <member name="M:Microsoft.Xna.Framework.Ray.#ctor(Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Vector3)">
            <summary>
            Create a <see cref="T:Microsoft.Xna.Framework.Ray"/>.
            </summary>
            <param name="position">The origin of the <see cref="T:Microsoft.Xna.Framework.Ray"/>.</param>
            <param name="direction">The direction of the <see cref="T:Microsoft.Xna.Framework.Ray"/>.</param>
        </member>
        <member name="M:Microsoft.Xna.Framework.Ray.Equals(System.Object)">
            <summary>
            Check if the specified <see cref="T:System.Object"/> is equal to this <see cref="T:Microsoft.Xna.Framework.Ray"/>.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> to test for equality with this <see cref="T:Microsoft.Xna.Framework.Ray"/>.</param>
            <returns>
            <code>true</code> if the specified <see cref="T:System.Object"/> is equal to this <see cref="T:Microsoft.Xna.Framework.Ray"/>,
            <code>false</code> if it is not.
            </returns>
        </member>
        <member name="M:Microsoft.Xna.Framework.Ray.Equals(Microsoft.Xna.Framework.Ray)">
            <summary>
            Check if the specified <see cref="T:Microsoft.Xna.Framework.Ray"/> is equal to this <see cref="T:Microsoft.Xna.Framework.Ray"/>.
            </summary>
            <param name="other">The <see cref="T:Microsoft.Xna.Framework.Ray"/> to test for equality with this <see cref="T:Microsoft.Xna.Framework.Ray"/>.</param>
            <returns>
            <code>true</code> if the specified <see cref="T:Microsoft.Xna.Framework.Ray"/> is equal to this <see cref="T:Microsoft.Xna.Framework.Ray"/>,
            <code>false</code> if it is not.
            </returns>
        </member>
        <member name="M:Microsoft.Xna.Framework.Ray.GetHashCode">
            <summary>
            Get a hash code for this <see cref="T:Microsoft.Xna.Framework.Ray"/>.
            </summary>
            <returns>A hash code for this <see cref="T:Microsoft.Xna.Framework.Ray"/>.</returns>
        </member>
        <member name="M:Microsoft.Xna.Framework.Ray.Intersects(Microsoft.Xna.Framework.BoundingBox)">
            <summary>
            Check if this <see cref="T:Microsoft.Xna.Framework.Ray"/> intersects the specified <see cref="T:Microsoft.Xna.Framework.BoundingBox"/>.
            </summary>
            <param name="box">The <see cref="T:Microsoft.Xna.Framework.BoundingBox"/> to test for intersection.</param>
            <returns>
            The distance along the ray of the intersection or <code>null</code> if this
            <see cref="T:Microsoft.Xna.Framework.Ray"/> does not intersect the <see cref="T:Microsoft.Xna.Framework.BoundingBox"/>.
            </returns>
        </member>
        <member name="M:Microsoft.Xna.Framework.Ray.Intersects(Microsoft.Xna.Framework.BoundingBox@,System.Nullable{System.Single}@)">
            <summary>
            Check if this <see cref="T:Microsoft.Xna.Framework.Ray"/> intersects the specified <see cref="T:Microsoft.Xna.Framework.BoundingBox"/>.
            </summary>
            <param name="box">The <see cref="T:Microsoft.Xna.Framework.BoundingBox"/> to test for intersection.</param>
            <param name="result">
            The distance along the ray of the intersection or <code>null</code> if this
            <see cref="T:Microsoft.Xna.Framework.Ray"/> does not intersect the <see cref="T:Microsoft.Xna.Framework.BoundingBox"/>.
            </param>
        </member>
        <member name="M:Microsoft.Xna.Framework.Ray.Intersects(Microsoft.Xna.Framework.BoundingSphere)">
            <summary>
            Check if this <see cref="T:Microsoft.Xna.Framework.Ray"/> intersects the specified <see cref="T:Microsoft.Xna.Framework.BoundingSphere"/>.
            </summary>
            <param name="sphere">The <see cref="T:Microsoft.Xna.Framework.BoundingBox"/> to test for intersection.</param>
            <returns>
            The distance along the ray of the intersection or <code>null</code> if this
            <see cref="T:Microsoft.Xna.Framework.Ray"/> does not intersect the <see cref="T:Microsoft.Xna.Framework.BoundingSphere"/>.
            </returns>
        </member>
        <member name="M:Microsoft.Xna.Framework.Ray.Intersects(Microsoft.Xna.Framework.Plane)">
            <summary>
            Check if this <see cref="T:Microsoft.Xna.Framework.Ray"/> intersects the specified <see cref="T:Microsoft.Xna.Framework.Plane"/>.
            </summary>
            <param name="plane">The <see cref="T:Microsoft.Xna.Framework.Plane"/> to test for intersection.</param>
            <returns>
            The distance along the ray of the intersection or <code>null</code> if this
            <see cref="T:Microsoft.Xna.Framework.Ray"/> does not intersect the <see cref="T:Microsoft.Xna.Framework.Plane"/>.
            </returns>
        </member>
        <member name="M:Microsoft.Xna.Framework.Ray.Intersects(Microsoft.Xna.Framework.Plane@,System.Nullable{System.Single}@)">
            <summary>
            Check if this <see cref="T:Microsoft.Xna.Framework.Ray"/> intersects the specified <see cref="T:Microsoft.Xna.Framework.Plane"/>.
            </summary>
            <param name="plane">The <see cref="T:Microsoft.Xna.Framework.Plane"/> to test for intersection.</param>
            <param name="result">
            The distance along the ray of the intersection or <code>null</code> if this
            <see cref="T:Microsoft.Xna.Framework.Ray"/> does not intersect the <see cref="T:Microsoft.Xna.Framework.Plane"/>.
            </param>
        </member>
        <member name="M:Microsoft.Xna.Framework.Ray.Intersects(Microsoft.Xna.Framework.BoundingSphere@,System.Nullable{System.Single}@)">
            <summary>
            Check if this <see cref="T:Microsoft.Xna.Framework.Ray"/> intersects the specified <see cref="T:Microsoft.Xna.Framework.BoundingSphere"/>.
            </summary>
            <param name="sphere">The <see cref="T:Microsoft.Xna.Framework.BoundingBox"/> to test for intersection.</param>
            <param name="result">
            The distance along the ray of the intersection or <code>null</code> if this
            <see cref="T:Microsoft.Xna.Framework.Ray"/> does not intersect the <see cref="T:Microsoft.Xna.Framework.BoundingSphere"/>.
            </param>
        </member>
        <member name="M:Microsoft.Xna.Framework.Ray.op_Inequality(Microsoft.Xna.Framework.Ray,Microsoft.Xna.Framework.Ray)">
            <summary>
            Check if two rays are not equal.
            </summary>
            <param name="left">A ray to check for inequality.</param>
            <param name="right">A ray to check for inequality.</param>
            <returns><code>true</code> if the two rays are not equal, <code>false</code> if they are.</returns>
        </member>
        <member name="M:Microsoft.Xna.Framework.Ray.op_Equality(Microsoft.Xna.Framework.Ray,Microsoft.Xna.Framework.Ray)">
            <summary>
            Check if two rays are equal.
            </summary>
            <param name="left">A ray to check for equality.</param>
            <param name="right">A ray to check for equality.</param>
            <returns><code>true</code> if the two rays are equals, <code>false</code> if they are not.</returns>
        </member>
        <member name="M:Microsoft.Xna.Framework.Ray.ToString">
            <summary>
            Get a <see cref="T:System.String"/> representation of this <see cref="T:Microsoft.Xna.Framework.Ray"/>.
            </summary>
            <returns>A <see cref="T:System.String"/> representation of this <see cref="T:Microsoft.Xna.Framework.Ray"/>.</returns>
        </member>
        <member name="M:Microsoft.Xna.Framework.Ray.Deconstruct(Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Vector3@)">
            <summary>
            Deconstruction method for <see cref="T:Microsoft.Xna.Framework.Ray"/>.
            </summary>
            <param name="position">Receives the start position of the ray.</param>
            <param name="direction">Receives the direction of the ray.</param>
        </member>
        <member name="T:Microsoft.Xna.Framework.Rectangle">
            <summary>
            Describes a 2D-rectangle. 
            </summary>
        </member>
        <member name="F:Microsoft.Xna.Framework.Rectangle.X">
            <summary>
            The x coordinate of the top-left corner of this <see cref="T:Microsoft.Xna.Framework.Rectangle"/>.
            </summary>
        </member>
        <member name="F:Microsoft.Xna.Framework.Rectangle.Y">
            <summary>
            The y coordinate of the top-left corner of this <see cref="T:Microsoft.Xna.Framework.Rectangle"/>.
            </summary>
        </member>
        <member name="F:Microsoft.Xna.Framework.Rectangle.Width">
            <summary>
            The width of this <see cref="T:Microsoft.Xna.Framework.Rectangle"/>.
            </summary>
        </member>
        <member name="F:Microsoft.Xna.Framework.Rectangle.Height">
            <summary>
            The height of this <see cref="T:Microsoft.Xna.Framework.Rectangle"/>.
            </summary>
        </member>
        <member name="P:Microsoft.Xna.Framework.Rectangle.Empty">
            <summary>
            Returns a <see cref="T:Microsoft.Xna.Framework.Rectangle"/> with X=0, Y=0, Width=0, Height=0.
            </summary>
        </member>
        <member name="P:Microsoft.Xna.Framework.Rectangle.Left">
            <summary>
            Returns the x coordinate of the left edge of this <see cref="T:Microsoft.Xna.Framework.Rectangle"/>.
            </summary>
        </member>
        <member name="P:Microsoft.Xna.Framework.Rectangle.Right">
            <summary>
            Returns the x coordinate of the right edge of this <see cref="T:Microsoft.Xna.Framework.Rectangle"/>.
            </summary>
        </member>
        <member name="P:Microsoft.Xna.Framework.Rectangle.Top">
            <summary>
            Returns the y coordinate of the top edge of this <see cref="T:Microsoft.Xna.Framework.Rectangle"/>.
            </summary>
        </member>
        <member name="P:Microsoft.Xna.Framework.Rectangle.Bottom">
            <summary>
            Returns the y coordinate of the bottom edge of this <see cref="T:Microsoft.Xna.Framework.Rectangle"/>.
            </summary>
        </member>
        <member name="P:Microsoft.Xna.Framework.Rectangle.IsEmpty">
            <summary>
            Whether or not this <see cref="T:Microsoft.Xna.Framework.Rectangle"/> has a <see cref="F:Microsoft.Xna.Framework.Rectangle.Width"/> and
            <see cref="F:Microsoft.Xna.Framework.Rectangle.Height"/> of 0, and a <see cref="P:Microsoft.Xna.Framework.Rectangle.Location"/> of (0, 0).
            </summary>
        </member>
        <member name="P:Microsoft.Xna.Framework.Rectangle.Location">
            <summary>
            The top-left coordinates of this <see cref="T:Microsoft.Xna.Framework.Rectangle"/>.
            </summary>
        </member>
        <member name="P:Microsoft.Xna.Framework.Rectangle.Size">
            <summary>
            The width-height coordinates of this <see cref="T:Microsoft.Xna.Framework.Rectangle"/>.
            </summary>
        </member>
        <member name="P:Microsoft.Xna.Framework.Rectangle.Center">
            <summary>
            A <see cref="T:Microsoft.Xna.Framework.Point"/> located in the center of this <see cref="T:Microsoft.Xna.Framework.Rectangle"/>.
            </summary>
            <remarks>
            If <see cref="F:Microsoft.Xna.Framework.Rectangle.Width"/> or <see cref="F:Microsoft.Xna.Framework.Rectangle.Height"/> is an odd number,
            the center point will be rounded down.
            </remarks>
        </member>
        <member name="M:Microsoft.Xna.Framework.Rectangle.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Creates a new instance of <see cref="T:Microsoft.Xna.Framework.Rectangle"/> struct, with the specified
            position, width, and height.
            </summary>
            <param name="x">The x coordinate of the top-left corner of the created <see cref="T:Microsoft.Xna.Framework.Rectangle"/>.</param>
            <param name="y">The y coordinate of the top-left corner of the created <see cref="T:Microsoft.Xna.Framework.Rectangle"/>.</param>
            <param name="width">The width of the created <see cref="T:Microsoft.Xna.Framework.Rectangle"/>.</param>
            <param name="height">The height of the created <see cref="T:Microsoft.Xna.Framework.Rectangle"/>.</param>
        </member>
        <member name="M:Microsoft.Xna.Framework.Rectangle.#ctor(Microsoft.Xna.Framework.Point,Microsoft.Xna.Framework.Point)">
            <summary>
            Creates a new instance of <see cref="T:Microsoft.Xna.Framework.Rectangle"/> struct, with the specified
            location and size.
            </summary>
            <param name="location">The x and y coordinates of the top-left corner of the created <see cref="T:Microsoft.Xna.Framework.Rectangle"/>.</param>
            <param name="size">The width and height of the created <see cref="T:Microsoft.Xna.Framework.Rectangle"/>.</param>
        </member>
        <member name="M:Microsoft.Xna.Framework.Rectangle.op_Equality(Microsoft.Xna.Framework.Rectangle,Microsoft.Xna.Framework.Rectangle)">
            <summary>
            Compares whether two <see cref="T:Microsoft.Xna.Framework.Rectangle"/> instances are equal.
            </summary>
            <param name="left"><see cref="T:Microsoft.Xna.Framework.Rectangle"/> instance on the left of the equal sign.</param>
            <param name="right"><see cref="T:Microsoft.Xna.Framework.Rectangle"/> instance on the right of the equal sign.</param>
            <returns><c>true</c> if the instances are equal; <c>false</c> otherwise.</returns>
        </member>
        <member name="M:Microsoft.Xna.Framework.Rectangle.op_Inequality(Microsoft.Xna.Framework.Rectangle,Microsoft.Xna.Framework.Rectangle)">
            <summary>
            Compares whether two <see cref="T:Microsoft.Xna.Framework.Rectangle"/> instances are not equal.
            </summary>
            <param name="left"><see cref="T:Microsoft.Xna.Framework.Rectangle"/> instance on the left of the not equal sign.</param>
            <param name="right"><see cref="T:Microsoft.Xna.Framework.Rectangle"/> instance on the right of the not equal sign.</param>
            <returns><c>true</c> if the instances are not equal; <c>false</c> otherwise.</returns>
        </member>
        <member name="M:Microsoft.Xna.Framework.Rectangle.Contains(System.Int32,System.Int32)">
            <summary>
            Gets whether or not the provided coordinates lie within the bounds of this <see cref="T:Microsoft.Xna.Framework.Rectangle"/>.
            </summary>
            <param name="x">The x coordinate of the point to check for containment.</param>
            <param name="y">The y coordinate of the point to check for containment.</param>
            <returns><c>true</c> if the provided coordinates lie inside this <see cref="T:Microsoft.Xna.Framework.Rectangle"/>; <c>false</c> otherwise.</returns>
        </member>
        <member name="M:Microsoft.Xna.Framework.Rectangle.Contains(System.Single,System.Single)">
            <summary>
            Gets whether or not the provided coordinates lie within the bounds of this <see cref="T:Microsoft.Xna.Framework.Rectangle"/>.
            </summary>
            <param name="x">The x coordinate of the point to check for containment.</param>
            <param name="y">The y coordinate of the point to check for containment.</param>
            <returns><c>true</c> if the provided coordinates lie inside this <see cref="T:Microsoft.Xna.Framework.Rectangle"/>; <c>false</c> otherwise.</returns>
        </member>
        <member name="M:Microsoft.Xna.Framework.Rectangle.Contains(Microsoft.Xna.Framework.Point)">
            <summary>
            Gets whether or not the provided <see cref="T:Microsoft.Xna.Framework.Point"/> lies within the bounds of this <see cref="T:Microsoft.Xna.Framework.Rectangle"/>.
            </summary>
            <param name="value">The coordinates to check for inclusion in this <see cref="T:Microsoft.Xna.Framework.Rectangle"/>.</param>
            <returns><c>true</c> if the provided <see cref="T:Microsoft.Xna.Framework.Point"/> lies inside this <see cref="T:Microsoft.Xna.Framework.Rectangle"/>; <c>false</c> otherwise.</returns>
        </member>
        <member name="M:Microsoft.Xna.Framework.Rectangle.Contains(Microsoft.Xna.Framework.Point@,System.Boolean@)">
            <summary>
            Gets whether or not the provided <see cref="T:Microsoft.Xna.Framework.Point"/> lies within the bounds of this <see cref="T:Microsoft.Xna.Framework.Rectangle"/>.
            </summary>
            <param name="value">The coordinates to check for inclusion in this <see cref="T:Microsoft.Xna.Framework.Rectangle"/>.</param>
            <param name="result"><c>true</c> if the provided <see cref="T:Microsoft.Xna.Framework.Point"/> lies inside this <see cref="T:Microsoft.Xna.Framework.Rectangle"/>; <c>false</c> otherwise. As an output parameter.</param>
        </member>
        <member name="M:Microsoft.Xna.Framework.Rectangle.Contains(Microsoft.Xna.Framework.Vector2)">
            <summary>
            Gets whether or not the provided <see cref="T:Microsoft.Xna.Framework.Vector2"/> lies within the bounds of this <see cref="T:Microsoft.Xna.Framework.Rectangle"/>.
            </summary>
            <param name="value">The coordinates to check for inclusion in this <see cref="T:Microsoft.Xna.Framework.Rectangle"/>.</param>
            <returns><c>true</c> if the provided <see cref="T:Microsoft.Xna.Framework.Vector2"/> lies inside this <see cref="T:Microsoft.Xna.Framework.Rectangle"/>; <c>false</c> otherwise.</returns>
        </member>
        <member name="M:Microsoft.Xna.Framework.Rectangle.Contains(Microsoft.Xna.Framework.Vector2@,System.Boolean@)">
            <summary>
            Gets whether or not the provided <see cref="T:Microsoft.Xna.Framework.Vector2"/> lies within the bounds of this <see cref="T:Microsoft.Xna.Framework.Rectangle"/>.
            </summary>
            <param name="value">The coordinates to check for inclusion in this <see cref="T:Microsoft.Xna.Framework.Rectangle"/>.</param>
            <param name="result"><c>true</c> if the provided <see cref="T:Microsoft.Xna.Framework.Vector2"/> lies inside this <see cref="T:Microsoft.Xna.Framework.Rectangle"/>; <c>false</c> otherwise. As an output parameter.</param>
        </member>
        <member name="M:Microsoft.Xna.Framework.Rectangle.Contains(Microsoft.Xna.Framework.Rectangle)">
            <summary>
            Gets whether or not the provided <see cref="T:Microsoft.Xna.Framework.Rectangle"/> lies within the bounds of this <see cref="T:Microsoft.Xna.Framework.Rectangle"/>.
            </summary>
            <param name="value">The <see cref="T:Microsoft.Xna.Framework.Rectangle"/> to check for inclusion in this <see cref="T:Microsoft.Xna.Framework.Rectangle"/>.</param>
            <returns><c>true</c> if the provided <see cref="T:Microsoft.Xna.Framework.Rectangle"/>'s bounds lie entirely inside this <see cref="T:Microsoft.Xna.Framework.Rectangle"/>; <c>false</c> otherwise.</returns>
        </member>
        <member name="M:Microsoft.Xna.Framework.Rectangle.Contains(Microsoft.Xna.Framework.Rectangle@,System.Boolean@)">
            <summary>
            Gets whether or not the provided <see cref="T:Microsoft.Xna.Framework.Rectangle"/> lies within the bounds of this <see cref="T:Microsoft.Xna.Framework.Rectangle"/>.
            </summary>
            <param name="value">The <see cref="T:Microsoft.Xna.Framework.Rectangle"/> to check for inclusion in this <see cref="T:Microsoft.Xna.Framework.Rectangle"/>.</param>
            <param name="result"><c>true</c> if the provided <see cref="T:Microsoft.Xna.Framework.Rectangle"/>'s bounds lie entirely inside this <see cref="T:Microsoft.Xna.Framework.Rectangle"/>; <c>false</c> otherwise. As an output parameter.</param>
        </member>
        <member name="M:Microsoft.Xna.Framework.Rectangle.Equals(System.Object)">
            <summary>
            Compares whether current instance is equal to specified <see cref="T:System.Object"/>.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> to compare.</param>
            <returns><c>true</c> if the instances are equal; <c>false</c> otherwise.</returns>
        </member>
        <member name="M:Microsoft.Xna.Framework.Rectangle.Equals(Microsoft.Xna.Framework.Rectangle)">
            <summary>
            Compares whether current instance is equal to specified <see cref="T:Microsoft.Xna.Framework.Rectangle"/>.
            </summary>
            <param name="other">The <see cref="T:Microsoft.Xna.Framework.Rectangle"/> to compare.</param>
            <returns><c>true</c> if the instances are equal; <c>false</c> otherwise.</returns>
        </member>
        <member name="M:Microsoft.Xna.Framework.Rectangle.GetHashCode">
            <summary>
            Gets the hash code of this <see cref="T:Microsoft.Xna.Framework.Rectangle"/>.
            </summary>
            <returns>Hash code of this <see cref="T:Microsoft.Xna.Framework.Rectangle"/>.</returns>
        </member>
        <member name="M:Microsoft.Xna.Framework.Rectangle.Inflate(System.Int32,System.Int32)">
            <summary>
            Adjusts the edges of this <see cref="T:Microsoft.Xna.Framework.Rectangle"/> by specified horizontal and vertical amounts. 
            </summary>
            <param name="horizontalAmount">Value to adjust the left and right edges.</param>
            <param name="verticalAmount">Value to adjust the top and bottom edges.</param>
        </member>
        <member name="M:Microsoft.Xna.Framework.Rectangle.Inflate(System.Single,System.Single)">
            <summary>
            Adjusts the edges of this <see cref="T:Microsoft.Xna.Framework.Rectangle"/> by specified horizontal and vertical amounts. 
            </summary>
            <param name="horizontalAmount">Value to adjust the left and right edges.</param>
            <param name="verticalAmount">Value to adjust the top and bottom edges.</param>
        </member>
        <member name="M:Microsoft.Xna.Framework.Rectangle.Intersects(Microsoft.Xna.Framework.Rectangle)">
            <summary>
            Gets whether or not the other <see cref="T:Microsoft.Xna.Framework.Rectangle"/> intersects with this rectangle.
            </summary>
            <param name="value">The other rectangle for testing.</param>
            <returns><c>true</c> if other <see cref="T:Microsoft.Xna.Framework.Rectangle"/> intersects with this rectangle; <c>false</c> otherwise.</returns>
        </member>
        <member name="M:Microsoft.Xna.Framework.Rectangle.Intersects(Microsoft.Xna.Framework.Rectangle@,System.Boolean@)">
            <summary>
            Gets whether or not the other <see cref="T:Microsoft.Xna.Framework.Rectangle"/> intersects with this rectangle.
            </summary>
            <param name="value">The other rectangle for testing.</param>
            <param name="result"><c>true</c> if other <see cref="T:Microsoft.Xna.Framework.Rectangle"/> intersects with this rectangle; <c>false</c> otherwise. As an output parameter.</param>
        </member>
        <member name="M:Microsoft.Xna.Framework.Rectangle.Intersect(Microsoft.Xna.Framework.Rectangle,Microsoft.Xna.Framework.Rectangle)">
            <summary>
            Creates a new <see cref="T:Microsoft.Xna.Framework.Rectangle"/> that contains overlapping region of two other rectangles.
            </summary>
            <param name="value1">The first <see cref="T:Microsoft.Xna.Framework.Rectangle"/>.</param>
            <param name="value2">The second <see cref="T:Microsoft.Xna.Framework.Rectangle"/>.</param>
            <returns>Overlapping region of the two rectangles.</returns>
        </member>
        <member name="M:Microsoft.Xna.Framework.Rectangle.Intersect(Microsoft.Xna.Framework.Rectangle@,Microsoft.Xna.Framework.Rectangle@,Microsoft.Xna.Framework.Rectangle@)">
            <summary>
            Creates a new <see cref="T:Microsoft.Xna.Framework.Rectangle"/> that contains overlapping region of two other rectangles.
            </summary>
            <param name="value1">The first <see cref="T:Microsoft.Xna.Framework.Rectangle"/>.</param>
            <param name="value2">The second <see cref="T:Microsoft.Xna.Framework.Rectangle"/>.</param>
            <param name="result">Overlapping region of the two rectangles as an output parameter.</param>
        </member>
        <member name="M:Microsoft.Xna.Framework.Rectangle.Offset(System.Int32,System.Int32)">
            <summary>
            Changes the <see cref="P:Microsoft.Xna.Framework.Rectangle.Location"/> of this <see cref="T:Microsoft.Xna.Framework.Rectangle"/>.
            </summary>
            <param name="offsetX">The x coordinate to add to this <see cref="T:Microsoft.Xna.Framework.Rectangle"/>.</param>
            <param name="offsetY">The y coordinate to add to this <see cref="T:Microsoft.Xna.Framework.Rectangle"/>.</param>
        </member>
        <member name="M:Microsoft.Xna.Framework.Rectangle.Offset(System.Single,System.Single)">
            <summary>
            Changes the <see cref="P:Microsoft.Xna.Framework.Rectangle.Location"/> of this <see cref="T:Microsoft.Xna.Framework.Rectangle"/>.
            </summary>
            <param name="offsetX">The x coordinate to add to this <see cref="T:Microsoft.Xna.Framework.Rectangle"/>.</param>
            <param name="offsetY">The y coordinate to add to this <see cref="T:Microsoft.Xna.Framework.Rectangle"/>.</param>
        </member>
        <member name="M:Microsoft.Xna.Framework.Rectangle.Offset(Microsoft.Xna.Framework.Point)">
            <summary>
            Changes the <see cref="P:Microsoft.Xna.Framework.Rectangle.Location"/> of this <see cref="T:Microsoft.Xna.Framework.Rectangle"/>.
            </summary>
            <param name="amount">The x and y components to add to this <see cref="T:Microsoft.Xna.Framework.Rectangle"/>.</param>
        </member>
        <member name="M:Microsoft.Xna.Framework.Rectangle.Offset(Microsoft.Xna.Framework.Vector2)">
            <summary>
            Changes the <see cref="P:Microsoft.Xna.Framework.Rectangle.Location"/> of this <see cref="T:Microsoft.Xna.Framework.Rectangle"/>.
            </summary>
            <param name="amount">The x and y components to add to this <see cref="T:Microsoft.Xna.Framework.Rectangle"/>.</param>
        </member>
        <member name="M:Microsoft.Xna.Framework.Rectangle.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> representation of this <see cref="T:Microsoft.Xna.Framework.Rectangle"/> in the format:
            {X:[<see cref="F:Microsoft.Xna.Framework.Rectangle.X"/>] Y:[<see cref="F:Microsoft.Xna.Framework.Rectangle.Y"/>] Width:[<see cref="F:Microsoft.Xna.Framework.Rectangle.Width"/>] Height:[<see cref="F:Microsoft.Xna.Framework.Rectangle.Height"/>]}
            </summary>
            <returns><see cref="T:System.String"/> representation of this <see cref="T:Microsoft.Xna.Framework.Rectangle"/>.</returns>
        </member>
        <member name="M:Microsoft.Xna.Framework.Rectangle.Union(Microsoft.Xna.Framework.Rectangle,Microsoft.Xna.Framework.Rectangle)">
            <summary>
            Creates a new <see cref="T:Microsoft.Xna.Framework.Rectangle"/> that completely contains two other rectangles.
            </summary>
            <param name="value1">The first <see cref="T:Microsoft.Xna.Framework.Rectangle"/>.</param>
            <param name="value2">The second <see cref="T:Microsoft.Xna.Framework.Rectangle"/>.</param>
            <returns>The union of the two rectangles.</returns>
        </member>
        <member name="M:Microsoft.Xna.Framework.Rectangle.Union(Microsoft.Xna.Framework.Rectangle@,Microsoft.Xna.Framework.Rectangle@,Microsoft.Xna.Framework.Rectangle@)">
            <summary>
            Creates a new <see cref="T:Microsoft.Xna.Framework.Rectangle"/> that completely contains two other rectangles.
            </summary>
            <param name="value1">The first <see cref="T:Microsoft.Xna.Framework.Rectangle"/>.</param>
            <param name="value2">The second <see cref="T:Microsoft.Xna.Framework.Rectangle"/>.</param>
            <param name="result">The union of the two rectangles as an output parameter.</param>
        </member>
        <member name="M:Microsoft.Xna.Framework.Rectangle.Deconstruct(System.Int32@,System.Int32@,System.Int32@,System.Int32@)">
            <summary>
            Deconstruction method for <see cref="T:Microsoft.Xna.Framework.Rectangle"/>.
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <param name="width"></param>
            <param name="height"></param>
        </member>
        <member name="T:Microsoft.Xna.Framework.Vector2">
            <summary>
            Describes a 2D-vector.
            </summary>
        </member>
        <member name="F:Microsoft.Xna.Framework.Vector2.X">
            <summary>
            The x coordinate of this <see cref="T:Microsoft.Xna.Framework.Vector2"/>.
            </summary>
        </member>
        <member name="F:Microsoft.Xna.Framework.Vector2.Y">
            <summary>
            The y coordinate of this <see cref="T:Microsoft.Xna.Framework.Vector2"/>.
            </summary>
        </member>
        <member name="P:Microsoft.Xna.Framework.Vector2.Zero">
            <summary>
            Returns a <see cref="T:Microsoft.Xna.Framework.Vector2"/> with components 0, 0.
            </summary>
        </member>
        <member name="P:Microsoft.Xna.Framework.Vector2.One">
            <summary>
            Returns a <see cref="T:Microsoft.Xna.Framework.Vector2"/> with components 1, 1.
            </summary>
        </member>
        <member name="P:Microsoft.Xna.Framework.Vector2.UnitX">
            <summary>
            Returns a <see cref="T:Microsoft.Xna.Framework.Vector2"/> with components 1, 0.
            </summary>
        </member>
        <member name="P:Microsoft.Xna.Framework.Vector2.UnitY">
            <summary>
            Returns a <see cref="T:Microsoft.Xna.Framework.Vector2"/> with components 0, 1.
            </summary>
        </member>
        <member name="M:Microsoft.Xna.Framework.Vector2.#ctor(System.Single,System.Single)">
            <summary>
            Constructs a 2d vector with X and Y from two values.
            </summary>
            <param name="x">The x coordinate in 2d-space.</param>
            <param name="y">The y coordinate in 2d-space.</param>
        </member>
        <member name="M:Microsoft.Xna.Framework.Vector2.#ctor(System.Single)">
            <summary>
            Constructs a 2d vector with X and Y set to the same value.
            </summary>
            <param name="value">The x and y coordinates in 2d-space.</param>
        </member>
        <member name="M:Microsoft.Xna.Framework.Vector2.op_UnaryNegation(Microsoft.Xna.Framework.Vector2)">
            <summary>
            Inverts values in the specified <see cref="T:Microsoft.Xna.Framework.Vector2"/>.
            </summary>
            <param name="value">Source <see cref="T:Microsoft.Xna.Framework.Vector2"/> on the right of the sub sign.</param>
            <returns>Result of the inversion.</returns>
        </member>
        <member name="M:Microsoft.Xna.Framework.Vector2.op_Addition(Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Vector2)">
            <summary>
            Adds two vectors.
            </summary>
            <param name="left">Source <see cref="T:Microsoft.Xna.Framework.Vector2"/> on the left of the add sign.</param>
            <param name="right">Source <see cref="T:Microsoft.Xna.Framework.Vector2"/> on the right of the add sign.</param>
            <returns>Sum of the vectors.</returns>
        </member>
        <member name="M:Microsoft.Xna.Framework.Vector2.op_Subtraction(Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Vector2)">
            <summary>
            Subtracts a <see cref="T:Microsoft.Xna.Framework.Vector2"/> from a <see cref="T:Microsoft.Xna.Framework.Vector2"/>.
            </summary>
            <param name="left">Source <see cref="T:Microsoft.Xna.Framework.Vector2"/> on the left of the sub sign.</param>
            <param name="right">Source <see cref="T:Microsoft.Xna.Framework.Vector2"/> on the right of the sub sign.</param>
            <returns>Result of the vector subtraction.</returns>
        </member>
        <member name="M:Microsoft.Xna.Framework.Vector2.op_Multiply(Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Vector2)">
            <summary>
            Multiplies the components of two vectors by each other.
            </summary>
            <param name="left">Source <see cref="T:Microsoft.Xna.Framework.Vector2"/> on the left of the mul sign.</param>
            <param name="right">Source <see cref="T:Microsoft.Xna.Framework.Vector2"/> on the right of the mul sign.</param>
            <returns>Result of the vector multiplication.</returns>
        </member>
        <member name="M:Microsoft.Xna.Framework.Vector2.op_Multiply(Microsoft.Xna.Framework.Vector2,System.Single)">
            <summary>
            Multiplies the components of vector by a scalar.
            </summary>
            <param name="left">Source <see cref="T:Microsoft.Xna.Framework.Vector2"/> on the left of the mul sign.</param>
            <param name="right">Scalar value on the right of the mul sign.</param>
            <returns>Result of the vector multiplication with a scalar.</returns>
        </member>
        <member name="M:Microsoft.Xna.Framework.Vector2.op_Multiply(System.Single,Microsoft.Xna.Framework.Vector2)">
            <summary>
            Multiplies the components of vector by a scalar.
            </summary>
            <param name="left">Scalar value on the left of the mul sign.</param>
            <param name="right">Source <see cref="T:Microsoft.Xna.Framework.Vector2"/> on the right of the mul sign.</param>
            <returns>Result of the vector multiplication with a scalar.</returns>
        </member>
        <member name="M:Microsoft.Xna.Framework.Vector2.op_Division(Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Vector2)">
            <summary>
            Divides the components of a <see cref="T:Microsoft.Xna.Framework.Vector2"/> by the components of another <see cref="T:Microsoft.Xna.Framework.Vector2"/>.
            </summary>
            <param name="left">Source <see cref="T:Microsoft.Xna.Framework.Vector2"/> on the left of the div sign.</param>
            <param name="right">Divisor <see cref="T:Microsoft.Xna.Framework.Vector2"/> on the right of the div sign.</param>
            <returns>The result of dividing the vectors.</returns>
        </member>
        <member name="M:Microsoft.Xna.Framework.Vector2.op_Division(Microsoft.Xna.Framework.Vector2,System.Single)">
            <summary>
            Divides the components of a <see cref="T:Microsoft.Xna.Framework.Vector2"/> by a scalar.
            </summary>
            <param name="left">Source <see cref="T:Microsoft.Xna.Framework.Vector2"/> on the left of the div sign.</param>
            <param name="right">Divisor scalar on the right of the div sign.</param>
            <returns>The result of dividing a vector by a scalar.</returns>
        </member>
        <member name="M:Microsoft.Xna.Framework.Vector2.op_Equality(Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Vector2)">
            <summary>
            Compares whether two <see cref="T:Microsoft.Xna.Framework.Vector2"/> instances are equal.
            </summary>
            <param name="left"><see cref="T:Microsoft.Xna.Framework.Vector2"/> instance on the left of the equal sign.</param>
            <param name="right"><see cref="T:Microsoft.Xna.Framework.Vector2"/> instance on the right of the equal sign.</param>
            <returns><c>true</c> if the instances are equal; <c>false</c> otherwise.</returns>
        </member>
        <member name="M:Microsoft.Xna.Framework.Vector2.op_Inequality(Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Vector2)">
            <summary>
            Compares whether two <see cref="T:Microsoft.Xna.Framework.Vector2"/> instances are not equal.
            </summary>
            <param name="left"><see cref="T:Microsoft.Xna.Framework.Vector2"/> instance on the left of the not equal sign.</param>
            <param name="right"><see cref="T:Microsoft.Xna.Framework.Vector2"/> instance on the right of the not equal sign.</param>
            <returns><c>true</c> if the instances are not equal; <c>false</c> otherwise.</returns>	
        </member>
        <member name="M:Microsoft.Xna.Framework.Vector2.Add(Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Vector2)">
            <summary>
            Performs vector addition on <paramref name="left"/> and <paramref name="right"/>.
            </summary>
            <param name="left">The first vector to add.</param>
            <param name="right">The second vector to add.</param>
            <returns>The result of the vector addition.</returns>
        </member>
        <member name="M:Microsoft.Xna.Framework.Vector2.Add(Microsoft.Xna.Framework.Vector2@,Microsoft.Xna.Framework.Vector2@,Microsoft.Xna.Framework.Vector2@)">
            <summary>
            Performs vector addition on <paramref name="left"/> and
            <paramref name="right"/>, storing the result of the
            addition in <paramref name="result"/>.
            </summary>
            <param name="left">The first vector to add.</param>
            <param name="right">The second vector to add.</param>
            <param name="result">The result of the vector addition.</param>
        </member>
        <member name="M:Microsoft.Xna.Framework.Vector2.Barycentric(Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Vector2,System.Single,System.Single)">
            <summary>
            Creates a new <see cref="T:Microsoft.Xna.Framework.Vector2"/> that contains the cartesian coordinates of a vector specified in barycentric coordinates and relative to 2d-triangle.
            </summary>
            <param name="value1">The first vector of 2d-triangle.</param>
            <param name="value2">The second vector of 2d-triangle.</param>
            <param name="value3">The third vector of 2d-triangle.</param>
            <param name="amount1">Barycentric scalar <c>b2</c> which represents a weighting factor towards second vector of 2d-triangle.</param>
            <param name="amount2">Barycentric scalar <c>b3</c> which represents a weighting factor towards third vector of 2d-triangle.</param>
            <returns>The cartesian translation of barycentric coordinates.</returns>
        </member>
        <member name="M:Microsoft.Xna.Framework.Vector2.Barycentric(Microsoft.Xna.Framework.Vector2@,Microsoft.Xna.Framework.Vector2@,Microsoft.Xna.Framework.Vector2@,System.Single,System.Single,Microsoft.Xna.Framework.Vector2@)">
            <summary>
            Creates a new <see cref="T:Microsoft.Xna.Framework.Vector2"/> that contains the cartesian coordinates of a vector specified in barycentric coordinates and relative to 2d-triangle.
            </summary>
            <param name="value1">The first vector of 2d-triangle.</param>
            <param name="value2">The second vector of 2d-triangle.</param>
            <param name="value3">The third vector of 2d-triangle.</param>
            <param name="amount1">Barycentric scalar <c>b2</c> which represents a weighting factor towards second vector of 2d-triangle.</param>
            <param name="amount2">Barycentric scalar <c>b3</c> which represents a weighting factor towards third vector of 2d-triangle.</param>
            <param name="result">The cartesian translation of barycentric coordinates as an output parameter.</param>
        </member>
        <member name="M:Microsoft.Xna.Framework.Vector2.CatmullRom(Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Vector2,System.Single)">
            <summary>
            Creates a new <see cref="T:Microsoft.Xna.Framework.Vector2"/> that contains CatmullRom interpolation of the specified vectors.
            </summary>
            <param name="value1">The first vector in interpolation.</param>
            <param name="value2">The second vector in interpolation.</param>
            <param name="value3">The third vector in interpolation.</param>
            <param name="value4">The fourth vector in interpolation.</param>
            <param name="amount">Weighting factor.</param>
            <returns>The result of CatmullRom interpolation.</returns>
        </member>
        <member name="M:Microsoft.Xna.Framework.Vector2.CatmullRom(Microsoft.Xna.Framework.Vector2@,Microsoft.Xna.Framework.Vector2@,Microsoft.Xna.Framework.Vector2@,Microsoft.Xna.Framework.Vector2@,System.Single,Microsoft.Xna.Framework.Vector2@)">
            <summary>
            Creates a new <see cref="T:Microsoft.Xna.Framework.Vector2"/> that contains CatmullRom interpolation of the specified vectors.
            </summary>
            <param name="value1">The first vector in interpolation.</param>
            <param name="value2">The second vector in interpolation.</param>
            <param name="value3">The third vector in interpolation.</param>
            <param name="value4">The fourth vector in interpolation.</param>
            <param name="amount">Weighting factor.</param>
            <param name="result">The result of CatmullRom interpolation as an output parameter.</param>
        </member>
        <member name="M:Microsoft.Xna.Framework.Vector2.Ceiling">
            <summary>
            Round the members of this <see cref="T:Microsoft.Xna.Framework.Vector2"/> towards positive infinity.
            </summary>
        </member>
        <member name="M:Microsoft.Xna.Framework.Vector2.Ceiling(Microsoft.Xna.Framework.Vector2)">
            <summary>
            Creates a new <see cref="T:Microsoft.Xna.Framework.Vector2"/> that contains members from another vector rounded towards positive infinity.
            </summary>
            <param name="value">Source <see cref="T:Microsoft.Xna.Framework.Vector2"/>.</param>
            <returns>The rounded <see cref="T:Microsoft.Xna.Framework.Vector2"/>.</returns>
        </member>
        <member name="M:Microsoft.Xna.Framework.Vector2.Ceiling(Microsoft.Xna.Framework.Vector2@,Microsoft.Xna.Framework.Vector2@)">
            <summary>
            Creates a new <see cref="T:Microsoft.Xna.Framework.Vector2"/> that contains members from another vector rounded towards positive infinity.
            </summary>
            <param name="value">Source <see cref="T:Microsoft.Xna.Framework.Vector2"/>.</param>
            <param name="result">The rounded <see cref="T:Microsoft.Xna.Framework.Vector2"/>.</param>
        </member>
        <member name="M:Microsoft.Xna.Framework.Vector2.Clamp(Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Vector2)">
            <summary>
            Clamps the specified value within a range.
            </summary>
            <param name="value1">The value to clamp.</param>
            <param name="min">The min value.</param>
            <param name="max">The max value.</param>
            <returns>The clamped value.</returns>
        </member>
        <member name="M:Microsoft.Xna.Framework.Vector2.Clamp(Microsoft.Xna.Framework.Vector2@,Microsoft.Xna.Framework.Vector2@,Microsoft.Xna.Framework.Vector2@,Microsoft.Xna.Framework.Vector2@)">
            <summary>
            Clamps the specified value within a range.
            </summary>
            <param name="value1">The value to clamp.</param>
            <param name="min">The min value.</param>
            <param name="max">The max value.</param>
            <param name="result">The clamped value as an output parameter.</param>
        </member>
        <member name="M:Microsoft.Xna.Framework.Vector2.Distance(Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Vector2)">
            <summary>
            Returns the distance between two vectors.
            </summary>
            <param name="value1">The first vector.</param>
            <param name="value2">The second vector.</param>
            <returns>The distance between two vectors.</returns>
        </member>
        <member name="M:Microsoft.Xna.Framework.Vector2.Distance(Microsoft.Xna.Framework.Vector2@,Microsoft.Xna.Framework.Vector2@,System.Single@)">
            <summary>
            Returns the distance between two vectors.
            </summary>
            <param name="value1">The first vector.</param>
            <param name="value2">The second vector.</param>
            <param name="result">The distance between two vectors as an output parameter.</param>
        </member>
        <member name="M:Microsoft.Xna.Framework.Vector2.DistanceSquared(Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Vector2)">
            <summary>
            Returns the squared distance between two vectors.
            </summary>
            <param name="value1">The first vector.</param>
            <param name="value2">The second vector.</param>
            <returns>The squared distance between two vectors.</returns>
        </member>
        <member name="M:Microsoft.Xna.Framework.Vector2.DistanceSquared(Microsoft.Xna.Framework.Vector2@,Microsoft.Xna.Framework.Vector2@,System.Single@)">
            <summary>
            Returns the squared distance between two vectors.
            </summary>
            <param name="value1">The first vector.</param>
            <param name="value2">The second vector.</param>
            <param name="result">The squared distance between two vectors as an output parameter.</param>
        </member>
        <member name="M:Microsoft.Xna.Framework.Vector2.Divide(Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Vector2)">
            <summary>
            Divides the components of a <see cref="T:Microsoft.Xna.Framework.Vector2"/> by the components of another <see cref="T:Microsoft.Xna.Framework.Vector2"/>.
            </summary>
            <param name="left">Source <see cref="T:Microsoft.Xna.Framework.Vector2"/>.</param>
            <param name="right">Divisor <see cref="T:Microsoft.Xna.Framework.Vector2"/>.</param>
            <returns>The result of dividing the vectors.</returns>
        </member>
        <member name="M:Microsoft.Xna.Framework.Vector2.Divide(Microsoft.Xna.Framework.Vector2@,Microsoft.Xna.Framework.Vector2@,Microsoft.Xna.Framework.Vector2@)">
            <summary>
            Divides the components of a <see cref="T:Microsoft.Xna.Framework.Vector2"/> by the components of another <see cref="T:Microsoft.Xna.Framework.Vector2"/>.
            </summary>
            <param name="left">Source <see cref="T:Microsoft.Xna.Framework.Vector2"/>.</param>
            <param name="right">Divisor <see cref="T:Microsoft.Xna.Framework.Vector2"/>.</param>
            <param name="result">The result of dividing the vectors as an output parameter.</param>
        </member>
        <member name="M:Microsoft.Xna.Framework.Vector2.Divide(Microsoft.Xna.Framework.Vector2,System.Single)">
            <summary>
            Divides the components of a <see cref="T:Microsoft.Xna.Framework.Vector2"/> by a scalar.
            </summary>
            <param name="left">Source <see cref="T:Microsoft.Xna.Framework.Vector2"/>.</param>
            <param name="right">Divisor scalar.</param>
            <returns>The result of dividing a vector by a scalar.</returns>
        </member>
        <member name="M:Microsoft.Xna.Framework.Vector2.Divide(Microsoft.Xna.Framework.Vector2@,System.Single,Microsoft.Xna.Framework.Vector2@)">
            <summary>
            Divides the components of a <see cref="T:Microsoft.Xna.Framework.Vector2"/> by a scalar.
            </summary>
            <param name="left">Source <see cref="T:Microsoft.Xna.Framework.Vector2"/>.</param>
            <param name="right">Divisor scalar.</param>
            <param name="result">The result of dividing a vector by a scalar as an output parameter.</param>
        </member>
        <member name="M:Microsoft.Xna.Framework.Vector2.Dot(Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Vector2)">
            <summary>
            Returns a dot product of two vectors.
            </summary>
            <param name="left">The first vector.</param>
            <param name="right">The second vector.</param>
            <returns>The dot product of two vectors.</returns>
        </member>
        <member name="M:Microsoft.Xna.Framework.Vector2.Dot(Microsoft.Xna.Framework.Vector2@,Microsoft.Xna.Framework.Vector2@,System.Single@)">
            <summary>
            Returns a dot product of two vectors.
            </summary>
            <param name="left">The first vector.</param>
            <param name="right">The second vector.</param>
            <param name="result">The dot product of two vectors as an output parameter.</param>
        </member>
        <member name="M:Microsoft.Xna.Framework.Vector2.Equals(System.Object)">
            <summary>
            Compares whether current instance is equal to specified <see cref="T:System.Object"/>.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> to compare.</param>
            <returns><c>true</c> if the instances are equal; <c>false</c> otherwise.</returns>
        </member>
        <member name="M:Microsoft.Xna.Framework.Vector2.Equals(Microsoft.Xna.Framework.Vector2)">
            <summary>
            Compares whether current instance is equal to specified <see cref="T:Microsoft.Xna.Framework.Vector2"/>.
            </summary>
            <param name="other">The <see cref="T:Microsoft.Xna.Framework.Vector2"/> to compare.</param>
            <returns><c>true</c> if the instances are equal; <c>false</c> otherwise.</returns>
        </member>
        <member name="M:Microsoft.Xna.Framework.Vector2.Floor">
            <summary>
            Round the members of this <see cref="T:Microsoft.Xna.Framework.Vector2"/> towards negative infinity.
            </summary>
        </member>
        <member name="M:Microsoft.Xna.Framework.Vector2.Floor(Microsoft.Xna.Framework.Vector2)">
            <summary>
            Creates a new <see cref="T:Microsoft.Xna.Framework.Vector2"/> that contains members from another vector rounded towards negative infinity.
            </summary>
            <param name="value">Source <see cref="T:Microsoft.Xna.Framework.Vector2"/>.</param>
            <returns>The rounded <see cref="T:Microsoft.Xna.Framework.Vector2"/>.</returns>
        </member>
        <member name="M:Microsoft.Xna.Framework.Vector2.Floor(Microsoft.Xna.Framework.Vector2@,Microsoft.Xna.Framework.Vector2@)">
            <summary>
            Creates a new <see cref="T:Microsoft.Xna.Framework.Vector2"/> that contains members from another vector rounded towards negative infinity.
            </summary>
            <param name="value">Source <see cref="T:Microsoft.Xna.Framework.Vector2"/>.</param>
            <param name="result">The rounded <see cref="T:Microsoft.Xna.Framework.Vector2"/>.</param>
        </member>
        <member name="M:Microsoft.Xna.Framework.Vector2.GetHashCode">
            <summary>
            Gets the hash code of this <see cref="T:Microsoft.Xna.Framework.Vector2"/>.
            </summary>
            <returns>Hash code of this <see cref="T:Microsoft.Xna.Framework.Vector2"/>.</returns>
        </member>
        <member name="M:Microsoft.Xna.Framework.Vector2.Hermite(Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Vector2,System.Single)">
            <summary>
            Creates a new <see cref="T:Microsoft.Xna.Framework.Vector2"/> that contains hermite spline interpolation.
            </summary>
            <param name="value1">The first position vector.</param>
            <param name="tangent1">The first tangent vector.</param>
            <param name="value2">The second position vector.</param>
            <param name="tangent2">The second tangent vector.</param>
            <param name="amount">Weighting factor.</param>
            <returns>The hermite spline interpolation vector.</returns>
        </member>
        <member name="M:Microsoft.Xna.Framework.Vector2.Hermite(Microsoft.Xna.Framework.Vector2@,Microsoft.Xna.Framework.Vector2@,Microsoft.Xna.Framework.Vector2@,Microsoft.Xna.Framework.Vector2@,System.Single,Microsoft.Xna.Framework.Vector2@)">
            <summary>
            Creates a new <see cref="T:Microsoft.Xna.Framework.Vector2"/> that contains hermite spline interpolation.
            </summary>
            <param name="value1">The first position vector.</param>
            <param name="tangent1">The first tangent vector.</param>
            <param name="value2">The second position vector.</param>
            <param name="tangent2">The second tangent vector.</param>
            <param name="amount">Weighting factor.</param>
            <param name="result">The hermite spline interpolation vector as an output parameter.</param>
        </member>
        <member name="M:Microsoft.Xna.Framework.Vector2.Length">
            <summary>
            Returns the length of this <see cref="T:Microsoft.Xna.Framework.Vector2"/>.
            </summary>
            <returns>The length of this <see cref="T:Microsoft.Xna.Framework.Vector2"/>.</returns>
        </member>
        <member name="M:Microsoft.Xna.Framework.Vector2.LengthSquared">
            <summary>
            Returns the squared length of this <see cref="T:Microsoft.Xna.Framework.Vector2"/>.
            </summary>
            <returns>The squared length of this <see cref="T:Microsoft.Xna.Framework.Vector2"/>.</returns>
        </member>
        <member name="M:Microsoft.Xna.Framework.Vector2.Lerp(Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Vector2,System.Single)">
            <summary>
            Creates a new <see cref="T:Microsoft.Xna.Framework.Vector2"/> that contains linear interpolation of the specified vectors.
            </summary>
            <param name="start">The first vector.</param>
            <param name="end">The second vector.</param>
            <param name="amount">Weighting value(between 0.0 and 1.0).</param>
            <returns>The result of linear interpolation of the specified vectors.</returns>
        </member>
        <member name="M:Microsoft.Xna.Framework.Vector2.Lerp(Microsoft.Xna.Framework.Vector2@,Microsoft.Xna.Framework.Vector2@,System.Single,Microsoft.Xna.Framework.Vector2@)">
            <summary>
            Creates a new <see cref="T:Microsoft.Xna.Framework.Vector2"/> that contains linear interpolation of the specified vectors.
            </summary>
            <param name="start">The first vector.</param>
            <param name="end">The second vector.</param>
            <param name="amount">Weighting value(between 0.0 and 1.0).</param>
            <param name="result">The result of linear interpolation of the specified vectors as an output parameter.</param>
        </member>
        <member name="M:Microsoft.Xna.Framework.Vector2.LerpPrecise(Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Vector2,System.Single)">
            <summary>
            Creates a new <see cref="T:Microsoft.Xna.Framework.Vector2"/> that contains linear interpolation of the specified vectors.
            Uses <see cref="M:Microsoft.Xna.Framework.MathHelper.LerpPrecise(System.Single,System.Single,System.Single)"/> on MathHelper for the interpolation.
            Less efficient but more precise compared to <see cref="M:Microsoft.Xna.Framework.Vector2.Lerp(Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Vector2,System.Single)"/>.
            See remarks section of <see cref="M:Microsoft.Xna.Framework.MathHelper.LerpPrecise(System.Single,System.Single,System.Single)"/> on MathHelper for more info.
            </summary>
            <param name="start">The first vector.</param>
            <param name="end">The second vector.</param>
            <param name="amount">Weighting value(between 0.0 and 1.0).</param>
            <returns>The result of linear interpolation of the specified vectors.</returns>
        </member>
        <member name="M:Microsoft.Xna.Framework.Vector2.LerpPrecise(Microsoft.Xna.Framework.Vector2@,Microsoft.Xna.Framework.Vector2@,System.Single,Microsoft.Xna.Framework.Vector2@)">
            <summary>
            Creates a new <see cref="T:Microsoft.Xna.Framework.Vector2"/> that contains linear interpolation of the specified vectors.
            Uses <see cref="M:Microsoft.Xna.Framework.MathHelper.LerpPrecise(System.Single,System.Single,System.Single)"/> on MathHelper for the interpolation.
            Less efficient but more precise compared to <see cref="M:Microsoft.Xna.Framework.Vector2.Lerp(Microsoft.Xna.Framework.Vector2@,Microsoft.Xna.Framework.Vector2@,System.Single,Microsoft.Xna.Framework.Vector2@)"/>.
            See remarks section of <see cref="M:Microsoft.Xna.Framework.MathHelper.LerpPrecise(System.Single,System.Single,System.Single)"/> on MathHelper for more info.
            </summary>
            <param name="start">The first vector.</param>
            <param name="end">The second vector.</param>
            <param name="amount">Weighting value(between 0.0 and 1.0).</param>
            <param name="result">The result of linear interpolation of the specified vectors as an output parameter.</param>
        </member>
        <member name="M:Microsoft.Xna.Framework.Vector2.Max(Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Vector2)">
            <summary>
            Creates a new <see cref="T:Microsoft.Xna.Framework.Vector2"/> that contains a maximal values from the two vectors.
            </summary>
            <param name="value1">The first vector.</param>
            <param name="value2">The second vector.</param>
            <returns>The <see cref="T:Microsoft.Xna.Framework.Vector2"/> with maximal values from the two vectors.</returns>
        </member>
        <member name="M:Microsoft.Xna.Framework.Vector2.Max(Microsoft.Xna.Framework.Vector2@,Microsoft.Xna.Framework.Vector2@,Microsoft.Xna.Framework.Vector2@)">
            <summary>
            Creates a new <see cref="T:Microsoft.Xna.Framework.Vector2"/> that contains a maximal values from the two vectors.
            </summary>
            <param name="value1">The first vector.</param>
            <param name="value2">The second vector.</param>
            <param name="result">The <see cref="T:Microsoft.Xna.Framework.Vector2"/> with maximal values from the two vectors as an output parameter.</param>
        </member>
        <member name="M:Microsoft.Xna.Framework.Vector2.Min(Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Vector2)">
            <summary>
            Creates a new <see cref="T:Microsoft.Xna.Framework.Vector2"/> that contains a minimal values from the two vectors.
            </summary>
            <param name="value1">The first vector.</param>
            <param name="value2">The second vector.</param>
            <returns>The <see cref="T:Microsoft.Xna.Framework.Vector2"/> with minimal values from the two vectors.</returns>
        </member>
        <member name="M:Microsoft.Xna.Framework.Vector2.Min(Microsoft.Xna.Framework.Vector2@,Microsoft.Xna.Framework.Vector2@,Microsoft.Xna.Framework.Vector2@)">
            <summary>
            Creates a new <see cref="T:Microsoft.Xna.Framework.Vector2"/> that contains a minimal values from the two vectors.
            </summary>
            <param name="value1">The first vector.</param>
            <param name="value2">The second vector.</param>
            <param name="result">The <see cref="T:Microsoft.Xna.Framework.Vector2"/> with minimal values from the two vectors as an output parameter.</param>
        </member>
        <member name="M:Microsoft.Xna.Framework.Vector2.Multiply(Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Vector2)">
            <summary>
            Creates a new <see cref="T:Microsoft.Xna.Framework.Vector2"/> that contains a multiplication of two vectors.
            </summary>
            <param name="left">Source <see cref="T:Microsoft.Xna.Framework.Vector2"/>.</param>
            <param name="right">Source <see cref="T:Microsoft.Xna.Framework.Vector2"/>.</param>
            <returns>The result of the vector multiplication.</returns>
        </member>
        <member name="M:Microsoft.Xna.Framework.Vector2.Multiply(Microsoft.Xna.Framework.Vector2@,Microsoft.Xna.Framework.Vector2@,Microsoft.Xna.Framework.Vector2@)">
            <summary>
            Creates a new <see cref="T:Microsoft.Xna.Framework.Vector2"/> that contains a multiplication of two vectors.
            </summary>
            <param name="left">Source <see cref="T:Microsoft.Xna.Framework.Vector2"/>.</param>
            <param name="right">Source <see cref="T:Microsoft.Xna.Framework.Vector2"/>.</param>
            <param name="result">The result of the vector multiplication as an output parameter.</param>
        </member>
        <member name="M:Microsoft.Xna.Framework.Vector2.Multiply(Microsoft.Xna.Framework.Vector2,System.Single)">
            <summary>
            Creates a new <see cref="T:Microsoft.Xna.Framework.Vector2"/> that contains a multiplication of <see cref="T:Microsoft.Xna.Framework.Vector2"/> and a scalar.
            </summary>
            <param name="left">Source <see cref="T:Microsoft.Xna.Framework.Vector2"/>.</param>
            <param name="right">Scalar value.</param>
            <returns>The result of the vector multiplication with a scalar.</returns>
        </member>
        <member name="M:Microsoft.Xna.Framework.Vector2.Multiply(Microsoft.Xna.Framework.Vector2@,System.Single,Microsoft.Xna.Framework.Vector2@)">
            <summary>
            Creates a new <see cref="T:Microsoft.Xna.Framework.Vector2"/> that contains a multiplication of <see cref="T:Microsoft.Xna.Framework.Vector2"/> and a scalar.
            </summary>
            <param name="left">Source <see cref="T:Microsoft.Xna.Framework.Vector2"/>.</param>
            <param name="right">Scalar value.</param>
            <param name="result">The result of the multiplication with a scalar as an output parameter.</param>
        </member>
        <member name="M:Microsoft.Xna.Framework.Vector2.Negate(Microsoft.Xna.Framework.Vector2)">
            <summary>
            Creates a new <see cref="T:Microsoft.Xna.Framework.Vector2"/> that contains the specified vector inversion.
            </summary>
            <param name="value">Source <see cref="T:Microsoft.Xna.Framework.Vector2"/>.</param>
            <returns>The result of the vector inversion.</returns>
        </member>
        <member name="M:Microsoft.Xna.Framework.Vector2.Negate(Microsoft.Xna.Framework.Vector2@,Microsoft.Xna.Framework.Vector2@)">
            <summary>
            Creates a new <see cref="T:Microsoft.Xna.Framework.Vector2"/> that contains the specified vector inversion.
            </summary>
            <param name="value">Source <see cref="T:Microsoft.Xna.Framework.Vector2"/>.</param>
            <param name="result">The result of the vector inversion as an output parameter.</param>
        </member>
        <member name="M:Microsoft.Xna.Framework.Vector2.Normalize">
            <summary>
            Turns this <see cref="T:Microsoft.Xna.Framework.Vector2"/> to a unit vector with the same direction.
            </summary>
        </member>
        <member name="M:Microsoft.Xna.Framework.Vector2.Normalize(Microsoft.Xna.Framework.Vector2)">
            <summary>
            Creates a new <see cref="T:Microsoft.Xna.Framework.Vector2"/> that contains a normalized values from another vector.
            </summary>
            <param name="value">Source <see cref="T:Microsoft.Xna.Framework.Vector2"/>.</param>
            <returns>Unit vector.</returns>
        </member>
        <member name="M:Microsoft.Xna.Framework.Vector2.Normalize(Microsoft.Xna.Framework.Vector2@,Microsoft.Xna.Framework.Vector2@)">
            <summary>
            Creates a new <see cref="T:Microsoft.Xna.Framework.Vector2"/> that contains a normalized values from another vector.
            </summary>
            <param name="value">Source <see cref="T:Microsoft.Xna.Framework.Vector2"/>.</param>
            <param name="result">Unit vector as an output parameter.</param>
        </member>
        <member name="M:Microsoft.Xna.Framework.Vector2.Reflect(Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Vector2)">
            <summary>
            Creates a new <see cref="T:Microsoft.Xna.Framework.Vector2"/> that contains reflect vector of the given vector and normal.
            </summary>
            <param name="vector">Source <see cref="T:Microsoft.Xna.Framework.Vector2"/>.</param>
            <param name="normal">Reflection normal.</param>
            <returns>Reflected vector.</returns>
        </member>
        <member name="M:Microsoft.Xna.Framework.Vector2.Reflect(Microsoft.Xna.Framework.Vector2@,Microsoft.Xna.Framework.Vector2@,Microsoft.Xna.Framework.Vector2@)">
            <summary>
            Creates a new <see cref="T:Microsoft.Xna.Framework.Vector2"/> that contains reflect vector of the given vector and normal.
            </summary>
            <param name="vector">Source <see cref="T:Microsoft.Xna.Framework.Vector2"/>.</param>
            <param name="normal">Reflection normal.</param>
            <param name="result">Reflected vector as an output parameter.</param>
        </member>
        <member name="M:Microsoft.Xna.Framework.Vector2.Round">
            <summary>
            Round the members of this <see cref="T:Microsoft.Xna.Framework.Vector2"/> to the nearest integer value.
            </summary>
        </member>
        <member name="M:Microsoft.Xna.Framework.Vector2.Round(Microsoft.Xna.Framework.Vector2)">
            <summary>
            Creates a new <see cref="T:Microsoft.Xna.Framework.Vector2"/> that contains members from another vector rounded to the nearest integer value.
            </summary>
            <param name="value">Source <see cref="T:Microsoft.Xna.Framework.Vector2"/>.</param>
            <returns>The rounded <see cref="T:Microsoft.Xna.Framework.Vector2"/>.</returns>
        </member>
        <member name="M:Microsoft.Xna.Framework.Vector2.Round(Microsoft.Xna.Framework.Vector2@,Microsoft.Xna.Framework.Vector2@)">
            <summary>
            Creates a new <see cref="T:Microsoft.Xna.Framework.Vector2"/> that contains members from another vector rounded to the nearest integer value.
            </summary>
            <param name="value">Source <see cref="T:Microsoft.Xna.Framework.Vector2"/>.</param>
            <param name="result">The rounded <see cref="T:Microsoft.Xna.Framework.Vector2"/>.</param>
        </member>
        <member name="M:Microsoft.Xna.Framework.Vector2.SmoothStep(Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Vector2,System.Single)">
            <summary>
            Creates a new <see cref="T:Microsoft.Xna.Framework.Vector2"/> that contains cubic interpolation of the specified vectors.
            </summary>
            <param name="value1">Source <see cref="T:Microsoft.Xna.Framework.Vector2"/>.</param>
            <param name="value2">Source <see cref="T:Microsoft.Xna.Framework.Vector2"/>.</param>
            <param name="amount">Weighting value.</param>
            <returns>Cubic interpolation of the specified vectors.</returns>
        </member>
        <member name="M:Microsoft.Xna.Framework.Vector2.SmoothStep(Microsoft.Xna.Framework.Vector2@,Microsoft.Xna.Framework.Vector2@,System.Single,Microsoft.Xna.Framework.Vector2@)">
            <summary>
            Creates a new <see cref="T:Microsoft.Xna.Framework.Vector2"/> that contains cubic interpolation of the specified vectors.
            </summary>
            <param name="value1">Source <see cref="T:Microsoft.Xna.Framework.Vector2"/>.</param>
            <param name="value2">Source <see cref="T:Microsoft.Xna.Framework.Vector2"/>.</param>
            <param name="amount">Weighting value.</param>
            <param name="result">Cubic interpolation of the specified vectors as an output parameter.</param>
        </member>
        <member name="M:Microsoft.Xna.Framework.Vector2.Subtract(Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Vector2)">
            <summary>
            Creates a new <see cref="T:Microsoft.Xna.Framework.Vector2"/> that contains subtraction of on <see cref="T:Microsoft.Xna.Framework.Vector2"/> from a another.
            </summary>
            <param name="left">Source <see cref="T:Microsoft.Xna.Framework.Vector2"/>.</param>
            <param name="right">Source <see cref="T:Microsoft.Xna.Framework.Vector2"/>.</param>
            <returns>The result of the vector subtraction.</returns>
        </member>
        <member name="M:Microsoft.Xna.Framework.Vector2.Subtract(Microsoft.Xna.Framework.Vector2@,Microsoft.Xna.Framework.Vector2@,Microsoft.Xna.Framework.Vector2@)">
            <summary>
            Creates a new <see cref="T:Microsoft.Xna.Framework.Vector2"/> that contains subtraction of on <see cref="T:Microsoft.Xna.Framework.Vector2"/> from a another.
            </summary>
            <param name="left">Source <see cref="T:Microsoft.Xna.Framework.Vector2"/>.</param>
            <param name="right">Source <see cref="T:Microsoft.Xna.Framework.Vector2"/>.</param>
            <param name="result">The result of the vector subtraction as an output parameter.</param>
        </member>
        <member name="M:Microsoft.Xna.Framework.Vector2.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> representation of this <see cref="T:Microsoft.Xna.Framework.Vector2"/> in the format:
            {X:[<see cref="F:Microsoft.Xna.Framework.Vector2.X"/>] Y:[<see cref="F:Microsoft.Xna.Framework.Vector2.Y"/>]}
            </summary>
            <returns>A <see cref="T:System.String"/> representation of this <see cref="T:Microsoft.Xna.Framework.Vector2"/>.</returns>
        </member>
        <member name="M:Microsoft.Xna.Framework.Vector2.ToPoint">
            <summary>
            Gets a <see cref="T:Microsoft.Xna.Framework.Point"/> representation for this object.
            </summary>
            <returns>A <see cref="T:Microsoft.Xna.Framework.Point"/> representation for this object.</returns>
        </member>
        <member name="M:Microsoft.Xna.Framework.Vector2.Transform(Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Matrix)">
            <summary>
            Creates a new <see cref="T:Microsoft.Xna.Framework.Vector2"/> that contains a transformation of 2d-vector by the specified <see cref="T:Microsoft.Xna.Framework.Matrix"/>.
            </summary>
            <param name="position">Source <see cref="T:Microsoft.Xna.Framework.Vector2"/>.</param>
            <param name="matrix">The transformation <see cref="T:Microsoft.Xna.Framework.Matrix"/>.</param>
            <returns>Transformed <see cref="T:Microsoft.Xna.Framework.Vector2"/>.</returns>
        </member>
        <member name="M:Microsoft.Xna.Framework.Vector2.Transform(Microsoft.Xna.Framework.Vector2@,Microsoft.Xna.Framework.Matrix@,Microsoft.Xna.Framework.Vector2@)">
            <summary>
            Creates a new <see cref="T:Microsoft.Xna.Framework.Vector2"/> that contains a transformation of 2d-vector by the specified <see cref="T:Microsoft.Xna.Framework.Matrix"/>.
            </summary>
            <param name="position">Source <see cref="T:Microsoft.Xna.Framework.Vector2"/>.</param>
            <param name="matrix">The transformation <see cref="T:Microsoft.Xna.Framework.Matrix"/>.</param>
            <param name="result">Transformed <see cref="T:Microsoft.Xna.Framework.Vector2"/> as an output parameter.</param>
        </member>
        <member name="M:Microsoft.Xna.Framework.Vector2.Transform(Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Quaternion)">
            <summary>
            Creates a new <see cref="T:Microsoft.Xna.Framework.Vector2"/> that contains a transformation of 2d-vector by the specified <see cref="T:Microsoft.Xna.Framework.Quaternion"/>, representing the rotation.
            </summary>
            <param name="value">Source <see cref="T:Microsoft.Xna.Framework.Vector2"/>.</param>
            <param name="rotation">The <see cref="T:Microsoft.Xna.Framework.Quaternion"/> which contains rotation transformation.</param>
            <returns>Transformed <see cref="T:Microsoft.Xna.Framework.Vector2"/>.</returns>
        </member>
        <member name="M:Microsoft.Xna.Framework.Vector2.Transform(Microsoft.Xna.Framework.Vector2@,Microsoft.Xna.Framework.Quaternion@,Microsoft.Xna.Framework.Vector2@)">
            <summary>
            Creates a new <see cref="T:Microsoft.Xna.Framework.Vector2"/> that contains a transformation of 2d-vector by the specified <see cref="T:Microsoft.Xna.Framework.Quaternion"/>, representing the rotation.
            </summary>
            <param name="value">Source <see cref="T:Microsoft.Xna.Framework.Vector2"/>.</param>
            <param name="rotation">The <see cref="T:Microsoft.Xna.Framework.Quaternion"/> which contains rotation transformation.</param>
            <param name="result">Transformed <see cref="T:Microsoft.Xna.Framework.Vector2"/> as an output parameter.</param>
        </member>
        <member name="M:Microsoft.Xna.Framework.Vector2.Transform(Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Complex)">
            <summary>
            Creates a new <see cref="T:Microsoft.Xna.Framework.Vector2"/> that contains a transformation of 2d-vector by the specified <see cref="T:Microsoft.Xna.Framework.Complex"/> number.
            </summary>
            <param name="value">Source <see cref="T:Microsoft.Xna.Framework.Vector2"/>.</param>
            <param name="complex">The transformation <see cref="T:Microsoft.Xna.Framework.Complex"/> number which contains rotation and magnitude transformation.</param>
            <returns>Transformed <see cref="T:Microsoft.Xna.Framework.Vector2"/>.</returns>
        </member>
        <member name="M:Microsoft.Xna.Framework.Vector2.Transform(Microsoft.Xna.Framework.Vector2@,Microsoft.Xna.Framework.Complex@,Microsoft.Xna.Framework.Vector2@)">
            <summary>
            Creates a new <see cref="T:Microsoft.Xna.Framework.Vector2"/> that contains a transformation of 2d-vector by the specified <see cref="T:Microsoft.Xna.Framework.Complex"/> number.
            </summary>
            <param name="value">Source <see cref="T:Microsoft.Xna.Framework.Vector2"/>.</param>
            <param name="complex">The transformation <see cref="T:Microsoft.Xna.Framework.Complex"/> which contains rotation and magnitude transformation.</param>
            <param name="result">Transformed <see cref="T:Microsoft.Xna.Framework.Vector2"/> as an output parameter.</param>
        </member>
        <member name="M:Microsoft.Xna.Framework.Vector2.Transform(Microsoft.Xna.Framework.Vector2[],System.Int32,Microsoft.Xna.Framework.Matrix@,Microsoft.Xna.Framework.Vector2[],System.Int32,System.Int32)">
            <summary>
            Apply transformation on vectors within array of <see cref="T:Microsoft.Xna.Framework.Vector2"/> by the specified <see cref="T:Microsoft.Xna.Framework.Matrix"/> and places the results in an another array.
            </summary>
            <param name="sourceArray">Source array.</param>
            <param name="sourceIndex">The starting index of transformation in the source array.</param>
            <param name="matrix">The transformation <see cref="T:Microsoft.Xna.Framework.Matrix"/>.</param>
            <param name="destinationArray">Destination array.</param>
            <param name="destinationIndex">The starting index in the destination array, where the first <see cref="T:Microsoft.Xna.Framework.Vector2"/> should be written.</param>
            <param name="length">The number of vectors to be transformed.</param>
        </member>
        <member name="M:Microsoft.Xna.Framework.Vector2.Transform(Microsoft.Xna.Framework.Vector2[],System.Int32,Microsoft.Xna.Framework.Quaternion@,Microsoft.Xna.Framework.Vector2[],System.Int32,System.Int32)">
            <summary>
            Apply transformation on vectors within array of <see cref="T:Microsoft.Xna.Framework.Vector2"/> by the specified <see cref="T:Microsoft.Xna.Framework.Quaternion"/> and places the results in an another array.
            </summary>
            <param name="sourceArray">Source array.</param>
            <param name="sourceIndex">The starting index of transformation in the source array.</param>
            <param name="rotation">The <see cref="T:Microsoft.Xna.Framework.Quaternion"/> which contains rotation transformation.</param>
            <param name="destinationArray">Destination array.</param>
            <param name="destinationIndex">The starting index in the destination array, where the first <see cref="T:Microsoft.Xna.Framework.Vector2"/> should be written.</param>
            <param name="length">The number of vectors to be transformed.</param>
        </member>
        <member name="M:Microsoft.Xna.Framework.Vector2.Transform(Microsoft.Xna.Framework.Vector2[],System.Int32,Microsoft.Xna.Framework.Complex@,Microsoft.Xna.Framework.Vector2[],System.Int32,System.Int32)">
            <summary>
            Apply transformation on vectors within array of <see cref="T:Microsoft.Xna.Framework.Vector2"/> by the specified <see cref="T:Microsoft.Xna.Framework.Complex"/> number and places the results in an another array.
            </summary>
            <param name="sourceArray">Source array.</param>
            <param name="sourceIndex">The starting index of transformation in the source array.</param>
            <param name="complex">The transformation <see cref="T:Microsoft.Xna.Framework.Complex"/> number.</param>
            <param name="destinationArray">Destination array.</param>
            <param name="destinationIndex">The starting index in the destination array, where the first <see cref="T:Microsoft.Xna.Framework.Vector2"/> should be written.</param>
            <param name="length">The number of vectors to be transformed.</param>
        </member>
        <member name="M:Microsoft.Xna.Framework.Vector2.Transform(Microsoft.Xna.Framework.Vector2[],Microsoft.Xna.Framework.Matrix@,Microsoft.Xna.Framework.Vector2[])">
            <summary>
            Apply transformation on all vectors within array of <see cref="T:Microsoft.Xna.Framework.Vector2"/> by the specified <see cref="T:Microsoft.Xna.Framework.Matrix"/> and places the results in an another array.
            </summary>
            <param name="sourceArray">Source array.</param>
            <param name="matrix">The transformation <see cref="T:Microsoft.Xna.Framework.Matrix"/>.</param>
            <param name="destinationArray">Destination array.</param>
        </member>
        <member name="M:Microsoft.Xna.Framework.Vector2.Transform(Microsoft.Xna.Framework.Vector2[],Microsoft.Xna.Framework.Quaternion@,Microsoft.Xna.Framework.Vector2[])">
            <summary>
            Apply transformation on all vectors within array of <see cref="T:Microsoft.Xna.Framework.Vector2"/> by the specified <see cref="T:Microsoft.Xna.Framework.Quaternion"/> and places the results in an another array.
            </summary>
            <param name="sourceArray">Source array.</param>
            <param name="rotation">The <see cref="T:Microsoft.Xna.Framework.Quaternion"/> which contains rotation transformation.</param>
            <param name="destinationArray">Destination array.</param>
        </member>
        <member name="M:Microsoft.Xna.Framework.Vector2.TransformNormal(Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Matrix)">
            <summary>
            Creates a new <see cref="T:Microsoft.Xna.Framework.Vector2"/> that contains a transformation of the specified normal by the specified <see cref="T:Microsoft.Xna.Framework.Matrix"/>.
            </summary>
            <param name="normal">Source <see cref="T:Microsoft.Xna.Framework.Vector2"/> which represents a normal vector.</param>
            <param name="matrix">The transformation <see cref="T:Microsoft.Xna.Framework.Matrix"/>.</param>
            <returns>Transformed normal.</returns>
        </member>
        <member name="M:Microsoft.Xna.Framework.Vector2.Transform(Microsoft.Xna.Framework.Vector2[],Microsoft.Xna.Framework.Complex@,Microsoft.Xna.Framework.Vector2[])">
            <summary>
            Apply transformation on all vectors within array of <see cref="T:Microsoft.Xna.Framework.Vector2"/> by the specified <see cref="T:Microsoft.Xna.Framework.Complex"/> number and places the results in an another array.
            </summary>
            <param name="sourceArray">Source array.</param>
            <param name="complex">The <see cref="T:Microsoft.Xna.Framework.Complex"/> number which contains rotation and magnitude transformation.</param>
            <param name="destinationArray">Destination array.</param>
        </member>
        <member name="M:Microsoft.Xna.Framework.Vector2.TransformNormal(Microsoft.Xna.Framework.Vector2@,Microsoft.Xna.Framework.Matrix@,Microsoft.Xna.Framework.Vector2@)">
            <summary>
            Creates a new <see cref="T:Microsoft.Xna.Framework.Vector2"/> that contains a transformation of the specified normal by the specified <see cref="T:Microsoft.Xna.Framework.Matrix"/>.
            </summary>
            <param name="normal">Source <see cref="T:Microsoft.Xna.Framework.Vector2"/> which represents a normal vector.</param>
            <param name="matrix">The transformation <see cref="T:Microsoft.Xna.Framework.Matrix"/>.</param>
            <param name="result">Transformed normal as an output parameter.</param>
        </member>
        <member name="M:Microsoft.Xna.Framework.Vector2.TransformNormal(Microsoft.Xna.Framework.Vector2[],System.Int32,Microsoft.Xna.Framework.Matrix@,Microsoft.Xna.Framework.Vector2[],System.Int32,System.Int32)">
            <summary>
            Apply transformation on normals within array of <see cref="T:Microsoft.Xna.Framework.Vector2"/> by the specified <see cref="T:Microsoft.Xna.Framework.Matrix"/> and places the results in an another array.
            </summary>
            <param name="sourceArray">Source array.</param>
            <param name="sourceIndex">The starting index of transformation in the source array.</param>
            <param name="matrix">The transformation <see cref="T:Microsoft.Xna.Framework.Matrix"/>.</param>
            <param name="destinationArray">Destination array.</param>
            <param name="destinationIndex">The starting index in the destination array, where the first <see cref="T:Microsoft.Xna.Framework.Vector2"/> should be written.</param>
            <param name="length">The number of normals to be transformed.</param>
        </member>
        <member name="M:Microsoft.Xna.Framework.Vector2.TransformNormal(Microsoft.Xna.Framework.Vector2[],Microsoft.Xna.Framework.Matrix@,Microsoft.Xna.Framework.Vector2[])">
            <summary>
            Apply transformation on all normals within array of <see cref="T:Microsoft.Xna.Framework.Vector2"/> by the specified <see cref="T:Microsoft.Xna.Framework.Matrix"/> and places the results in an another array.
            </summary>
            <param name="sourceArray">Source array.</param>
            <param name="matrix">The transformation <see cref="T:Microsoft.Xna.Framework.Matrix"/>.</param>
            <param name="destinationArray">Destination array.</param>
        </member>
        <member name="M:Microsoft.Xna.Framework.Vector2.Deconstruct(System.Single@,System.Single@)">
            <summary>
            Deconstruction method for <see cref="T:Microsoft.Xna.Framework.Vector2"/>.
            </summary>
            <param name="x"></param>
            <param name="y"></param>
        </member>
        <member name="T:Microsoft.Xna.Framework.Vector3">
            <summary>
            Describes a 3D-vector.
            </summary>
        </member>
        <member name="F:Microsoft.Xna.Framework.Vector3.X">
            <summary>
            The x coordinate of this <see cref="T:Microsoft.Xna.Framework.Vector3"/>.
            </summary>
        </member>
        <member name="F:Microsoft.Xna.Framework.Vector3.Y">
            <summary>
            The y coordinate of this <see cref="T:Microsoft.Xna.Framework.Vector3"/>.
            </summary>
        </member>
        <member name="F:Microsoft.Xna.Framework.Vector3.Z">
            <summary>
            The z coordinate of this <see cref="T:Microsoft.Xna.Framework.Vector3"/>.
            </summary>
        </member>
        <member name="P:Microsoft.Xna.Framework.Vector3.Zero">
            <summary>
            Returns a <see cref="T:Microsoft.Xna.Framework.Vector3"/> with components 0, 0, 0.
            </summary>
        </member>
        <member name="P:Microsoft.Xna.Framework.Vector3.One">
            <summary>
            Returns a <see cref="T:Microsoft.Xna.Framework.Vector3"/> with components 1, 1, 1.
            </summary>
        </member>
        <member name="P:Microsoft.Xna.Framework.Vector3.UnitX">
            <summary>
            Returns a <see cref="T:Microsoft.Xna.Framework.Vector3"/> with components 1, 0, 0.
            </summary>
        </member>
        <member name="P:Microsoft.Xna.Framework.Vector3.UnitY">
            <summary>
            Returns a <see cref="T:Microsoft.Xna.Framework.Vector3"/> with components 0, 1, 0.
            </summary>
        </member>
        <member name="P:Microsoft.Xna.Framework.Vector3.UnitZ">
            <summary>
            Returns a <see cref="T:Microsoft.Xna.Framework.Vector3"/> with components 0, 0, 1.
            </summary>
        </member>
        <member name="P:Microsoft.Xna.Framework.Vector3.Up">
            <summary>
            Returns a <see cref="T:Microsoft.Xna.Framework.Vector3"/> with components 0, 1, 0.
            </summary>
        </member>
        <member name="P:Microsoft.Xna.Framework.Vector3.Down">
            <summary>
            Returns a <see cref="T:Microsoft.Xna.Framework.Vector3"/> with components 0, -1, 0.
            </summary>
        </member>
        <member name="P:Microsoft.Xna.Framework.Vector3.Right">
            <summary>
            Returns a <see cref="T:Microsoft.Xna.Framework.Vector3"/> with components 1, 0, 0.
            </summary>
        </member>
        <member name="P:Microsoft.Xna.Framework.Vector3.Left">
            <summary>
            Returns a <see cref="T:Microsoft.Xna.Framework.Vector3"/> with components -1, 0, 0.
            </summary>
        </member>
        <member name="P:Microsoft.Xna.Framework.Vector3.Forward">
            <summary>
            Returns a <see cref="T:Microsoft.Xna.Framework.Vector3"/> with components 0, 0, -1.
            </summary>
        </member>
        <member name="P:Microsoft.Xna.Framework.Vector3.Backward">
            <summary>
            Returns a <see cref="T:Microsoft.Xna.Framework.Vector3"/> with components 0, 0, 1.
            </summary>
        </member>
        <member name="M:Microsoft.Xna.Framework.Vector3.#ctor(System.Single,System.Single,System.Single)">
            <summary>
            Constructs a 3d vector with X, Y and Z from three values.
            </summary>
            <param name="x">The x coordinate in 3d-space.</param>
            <param name="y">The y coordinate in 3d-space.</param>
            <param name="z">The z coordinate in 3d-space.</param>
        </member>
        <member name="M:Microsoft.Xna.Framework.Vector3.#ctor(System.Single)">
            <summary>
            Constructs a 3d vector with X, Y and Z set to the same value.
            </summary>
            <param name="value">The x, y and z coordinates in 3d-space.</param>
        </member>
        <member name="M:Microsoft.Xna.Framework.Vector3.#ctor(Microsoft.Xna.Framework.Vector2,System.Single)">
            <summary>
            Constructs a 3d vector with X, Y from <see cref="T:Microsoft.Xna.Framework.Vector2"/> and Z from a scalar.
            </summary>
            <param name="value">The x and y coordinates in 3d-space.</param>
            <param name="z">The z coordinate in 3d-space.</param>
        </member>
        <member name="M:Microsoft.Xna.Framework.Vector3.Add(Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Vector3)">
            <summary>
            Performs vector addition on <paramref name="left"/> and <paramref name="right"/>.
            </summary>
            <param name="left">The first vector to add.</param>
            <param name="right">The second vector to add.</param>
            <returns>The result of the vector addition.</returns>
        </member>
        <member name="M:Microsoft.Xna.Framework.Vector3.Add(Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Vector3@)">
            <summary>
            Performs vector addition on <paramref name="left"/> and
            <paramref name="right"/>, storing the result of the
            addition in <paramref name="result"/>.
            </summary>
            <param name="left">The first vector to add.</param>
            <param name="right">The second vector to add.</param>
            <param name="result">The result of the vector addition.</param>
        </member>
        <member name="M:Microsoft.Xna.Framework.Vector3.Barycentric(Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Vector3,System.Single,System.Single)">
            <summary>
            Creates a new <see cref="T:Microsoft.Xna.Framework.Vector3"/> that contains the cartesian coordinates of a vector specified in barycentric coordinates and relative to 3d-triangle.
            </summary>
            <param name="value1">The first vector of 3d-triangle.</param>
            <param name="value2">The second vector of 3d-triangle.</param>
            <param name="value3">The third vector of 3d-triangle.</param>
            <param name="amount1">Barycentric scalar <c>b2</c> which represents a weighting factor towards second vector of 3d-triangle.</param>
            <param name="amount2">Barycentric scalar <c>b3</c> which represents a weighting factor towards third vector of 3d-triangle.</param>
            <returns>The cartesian translation of barycentric coordinates.</returns>
        </member>
        <member name="M:Microsoft.Xna.Framework.Vector3.Barycentric(Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Vector3@,System.Single,System.Single,Microsoft.Xna.Framework.Vector3@)">
            <summary>
            Creates a new <see cref="T:Microsoft.Xna.Framework.Vector3"/> that contains the cartesian coordinates of a vector specified in barycentric coordinates and relative to 3d-triangle.
            </summary>
            <param name="value1">The first vector of 3d-triangle.</param>
            <param name="value2">The second vector of 3d-triangle.</param>
            <param name="value3">The third vector of 3d-triangle.</param>
            <param name="amount1">Barycentric scalar <c>b2</c> which represents a weighting factor towards second vector of 3d-triangle.</param>
            <param name="amount2">Barycentric scalar <c>b3</c> which represents a weighting factor towards third vector of 3d-triangle.</param>
            <param name="result">The cartesian translation of barycentric coordinates as an output parameter.</param>
        </member>
        <member name="M:Microsoft.Xna.Framework.Vector3.CatmullRom(Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Vector3,System.Single)">
            <summary>
            Creates a new <see cref="T:Microsoft.Xna.Framework.Vector3"/> that contains CatmullRom interpolation of the specified vectors.
            </summary>
            <param name="value1">The first vector in interpolation.</param>
            <param name="value2">The second vector in interpolation.</param>
            <param name="value3">The third vector in interpolation.</param>
            <param name="value4">The fourth vector in interpolation.</param>
            <param name="amount">Weighting factor.</param>
            <returns>The result of CatmullRom interpolation.</returns>
        </member>
        <member name="M:Microsoft.Xna.Framework.Vector3.CatmullRom(Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Vector3@,System.Single,Microsoft.Xna.Framework.Vector3@)">
            <summary>
            Creates a new <see cref="T:Microsoft.Xna.Framework.Vector3"/> that contains CatmullRom interpolation of the specified vectors.
            </summary>
            <param name="value1">The first vector in interpolation.</param>
            <param name="value2">The second vector in interpolation.</param>
            <param name="value3">The third vector in interpolation.</param>
            <param name="value4">The fourth vector in interpolation.</param>
            <param name="amount">Weighting factor.</param>
            <param name="result">The result of CatmullRom interpolation as an output parameter.</param>
        </member>
        <member name="M:Microsoft.Xna.Framework.Vector3.Ceiling">
            <summary>
            Round the members of this <see cref="T:Microsoft.Xna.Framework.Vector3"/> towards positive infinity.
            </summary>
        </member>
        <member name="M:Microsoft.Xna.Framework.Vector3.Ceiling(Microsoft.Xna.Framework.Vector3)">
            <summary>
            Creates a new <see cref="T:Microsoft.Xna.Framework.Vector3"/> that contains members from another vector rounded towards positive infinity.
            </summary>
            <param name="value">Source <see cref="T:Microsoft.Xna.Framework.Vector3"/>.</param>
            <returns>The rounded <see cref="T:Microsoft.Xna.Framework.Vector3"/>.</returns>
        </member>
        <member name="M:Microsoft.Xna.Framework.Vector3.Ceiling(Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Vector3@)">
            <summary>
            Creates a new <see cref="T:Microsoft.Xna.Framework.Vector3"/> that contains members from another vector rounded towards positive infinity.
            </summary>
            <param name="value">Source <see cref="T:Microsoft.Xna.Framework.Vector3"/>.</param>
            <param name="result">The rounded <see cref="T:Microsoft.Xna.Framework.Vector3"/>.</param>
        </member>
        <member name="M:Microsoft.Xna.Framework.Vector3.Clamp(Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Vector3)">
            <summary>
            Clamps the specified value within a range.
            </summary>
            <param name="value1">The value to clamp.</param>
            <param name="min">The min value.</param>
            <param name="max">The max value.</param>
            <returns>The clamped value.</returns>
        </member>
        <member name="M:Microsoft.Xna.Framework.Vector3.Clamp(Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Vector3@)">
            <summary>
            Clamps the specified value within a range.
            </summary>
            <param name="value1">The value to clamp.</param>
            <param name="min">The min value.</param>
            <param name="max">The max value.</param>
            <param name="result">The clamped value as an output parameter.</param>
        </member>
        <member name="M:Microsoft.Xna.Framework.Vector3.Cross(Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Vector3)">
            <summary>
            Computes the cross product of two vectors.
            </summary>
            <param name="left">The first vector.</param>
            <param name="right">The second vector.</param>
            <returns>The cross product of two vectors.</returns>
        </member>
        <member name="M:Microsoft.Xna.Framework.Vector3.Cross(Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Vector3@)">
            <summary>
            Computes the cross product of two vectors.
            </summary>
            <param name="left">The first vector.</param>
            <param name="right">The second vector.</param>
            <param name="result">The cross product of two vectors as an output parameter.</param>
        </member>
        <member name="M:Microsoft.Xna.Framework.Vector3.Distance(Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Vector3)">
            <summary>
            Returns the distance between two vectors.
            </summary>
            <param name="value1">The first vector.</param>
            <param name="value2">The second vector.</param>
            <returns>The distance between two vectors.</returns>
        </member>
        <member name="M:Microsoft.Xna.Framework.Vector3.Distance(Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Vector3@,System.Single@)">
            <summary>
            Returns the distance between two vectors.
            </summary>
            <param name="value1">The first vector.</param>
            <param name="value2">The second vector.</param>
            <param name="result">The distance between two vectors as an output parameter.</param>
        </member>
        <member name="M:Microsoft.Xna.Framework.Vector3.DistanceSquared(Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Vector3)">
            <summary>
            Returns the squared distance between two vectors.
            </summary>
            <param name="value1">The first vector.</param>
            <param name="value2">The second vector.</param>
            <returns>The squared distance between two vectors.</returns>
        </member>
        <member name="M:Microsoft.Xna.Framework.Vector3.DistanceSquared(Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Vector3@,System.Single@)">
            <summary>
            Returns the squared distance between two vectors.
            </summary>
            <param name="value1">The first vector.</param>
            <param name="value2">The second vector.</param>
            <param name="result">The squared distance between two vectors as an output parameter.</param>
        </member>
        <member name="M:Microsoft.Xna.Framework.Vector3.Divide(Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Vector3)">
            <summary>
            Divides the components of a <see cref="T:Microsoft.Xna.Framework.Vector3"/> by the components of another <see cref="T:Microsoft.Xna.Framework.Vector3"/>.
            </summary>
            <param name="left">Source <see cref="T:Microsoft.Xna.Framework.Vector3"/>.</param>
            <param name="right">Divisor <see cref="T:Microsoft.Xna.Framework.Vector3"/>.</param>
            <returns>The result of dividing the vectors.</returns>
        </member>
        <member name="M:Microsoft.Xna.Framework.Vector3.Divide(Microsoft.Xna.Framework.Vector3,System.Single)">
            <summary>
            Divides the components of a <see cref="T:Microsoft.Xna.Framework.Vector3"/> by a scalar.
            </summary>
            <param name="left">Source <see cref="T:Microsoft.Xna.Framework.Vector3"/>.</param>
            <param name="right">Divisor scalar.</param>
            <returns>The result of dividing a vector by a scalar.</returns>
        </member>
        <member name="M:Microsoft.Xna.Framework.Vector3.Divide(Microsoft.Xna.Framework.Vector3@,System.Single,Microsoft.Xna.Framework.Vector3@)">
            <summary>
            Divides the components of a <see cref="T:Microsoft.Xna.Framework.Vector3"/> by a scalar.
            </summary>
            <param name="left">Source <see cref="T:Microsoft.Xna.Framework.Vector3"/>.</param>
            <param name="right">Divisor scalar.</param>
            <param name="result">The result of dividing a vector by a scalar as an output parameter.</param>
        </member>
        <member name="M:Microsoft.Xna.Framework.Vector3.Divide(Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Vector3@)">
            <summary>
            Divides the components of a <see cref="T:Microsoft.Xna.Framework.Vector3"/> by the components of another <see cref="T:Microsoft.Xna.Framework.Vector3"/>.
            </summary>
            <param name="left">Source <see cref="T:Microsoft.Xna.Framework.Vector3"/>.</param>
            <param name="right">Divisor <see cref="T:Microsoft.Xna.Framework.Vector3"/>.</param>
            <param name="result">The result of dividing the vectors as an output parameter.</param>
        </member>
        <member name="M:Microsoft.Xna.Framework.Vector3.Dot(Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Vector3)">
            <summary>
            Returns a dot product of two vectors.
            </summary>
            <param name="left">The first vector.</param>
            <param name="right">The second vector.</param>
            <returns>The dot product of two vectors.</returns>
        </member>
        <member name="M:Microsoft.Xna.Framework.Vector3.Dot(Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Vector3@,System.Single@)">
            <summary>
            Returns a dot product of two vectors.
            </summary>
            <param name="left">The first vector.</param>
            <param name="right">The second vector.</param>
            <param name="result">The dot product of two vectors as an output parameter.</param>
        </member>
        <member name="M:Microsoft.Xna.Framework.Vector3.Equals(System.Object)">
            <summary>
            Compares whether current instance is equal to specified <see cref="T:System.Object"/>.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> to compare.</param>
            <returns><c>true</c> if the instances are equal; <c>false</c> otherwise.</returns>
        </member>
        <member name="M:Microsoft.Xna.Framework.Vector3.Equals(Microsoft.Xna.Framework.Vector3)">
            <summary>
            Compares whether current instance is equal to specified <see cref="T:Microsoft.Xna.Framework.Vector3"/>.
            </summary>
            <param name="other">The <see cref="T:Microsoft.Xna.Framework.Vector3"/> to compare.</param>
            <returns><c>true</c> if the instances are equal; <c>false</c> otherwise.</returns>
        </member>
        <member name="M:Microsoft.Xna.Framework.Vector3.Floor">
            <summary>
            Round the members of this <see cref="T:Microsoft.Xna.Framework.Vector3"/> towards negative infinity.
            </summary>
        </member>
        <member name="M:Microsoft.Xna.Framework.Vector3.Floor(Microsoft.Xna.Framework.Vector3)">
            <summary>
            Creates a new <see cref="T:Microsoft.Xna.Framework.Vector3"/> that contains members from another vector rounded towards negative infinity.
            </summary>
            <param name="value">Source <see cref="T:Microsoft.Xna.Framework.Vector3"/>.</param>
            <returns>The rounded <see cref="T:Microsoft.Xna.Framework.Vector3"/>.</returns>
        </member>
        <member name="M:Microsoft.Xna.Framework.Vector3.Floor(Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Vector3@)">
            <summary>
            Creates a new <see cref="T:Microsoft.Xna.Framework.Vector3"/> that contains members from another vector rounded towards negative infinity.
            </summary>
            <param name="value">Source <see cref="T:Microsoft.Xna.Framework.Vector3"/>.</param>
            <param name="result">The rounded <see cref="T:Microsoft.Xna.Framework.Vector3"/>.</param>
        </member>
        <member name="M:Microsoft.Xna.Framework.Vector3.GetHashCode">
            <summary>
            Gets the hash code of this <see cref="T:Microsoft.Xna.Framework.Vector3"/>.
            </summary>
            <returns>Hash code of this <see cref="T:Microsoft.Xna.Framework.Vector3"/>.</returns>
        </member>
        <member name="M:Microsoft.Xna.Framework.Vector3.Hermite(Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Vector3,System.Single)">
            <summary>
            Creates a new <see cref="T:Microsoft.Xna.Framework.Vector3"/> that contains hermite spline interpolation.
            </summary>
            <param name="value1">The first position vector.</param>
            <param name="tangent1">The first tangent vector.</param>
            <param name="value2">The second position vector.</param>
            <param name="tangent2">The second tangent vector.</param>
            <param name="amount">Weighting factor.</param>
            <returns>The hermite spline interpolation vector.</returns>
        </member>
        <member name="M:Microsoft.Xna.Framework.Vector3.Hermite(Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Vector3@,System.Single,Microsoft.Xna.Framework.Vector3@)">
            <summary>
            Creates a new <see cref="T:Microsoft.Xna.Framework.Vector3"/> that contains hermite spline interpolation.
            </summary>
            <param name="value1">The first position vector.</param>
            <param name="tangent1">The first tangent vector.</param>
            <param name="value2">The second position vector.</param>
            <param name="tangent2">The second tangent vector.</param>
            <param name="amount">Weighting factor.</param>
            <param name="result">The hermite spline interpolation vector as an output parameter.</param>
        </member>
        <member name="M:Microsoft.Xna.Framework.Vector3.Length">
            <summary>
            Returns the length of this <see cref="T:Microsoft.Xna.Framework.Vector3"/>.
            </summary>
            <returns>The length of this <see cref="T:Microsoft.Xna.Framework.Vector3"/>.</returns>
        </member>
        <member name="M:Microsoft.Xna.Framework.Vector3.LengthSquared">
            <summary>
            Returns the squared length of this <see cref="T:Microsoft.Xna.Framework.Vector3"/>.
            </summary>
            <returns>The squared length of this <see cref="T:Microsoft.Xna.Framework.Vector3"/>.</returns>
        </member>
        <member name="M:Microsoft.Xna.Framework.Vector3.Lerp(Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Vector3,System.Single)">
            <summary>
            Creates a new <see cref="T:Microsoft.Xna.Framework.Vector3"/> that contains linear interpolation of the specified vectors.
            </summary>
            <param name="start">The first vector.</param>
            <param name="end">The second vector.</param>
            <param name="amount">Weighting value(between 0.0 and 1.0).</param>
            <returns>The result of linear interpolation of the specified vectors.</returns>
        </member>
        <member name="M:Microsoft.Xna.Framework.Vector3.Lerp(Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Vector3@,System.Single,Microsoft.Xna.Framework.Vector3@)">
            <summary>
            Creates a new <see cref="T:Microsoft.Xna.Framework.Vector3"/> that contains linear interpolation of the specified vectors.
            </summary>
            <param name="start">The first vector.</param>
            <param name="end">The second vector.</param>
            <param name="amount">Weighting value(between 0.0 and 1.0).</param>
            <param name="result">The result of linear interpolation of the specified vectors as an output parameter.</param>
        </member>
        <member name="M:Microsoft.Xna.Framework.Vector3.LerpPrecise(Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Vector3,System.Single)">
            <summary>
            Creates a new <see cref="T:Microsoft.Xna.Framework.Vector3"/> that contains linear interpolation of the specified vectors.
            Uses <see cref="M:Microsoft.Xna.Framework.MathHelper.LerpPrecise(System.Single,System.Single,System.Single)"/> on MathHelper for the interpolation.
            Less efficient but more precise compared to <see cref="M:Microsoft.Xna.Framework.Vector3.Lerp(Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Vector3,System.Single)"/>.
            See remarks section of <see cref="M:Microsoft.Xna.Framework.MathHelper.LerpPrecise(System.Single,System.Single,System.Single)"/> on MathHelper for more info.
            </summary>
            <param name="start">The first vector.</param>
            <param name="end">The second vector.</param>
            <param name="amount">Weighting value(between 0.0 and 1.0).</param>
            <returns>The result of linear interpolation of the specified vectors.</returns>
        </member>
        <member name="M:Microsoft.Xna.Framework.Vector3.LerpPrecise(Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Vector3@,System.Single,Microsoft.Xna.Framework.Vector3@)">
            <summary>
            Creates a new <see cref="T:Microsoft.Xna.Framework.Vector3"/> that contains linear interpolation of the specified vectors.
            Uses <see cref="M:Microsoft.Xna.Framework.MathHelper.LerpPrecise(System.Single,System.Single,System.Single)"/> on MathHelper for the interpolation.
            Less efficient but more precise compared to <see cref="M:Microsoft.Xna.Framework.Vector3.Lerp(Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Vector3@,System.Single,Microsoft.Xna.Framework.Vector3@)"/>.
            See remarks section of <see cref="M:Microsoft.Xna.Framework.MathHelper.LerpPrecise(System.Single,System.Single,System.Single)"/> on MathHelper for more info.
            </summary>
            <param name="start">The first vector.</param>
            <param name="end">The second vector.</param>
            <param name="amount">Weighting value(between 0.0 and 1.0).</param>
            <param name="result">The result of linear interpolation of the specified vectors as an output parameter.</param>
        </member>
        <member name="M:Microsoft.Xna.Framework.Vector3.Max(Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Vector3)">
            <summary>
            Creates a new <see cref="T:Microsoft.Xna.Framework.Vector3"/> that contains a maximal values from the two vectors.
            </summary>
            <param name="value1">The first vector.</param>
            <param name="value2">The second vector.</param>
            <returns>The <see cref="T:Microsoft.Xna.Framework.Vector3"/> with maximal values from the two vectors.</returns>
        </member>
        <member name="M:Microsoft.Xna.Framework.Vector3.Max(Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Vector3@)">
            <summary>
            Creates a new <see cref="T:Microsoft.Xna.Framework.Vector3"/> that contains a maximal values from the two vectors.
            </summary>
            <param name="value1">The first vector.</param>
            <param name="value2">The second vector.</param>
            <param name="result">The <see cref="T:Microsoft.Xna.Framework.Vector3"/> with maximal values from the two vectors as an output parameter.</param>
        </member>
        <member name="M:Microsoft.Xna.Framework.Vector3.Min(Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Vector3)">
            <summary>
            Creates a new <see cref="T:Microsoft.Xna.Framework.Vector3"/> that contains a minimal values from the two vectors.
            </summary>
            <param name="value1">The first vector.</param>
            <param name="value2">The second vector.</param>
            <returns>The <see cref="T:Microsoft.Xna.Framework.Vector3"/> with minimal values from the two vectors.</returns>
        </member>
        <member name="M:Microsoft.Xna.Framework.Vector3.Min(Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Vector3@)">
            <summary>
            Creates a new <see cref="T:Microsoft.Xna.Framework.Vector3"/> that contains a minimal values from the two vectors.
            </summary>
            <param name="value1">The first vector.</param>
            <param name="value2">The second vector.</param>
            <param name="result">The <see cref="T:Microsoft.Xna.Framework.Vector3"/> with minimal values from the two vectors as an output parameter.</param>
        </member>
        <member name="M:Microsoft.Xna.Framework.Vector3.Multiply(Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Vector3)">
            <summary>
            Creates a new <see cref="T:Microsoft.Xna.Framework.Vector3"/> that contains a multiplication of two vectors.
            </summary>
            <param name="left">Source <see cref="T:Microsoft.Xna.Framework.Vector3"/>.</param>
            <param name="right">Source <see cref="T:Microsoft.Xna.Framework.Vector3"/>.</param>
            <returns>The result of the vector multiplication.</returns>
        </member>
        <member name="M:Microsoft.Xna.Framework.Vector3.Multiply(Microsoft.Xna.Framework.Vector3,System.Single)">
            <summary>
            Creates a new <see cref="T:Microsoft.Xna.Framework.Vector3"/> that contains a multiplication of <see cref="T:Microsoft.Xna.Framework.Vector3"/> and a scalar.
            </summary>
            <param name="left">Source <see cref="T:Microsoft.Xna.Framework.Vector3"/>.</param>
            <param name="right">Scalar value.</param>
            <returns>The result of the vector multiplication with a scalar.</returns>
        </member>
        <member name="M:Microsoft.Xna.Framework.Vector3.Multiply(Microsoft.Xna.Framework.Vector3@,System.Single,Microsoft.Xna.Framework.Vector3@)">
            <summary>
            Creates a new <see cref="T:Microsoft.Xna.Framework.Vector3"/> that contains a multiplication of <see cref="T:Microsoft.Xna.Framework.Vector3"/> and a scalar.
            </summary>
            <param name="left">Source <see cref="T:Microsoft.Xna.Framework.Vector3"/>.</param>
            <param name="right">Scalar value.</param>
            <param name="result">The result of the multiplication with a scalar as an output parameter.</param>
        </member>
        <member name="M:Microsoft.Xna.Framework.Vector3.Multiply(Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Vector3@)">
            <summary>
            Creates a new <see cref="T:Microsoft.Xna.Framework.Vector3"/> that contains a multiplication of two vectors.
            </summary>
            <param name="left">Source <see cref="T:Microsoft.Xna.Framework.Vector3"/>.</param>
            <param name="right">Source <see cref="T:Microsoft.Xna.Framework.Vector3"/>.</param>
            <param name="result">The result of the vector multiplication as an output parameter.</param>
        </member>
        <member name="M:Microsoft.Xna.Framework.Vector3.Negate(Microsoft.Xna.Framework.Vector3)">
            <summary>
            Creates a new <see cref="T:Microsoft.Xna.Framework.Vector3"/> that contains the specified vector inversion.
            </summary>
            <param name="value">Source <see cref="T:Microsoft.Xna.Framework.Vector3"/>.</param>
            <returns>The result of the vector inversion.</returns>
        </member>
        <member name="M:Microsoft.Xna.Framework.Vector3.Negate(Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Vector3@)">
            <summary>
            Creates a new <see cref="T:Microsoft.Xna.Framework.Vector3"/> that contains the specified vector inversion.
            </summary>
            <param name="value">Source <see cref="T:Microsoft.Xna.Framework.Vector3"/>.</param>
            <param name="result">The result of the vector inversion as an output parameter.</param>
        </member>
        <member name="M:Microsoft.Xna.Framework.Vector3.Normalize">
            <summary>
            Turns this <see cref="T:Microsoft.Xna.Framework.Vector3"/> to a unit vector with the same direction.
            </summary>
        </member>
        <member name="M:Microsoft.Xna.Framework.Vector3.Normalize(Microsoft.Xna.Framework.Vector3)">
            <summary>
            Creates a new <see cref="T:Microsoft.Xna.Framework.Vector3"/> that contains a normalized values from another vector.
            </summary>
            <param name="value">Source <see cref="T:Microsoft.Xna.Framework.Vector3"/>.</param>
            <returns>Unit vector.</returns>
        </member>
        <member name="M:Microsoft.Xna.Framework.Vector3.Normalize(Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Vector3@)">
            <summary>
            Creates a new <see cref="T:Microsoft.Xna.Framework.Vector3"/> that contains a normalized values from another vector.
            </summary>
            <param name="value">Source <see cref="T:Microsoft.Xna.Framework.Vector3"/>.</param>
            <param name="result">Unit vector as an output parameter.</param>
        </member>
        <member name="M:Microsoft.Xna.Framework.Vector3.Reflect(Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Vector3)">
            <summary>
            Creates a new <see cref="T:Microsoft.Xna.Framework.Vector3"/> that contains reflect vector of the given vector and normal.
            </summary>
            <param name="vector">Source <see cref="T:Microsoft.Xna.Framework.Vector3"/>.</param>
            <param name="normal">Reflection normal.</param>
            <returns>Reflected vector.</returns>
        </member>
        <member name="M:Microsoft.Xna.Framework.Vector3.Reflect(Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Vector3@)">
            <summary>
            Creates a new <see cref="T:Microsoft.Xna.Framework.Vector3"/> that contains reflect vector of the given vector and normal.
            </summary>
            <param name="vector">Source <see cref="T:Microsoft.Xna.Framework.Vector3"/>.</param>
            <param name="normal">Reflection normal.</param>
            <param name="result">Reflected vector as an output parameter.</param>
        </member>
        <member name="M:Microsoft.Xna.Framework.Vector3.Round">
            <summary>
            Round the members of this <see cref="T:Microsoft.Xna.Framework.Vector3"/> towards the nearest integer value.
            </summary>
        </member>
        <member name="M:Microsoft.Xna.Framework.Vector3.Round(Microsoft.Xna.Framework.Vector3)">
            <summary>
            Creates a new <see cref="T:Microsoft.Xna.Framework.Vector3"/> that contains members from another vector rounded to the nearest integer value.
            </summary>
            <param name="value">Source <see cref="T:Microsoft.Xna.Framework.Vector3"/>.</param>
            <returns>The rounded <see cref="T:Microsoft.Xna.Framework.Vector3"/>.</returns>
        </member>
        <member name="M:Microsoft.Xna.Framework.Vector3.Round(Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Vector3@)">
            <summary>
            Creates a new <see cref="T:Microsoft.Xna.Framework.Vector3"/> that contains members from another vector rounded to the nearest integer value.
            </summary>
            <param name="value">Source <see cref="T:Microsoft.Xna.Framework.Vector3"/>.</param>
            <param name="result">The rounded <see cref="T:Microsoft.Xna.Framework.Vector3"/>.</param>
        </member>
        <member name="M:Microsoft.Xna.Framework.Vector3.SmoothStep(Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Vector3,System.Single)">
            <summary>
            Creates a new <see cref="T:Microsoft.Xna.Framework.Vector3"/> that contains cubic interpolation of the specified vectors.
            </summary>
            <param name="value1">Source <see cref="T:Microsoft.Xna.Framework.Vector3"/>.</param>
            <param name="value2">Source <see cref="T:Microsoft.Xna.Framework.Vector3"/>.</param>
            <param name="amount">Weighting value.</param>
            <returns>Cubic interpolation of the specified vectors.</returns>
        </member>
        <member name="M:Microsoft.Xna.Framework.Vector3.SmoothStep(Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Vector3@,System.Single,Microsoft.Xna.Framework.Vector3@)">
            <summary>
            Creates a new <see cref="T:Microsoft.Xna.Framework.Vector3"/> that contains cubic interpolation of the specified vectors.
            </summary>
            <param name="value1">Source <see cref="T:Microsoft.Xna.Framework.Vector3"/>.</param>
            <param name="value2">Source <see cref="T:Microsoft.Xna.Framework.Vector3"/>.</param>
            <param name="amount">Weighting value.</param>
            <param name="result">Cubic interpolation of the specified vectors as an output parameter.</param>
        </member>
        <member name="M:Microsoft.Xna.Framework.Vector3.Subtract(Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Vector3)">
            <summary>
            Creates a new <see cref="T:Microsoft.Xna.Framework.Vector3"/> that contains subtraction of on <see cref="T:Microsoft.Xna.Framework.Vector3"/> from a another.
            </summary>
            <param name="left">Source <see cref="T:Microsoft.Xna.Framework.Vector3"/>.</param>
            <param name="right">Source <see cref="T:Microsoft.Xna.Framework.Vector3"/>.</param>
            <returns>The result of the vector subtraction.</returns>
        </member>
        <member name="M:Microsoft.Xna.Framework.Vector3.Subtract(Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Vector3@)">
            <summary>
            Creates a new <see cref="T:Microsoft.Xna.Framework.Vector3"/> that contains subtraction of on <see cref="T:Microsoft.Xna.Framework.Vector3"/> from a another.
            </summary>
            <param name="left">Source <see cref="T:Microsoft.Xna.Framework.Vector3"/>.</param>
            <param name="right">Source <see cref="T:Microsoft.Xna.Framework.Vector3"/>.</param>
            <param name="result">The result of the vector subtraction as an output parameter.</param>
        </member>
        <member name="M:Microsoft.Xna.Framework.Vector3.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> representation of this <see cref="T:Microsoft.Xna.Framework.Vector3"/> in the format:
            {X:[<see cref="F:Microsoft.Xna.Framework.Vector3.X"/>] Y:[<see cref="F:Microsoft.Xna.Framework.Vector3.Y"/>] Z:[<see cref="F:Microsoft.Xna.Framework.Vector3.Z"/>]}
            </summary>
            <returns>A <see cref="T:System.String"/> representation of this <see cref="T:Microsoft.Xna.Framework.Vector3"/>.</returns>
        </member>
        <member name="M:Microsoft.Xna.Framework.Vector3.Transform(Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Matrix)">
            <summary>
            Creates a new <see cref="T:Microsoft.Xna.Framework.Vector3"/> that contains a transformation of 3d-vector by the specified <see cref="T:Microsoft.Xna.Framework.Matrix"/>.
            </summary>
            <param name="position">Source <see cref="T:Microsoft.Xna.Framework.Vector3"/>.</param>
            <param name="matrix">The transformation <see cref="T:Microsoft.Xna.Framework.Matrix"/>.</param>
            <returns>Transformed <see cref="T:Microsoft.Xna.Framework.Vector3"/>.</returns>
        </member>
        <member name="M:Microsoft.Xna.Framework.Vector3.Transform(Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Matrix@,Microsoft.Xna.Framework.Vector3@)">
            <summary>
            Creates a new <see cref="T:Microsoft.Xna.Framework.Vector3"/> that contains a transformation of 3d-vector by the specified <see cref="T:Microsoft.Xna.Framework.Matrix"/>.
            </summary>
            <param name="position">Source <see cref="T:Microsoft.Xna.Framework.Vector3"/>.</param>
            <param name="matrix">The transformation <see cref="T:Microsoft.Xna.Framework.Matrix"/>.</param>
            <param name="result">Transformed <see cref="T:Microsoft.Xna.Framework.Vector3"/> as an output parameter.</param>
        </member>
        <member name="M:Microsoft.Xna.Framework.Vector3.Transform(Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Quaternion)">
            <summary>
            Creates a new <see cref="T:Microsoft.Xna.Framework.Vector3"/> that contains a transformation of 3d-vector by the specified <see cref="T:Microsoft.Xna.Framework.Quaternion"/>, representing the rotation.
            </summary>
            <param name="value">Source <see cref="T:Microsoft.Xna.Framework.Vector3"/>.</param>
            <param name="rotation">The <see cref="T:Microsoft.Xna.Framework.Quaternion"/> which contains rotation transformation.</param>
            <returns>Transformed <see cref="T:Microsoft.Xna.Framework.Vector3"/>.</returns>
        </member>
        <member name="M:Microsoft.Xna.Framework.Vector3.Transform(Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Quaternion@,Microsoft.Xna.Framework.Vector3@)">
            <summary>
            Creates a new <see cref="T:Microsoft.Xna.Framework.Vector3"/> that contains a transformation of 3d-vector by the specified <see cref="T:Microsoft.Xna.Framework.Quaternion"/>, representing the rotation.
            </summary>
            <param name="value">Source <see cref="T:Microsoft.Xna.Framework.Vector3"/>.</param>
            <param name="rotation">The <see cref="T:Microsoft.Xna.Framework.Quaternion"/> which contains rotation transformation.</param>
            <param name="result">Transformed <see cref="T:Microsoft.Xna.Framework.Vector3"/> as an output parameter.</param>
        </member>
        <member name="M:Microsoft.Xna.Framework.Vector3.Transform(Microsoft.Xna.Framework.Vector3[],System.Int32,Microsoft.Xna.Framework.Matrix@,Microsoft.Xna.Framework.Vector3[],System.Int32,System.Int32)">
            <summary>
            Apply transformation on vectors within array of <see cref="T:Microsoft.Xna.Framework.Vector3"/> by the specified <see cref="T:Microsoft.Xna.Framework.Matrix"/> and places the results in an another array.
            </summary>
            <param name="sourceArray">Source array.</param>
            <param name="sourceIndex">The starting index of transformation in the source array.</param>
            <param name="matrix">The transformation <see cref="T:Microsoft.Xna.Framework.Matrix"/>.</param>
            <param name="destinationArray">Destination array.</param>
            <param name="destinationIndex">The starting index in the destination array, where the first <see cref="T:Microsoft.Xna.Framework.Vector3"/> should be written.</param>
            <param name="length">The number of vectors to be transformed.</param>
        </member>
        <member name="M:Microsoft.Xna.Framework.Vector3.Transform(Microsoft.Xna.Framework.Vector3[],System.Int32,Microsoft.Xna.Framework.Quaternion@,Microsoft.Xna.Framework.Vector3[],System.Int32,System.Int32)">
            <summary>
            Apply transformation on vectors within array of <see cref="T:Microsoft.Xna.Framework.Vector3"/> by the specified <see cref="T:Microsoft.Xna.Framework.Quaternion"/> and places the results in an another array.
            </summary>
            <param name="sourceArray">Source array.</param>
            <param name="sourceIndex">The starting index of transformation in the source array.</param>
            <param name="rotation">The <see cref="T:Microsoft.Xna.Framework.Quaternion"/> which contains rotation transformation.</param>
            <param name="destinationArray">Destination array.</param>
            <param name="destinationIndex">The starting index in the destination array, where the first <see cref="T:Microsoft.Xna.Framework.Vector3"/> should be written.</param>
            <param name="length">The number of vectors to be transformed.</param>
        </member>
        <member name="M:Microsoft.Xna.Framework.Vector3.Transform(Microsoft.Xna.Framework.Vector3[],Microsoft.Xna.Framework.Matrix@,Microsoft.Xna.Framework.Vector3[])">
            <summary>
            Apply transformation on all vectors within array of <see cref="T:Microsoft.Xna.Framework.Vector3"/> by the specified <see cref="T:Microsoft.Xna.Framework.Matrix"/> and places the results in an another array.
            </summary>
            <param name="sourceArray">Source array.</param>
            <param name="matrix">The transformation <see cref="T:Microsoft.Xna.Framework.Matrix"/>.</param>
            <param name="destinationArray">Destination array.</param>
        </member>
        <member name="M:Microsoft.Xna.Framework.Vector3.Transform(Microsoft.Xna.Framework.Vector3[],Microsoft.Xna.Framework.Quaternion@,Microsoft.Xna.Framework.Vector3[])">
            <summary>
            Apply transformation on all vectors within array of <see cref="T:Microsoft.Xna.Framework.Vector3"/> by the specified <see cref="T:Microsoft.Xna.Framework.Quaternion"/> and places the results in an another array.
            </summary>
            <param name="sourceArray">Source array.</param>
            <param name="rotation">The <see cref="T:Microsoft.Xna.Framework.Quaternion"/> which contains rotation transformation.</param>
            <param name="destinationArray">Destination array.</param>
        </member>
        <member name="M:Microsoft.Xna.Framework.Vector3.TransformNormal(Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Matrix)">
            <summary>
            Creates a new <see cref="T:Microsoft.Xna.Framework.Vector3"/> that contains a transformation of the specified normal by the specified <see cref="T:Microsoft.Xna.Framework.Matrix"/>.
            </summary>
            <param name="normal">Source <see cref="T:Microsoft.Xna.Framework.Vector3"/> which represents a normal vector.</param>
            <param name="matrix">The transformation <see cref="T:Microsoft.Xna.Framework.Matrix"/>.</param>
            <returns>Transformed normal.</returns>
        </member>
        <member name="M:Microsoft.Xna.Framework.Vector3.TransformNormal(Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Matrix@,Microsoft.Xna.Framework.Vector3@)">
            <summary>
            Creates a new <see cref="T:Microsoft.Xna.Framework.Vector3"/> that contains a transformation of the specified normal by the specified <see cref="T:Microsoft.Xna.Framework.Matrix"/>.
            </summary>
            <param name="normal">Source <see cref="T:Microsoft.Xna.Framework.Vector3"/> which represents a normal vector.</param>
            <param name="matrix">The transformation <see cref="T:Microsoft.Xna.Framework.Matrix"/>.</param>
            <param name="result">Transformed normal as an output parameter.</param>
        </member>
        <member name="M:Microsoft.Xna.Framework.Vector3.TransformNormal(Microsoft.Xna.Framework.Vector3[],System.Int32,Microsoft.Xna.Framework.Matrix@,Microsoft.Xna.Framework.Vector3[],System.Int32,System.Int32)">
            <summary>
            Apply transformation on normals within array of <see cref="T:Microsoft.Xna.Framework.Vector3"/> by the specified <see cref="T:Microsoft.Xna.Framework.Matrix"/> and places the results in an another array.
            </summary>
            <param name="sourceArray">Source array.</param>
            <param name="sourceIndex">The starting index of transformation in the source array.</param>
            <param name="matrix">The transformation <see cref="T:Microsoft.Xna.Framework.Matrix"/>.</param>
            <param name="destinationArray">Destination array.</param>
            <param name="destinationIndex">The starting index in the destination array, where the first <see cref="T:Microsoft.Xna.Framework.Vector3"/> should be written.</param>
            <param name="length">The number of normals to be transformed.</param>
        </member>
        <member name="M:Microsoft.Xna.Framework.Vector3.TransformNormal(Microsoft.Xna.Framework.Vector3[],Microsoft.Xna.Framework.Matrix@,Microsoft.Xna.Framework.Vector3[])">
            <summary>
            Apply transformation on all normals within array of <see cref="T:Microsoft.Xna.Framework.Vector3"/> by the specified <see cref="T:Microsoft.Xna.Framework.Matrix"/> and places the results in an another array.
            </summary>
            <param name="sourceArray">Source array.</param>
            <param name="matrix">The transformation <see cref="T:Microsoft.Xna.Framework.Matrix"/>.</param>
            <param name="destinationArray">Destination array.</param>
        </member>
        <member name="M:Microsoft.Xna.Framework.Vector3.Deconstruct(System.Single@,System.Single@,System.Single@)">
            <summary>
            Deconstruction method for <see cref="T:Microsoft.Xna.Framework.Vector3"/>.
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <param name="z"></param>
        </member>
        <member name="M:Microsoft.Xna.Framework.Vector3.op_Equality(Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Vector3)">
            <summary>
            Compares whether two <see cref="T:Microsoft.Xna.Framework.Vector3"/> instances are equal.
            </summary>
            <param name="left"><see cref="T:Microsoft.Xna.Framework.Vector3"/> instance on the left of the equal sign.</param>
            <param name="right"><see cref="T:Microsoft.Xna.Framework.Vector3"/> instance on the right of the equal sign.</param>
            <returns><c>true</c> if the instances are equal; <c>false</c> otherwise.</returns>
        </member>
        <member name="M:Microsoft.Xna.Framework.Vector3.op_Inequality(Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Vector3)">
            <summary>
            Compares whether two <see cref="T:Microsoft.Xna.Framework.Vector3"/> instances are not equal.
            </summary>
            <param name="left"><see cref="T:Microsoft.Xna.Framework.Vector3"/> instance on the left of the not equal sign.</param>
            <param name="right"><see cref="T:Microsoft.Xna.Framework.Vector3"/> instance on the right of the not equal sign.</param>
            <returns><c>true</c> if the instances are not equal; <c>false</c> otherwise.</returns>	
        </member>
        <member name="M:Microsoft.Xna.Framework.Vector3.op_Addition(Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Vector3)">
            <summary>
            Adds two vectors.
            </summary>
            <param name="left">Source <see cref="T:Microsoft.Xna.Framework.Vector3"/> on the left of the add sign.</param>
            <param name="right">Source <see cref="T:Microsoft.Xna.Framework.Vector3"/> on the right of the add sign.</param>
            <returns>Sum of the vectors.</returns>
        </member>
        <member name="M:Microsoft.Xna.Framework.Vector3.op_UnaryNegation(Microsoft.Xna.Framework.Vector3)">
            <summary>
            Inverts values in the specified <see cref="T:Microsoft.Xna.Framework.Vector3"/>.
            </summary>
            <param name="value">Source <see cref="T:Microsoft.Xna.Framework.Vector3"/> on the right of the sub sign.</param>
            <returns>Result of the inversion.</returns>
        </member>
        <member name="M:Microsoft.Xna.Framework.Vector3.op_Subtraction(Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Vector3)">
            <summary>
            Subtracts a <see cref="T:Microsoft.Xna.Framework.Vector3"/> from a <see cref="T:Microsoft.Xna.Framework.Vector3"/>.
            </summary>
            <param name="left">Source <see cref="T:Microsoft.Xna.Framework.Vector3"/> on the left of the sub sign.</param>
            <param name="right">Source <see cref="T:Microsoft.Xna.Framework.Vector3"/> on the right of the sub sign.</param>
            <returns>Result of the vector subtraction.</returns>
        </member>
        <member name="M:Microsoft.Xna.Framework.Vector3.op_Multiply(Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Vector3)">
            <summary>
            Multiplies the components of two vectors by each other.
            </summary>
            <param name="left">Source <see cref="T:Microsoft.Xna.Framework.Vector3"/> on the left of the mul sign.</param>
            <param name="right">Source <see cref="T:Microsoft.Xna.Framework.Vector3"/> on the right of the mul sign.</param>
            <returns>Result of the vector multiplication.</returns>
        </member>
        <member name="M:Microsoft.Xna.Framework.Vector3.op_Multiply(Microsoft.Xna.Framework.Vector3,System.Single)">
            <summary>
            Multiplies the components of vector by a scalar.
            </summary>
            <param name="left">Source <see cref="T:Microsoft.Xna.Framework.Vector3"/> on the left of the mul sign.</param>
            <param name="right">Scalar value on the right of the mul sign.</param>
            <returns>Result of the vector multiplication with a scalar.</returns>
        </member>
        <member name="M:Microsoft.Xna.Framework.Vector3.op_Multiply(System.Single,Microsoft.Xna.Framework.Vector3)">
            <summary>
            Multiplies the components of vector by a scalar.
            </summary>
            <param name="left">Scalar value on the left of the mul sign.</param>
            <param name="right">Source <see cref="T:Microsoft.Xna.Framework.Vector3"/> on the right of the mul sign.</param>
            <returns>Result of the vector multiplication with a scalar.</returns>
        </member>
        <member name="M:Microsoft.Xna.Framework.Vector3.op_Division(Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Vector3)">
            <summary>
            Divides the components of a <see cref="T:Microsoft.Xna.Framework.Vector3"/> by the components of another <see cref="T:Microsoft.Xna.Framework.Vector3"/>.
            </summary>
            <param name="left">Source <see cref="T:Microsoft.Xna.Framework.Vector3"/> on the left of the div sign.</param>
            <param name="right">Divisor <see cref="T:Microsoft.Xna.Framework.Vector3"/> on the right of the div sign.</param>
            <returns>The result of dividing the vectors.</returns>
        </member>
        <member name="M:Microsoft.Xna.Framework.Vector3.op_Division(Microsoft.Xna.Framework.Vector3,System.Single)">
            <summary>
            Divides the components of a <see cref="T:Microsoft.Xna.Framework.Vector3"/> by a scalar.
            </summary>
            <param name="left">Source <see cref="T:Microsoft.Xna.Framework.Vector3"/> on the left of the div sign.</param>
            <param name="right">Divisor scalar on the right of the div sign.</param>
            <returns>The result of dividing a vector by a scalar.</returns>
        </member>
        <member name="T:Microsoft.Xna.Framework.Vector4">
            <summary>
            Describes a 4D-vector.
            </summary>
        </member>
        <member name="F:Microsoft.Xna.Framework.Vector4.X">
            <summary>
            The x coordinate of this <see cref="T:Microsoft.Xna.Framework.Vector4"/>.
            </summary>
        </member>
        <member name="F:Microsoft.Xna.Framework.Vector4.Y">
            <summary>
            The y coordinate of this <see cref="T:Microsoft.Xna.Framework.Vector4"/>.
            </summary>
        </member>
        <member name="F:Microsoft.Xna.Framework.Vector4.Z">
            <summary>
            The z coordinate of this <see cref="T:Microsoft.Xna.Framework.Vector4"/>.
            </summary>
        </member>
        <member name="F:Microsoft.Xna.Framework.Vector4.W">
            <summary>
            The w coordinate of this <see cref="T:Microsoft.Xna.Framework.Vector4"/>.
            </summary>
        </member>
        <member name="P:Microsoft.Xna.Framework.Vector4.Zero">
            <summary>
            Returns a <see cref="T:Microsoft.Xna.Framework.Vector4"/> with components 0, 0, 0, 0.
            </summary>
        </member>
        <member name="P:Microsoft.Xna.Framework.Vector4.One">
            <summary>
            Returns a <see cref="T:Microsoft.Xna.Framework.Vector4"/> with components 1, 1, 1, 1.
            </summary>
        </member>
        <member name="P:Microsoft.Xna.Framework.Vector4.UnitX">
            <summary>
            Returns a <see cref="T:Microsoft.Xna.Framework.Vector4"/> with components 1, 0, 0, 0.
            </summary>
        </member>
        <member name="P:Microsoft.Xna.Framework.Vector4.UnitY">
            <summary>
            Returns a <see cref="T:Microsoft.Xna.Framework.Vector4"/> with components 0, 1, 0, 0.
            </summary>
        </member>
        <member name="P:Microsoft.Xna.Framework.Vector4.UnitZ">
            <summary>
            Returns a <see cref="T:Microsoft.Xna.Framework.Vector4"/> with components 0, 0, 1, 0.
            </summary>
        </member>
        <member name="P:Microsoft.Xna.Framework.Vector4.UnitW">
            <summary>
            Returns a <see cref="T:Microsoft.Xna.Framework.Vector4"/> with components 0, 0, 0, 1.
            </summary>
        </member>
        <member name="M:Microsoft.Xna.Framework.Vector4.#ctor(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Constructs a 3d vector with X, Y, Z and W from four values.
            </summary>
            <param name="x">The x coordinate in 4d-space.</param>
            <param name="y">The y coordinate in 4d-space.</param>
            <param name="z">The z coordinate in 4d-space.</param>
            <param name="w">The w coordinate in 4d-space.</param>
        </member>
        <member name="M:Microsoft.Xna.Framework.Vector4.#ctor(Microsoft.Xna.Framework.Vector2,System.Single,System.Single)">
            <summary>
            Constructs a 3d vector with X and Z from <see cref="T:Microsoft.Xna.Framework.Vector2"/> and Z and W from the scalars.
            </summary>
            <param name="value">The x and y coordinates in 4d-space.</param>
            <param name="z">The z coordinate in 4d-space.</param>
            <param name="w">The w coordinate in 4d-space.</param>
        </member>
        <member name="M:Microsoft.Xna.Framework.Vector4.#ctor(Microsoft.Xna.Framework.Vector3,System.Single)">
            <summary>
            Constructs a 3d vector with X, Y, Z from <see cref="T:Microsoft.Xna.Framework.Vector3"/> and W from a scalar.
            </summary>
            <param name="value">The x, y and z coordinates in 4d-space.</param>
            <param name="w">The w coordinate in 4d-space.</param>
        </member>
        <member name="M:Microsoft.Xna.Framework.Vector4.#ctor(System.Single)">
            <summary>
            Constructs a 4d vector with X, Y, Z and W set to the same value.
            </summary>
            <param name="value">The x, y, z and w coordinates in 4d-space.</param>
        </member>
        <member name="M:Microsoft.Xna.Framework.Vector4.Add(Microsoft.Xna.Framework.Vector4,Microsoft.Xna.Framework.Vector4)">
            <summary>
            Performs vector addition on <paramref name="left"/> and <paramref name="right"/>.
            </summary>
            <param name="left">The first vector to add.</param>
            <param name="right">The second vector to add.</param>
            <returns>The result of the vector addition.</returns>
        </member>
        <member name="M:Microsoft.Xna.Framework.Vector4.Add(Microsoft.Xna.Framework.Vector4@,Microsoft.Xna.Framework.Vector4@,Microsoft.Xna.Framework.Vector4@)">
            <summary>
            Performs vector addition on <paramref name="left"/> and
            <paramref name="right"/>, storing the result of the
            addition in <paramref name="result"/>.
            </summary>
            <param name="left">The first vector to add.</param>
            <param name="right">The second vector to add.</param>
            <param name="result">The result of the vector addition.</param>
        </member>
        <member name="M:Microsoft.Xna.Framework.Vector4.Barycentric(Microsoft.Xna.Framework.Vector4,Microsoft.Xna.Framework.Vector4,Microsoft.Xna.Framework.Vector4,System.Single,System.Single)">
            <summary>
            Creates a new <see cref="T:Microsoft.Xna.Framework.Vector4"/> that contains the cartesian coordinates of a vector specified in barycentric coordinates and relative to 4d-triangle.
            </summary>
            <param name="value1">The first vector of 4d-triangle.</param>
            <param name="value2">The second vector of 4d-triangle.</param>
            <param name="value3">The third vector of 4d-triangle.</param>
            <param name="amount1">Barycentric scalar <c>b2</c> which represents a weighting factor towards second vector of 4d-triangle.</param>
            <param name="amount2">Barycentric scalar <c>b3</c> which represents a weighting factor towards third vector of 4d-triangle.</param>
            <returns>The cartesian translation of barycentric coordinates.</returns>
        </member>
        <member name="M:Microsoft.Xna.Framework.Vector4.Barycentric(Microsoft.Xna.Framework.Vector4@,Microsoft.Xna.Framework.Vector4@,Microsoft.Xna.Framework.Vector4@,System.Single,System.Single,Microsoft.Xna.Framework.Vector4@)">
            <summary>
            Creates a new <see cref="T:Microsoft.Xna.Framework.Vector4"/> that contains the cartesian coordinates of a vector specified in barycentric coordinates and relative to 4d-triangle.
            </summary>
            <param name="value1">The first vector of 4d-triangle.</param>
            <param name="value2">The second vector of 4d-triangle.</param>
            <param name="value3">The third vector of 4d-triangle.</param>
            <param name="amount1">Barycentric scalar <c>b2</c> which represents a weighting factor towards second vector of 4d-triangle.</param>
            <param name="amount2">Barycentric scalar <c>b3</c> which represents a weighting factor towards third vector of 4d-triangle.</param>
            <param name="result">The cartesian translation of barycentric coordinates as an output parameter.</param>
        </member>
        <member name="M:Microsoft.Xna.Framework.Vector4.CatmullRom(Microsoft.Xna.Framework.Vector4,Microsoft.Xna.Framework.Vector4,Microsoft.Xna.Framework.Vector4,Microsoft.Xna.Framework.Vector4,System.Single)">
            <summary>
            Creates a new <see cref="T:Microsoft.Xna.Framework.Vector4"/> that contains CatmullRom interpolation of the specified vectors.
            </summary>
            <param name="value1">The first vector in interpolation.</param>
            <param name="value2">The second vector in interpolation.</param>
            <param name="value3">The third vector in interpolation.</param>
            <param name="value4">The fourth vector in interpolation.</param>
            <param name="amount">Weighting factor.</param>
            <returns>The result of CatmullRom interpolation.</returns>
        </member>
        <member name="M:Microsoft.Xna.Framework.Vector4.CatmullRom(Microsoft.Xna.Framework.Vector4@,Microsoft.Xna.Framework.Vector4@,Microsoft.Xna.Framework.Vector4@,Microsoft.Xna.Framework.Vector4@,System.Single,Microsoft.Xna.Framework.Vector4@)">
            <summary>
            Creates a new <see cref="T:Microsoft.Xna.Framework.Vector4"/> that contains CatmullRom interpolation of the specified vectors.
            </summary>
            <param name="value1">The first vector in interpolation.</param>
            <param name="value2">The second vector in interpolation.</param>
            <param name="value3">The third vector in interpolation.</param>
            <param name="value4">The fourth vector in interpolation.</param>
            <param name="amount">Weighting factor.</param>
            <param name="result">The result of CatmullRom interpolation as an output parameter.</param>
        </member>
        <member name="M:Microsoft.Xna.Framework.Vector4.Ceiling">
            <summary>
            Round the members of this <see cref="T:Microsoft.Xna.Framework.Vector4"/> towards positive infinity.
            </summary>
        </member>
        <member name="M:Microsoft.Xna.Framework.Vector4.Ceiling(Microsoft.Xna.Framework.Vector4)">
            <summary>
            Creates a new <see cref="T:Microsoft.Xna.Framework.Vector4"/> that contains members from another vector rounded towards positive infinity.
            </summary>
            <param name="value">Source <see cref="T:Microsoft.Xna.Framework.Vector4"/>.</param>
            <returns>The rounded <see cref="T:Microsoft.Xna.Framework.Vector4"/>.</returns>
        </member>
        <member name="M:Microsoft.Xna.Framework.Vector4.Ceiling(Microsoft.Xna.Framework.Vector4@,Microsoft.Xna.Framework.Vector4@)">
            <summary>
            Creates a new <see cref="T:Microsoft.Xna.Framework.Vector4"/> that contains members from another vector rounded towards positive infinity.
            </summary>
            <param name="value">Source <see cref="T:Microsoft.Xna.Framework.Vector4"/>.</param>
            <param name="result">The rounded <see cref="T:Microsoft.Xna.Framework.Vector4"/>.</param>
        </member>
        <member name="M:Microsoft.Xna.Framework.Vector4.Clamp(Microsoft.Xna.Framework.Vector4,Microsoft.Xna.Framework.Vector4,Microsoft.Xna.Framework.Vector4)">
            <summary>
            Clamps the specified value within a range.
            </summary>
            <param name="value1">The value to clamp.</param>
            <param name="min">The min value.</param>
            <param name="max">The max value.</param>
            <returns>The clamped value.</returns>
        </member>
        <member name="M:Microsoft.Xna.Framework.Vector4.Clamp(Microsoft.Xna.Framework.Vector4@,Microsoft.Xna.Framework.Vector4@,Microsoft.Xna.Framework.Vector4@,Microsoft.Xna.Framework.Vector4@)">
            <summary>
            Clamps the specified value within a range.
            </summary>
            <param name="value1">The value to clamp.</param>
            <param name="min">The min value.</param>
            <param name="max">The max value.</param>
            <param name="result">The clamped value as an output parameter.</param>
        </member>
        <member name="M:Microsoft.Xna.Framework.Vector4.Distance(Microsoft.Xna.Framework.Vector4,Microsoft.Xna.Framework.Vector4)">
            <summary>
            Returns the distance between two vectors.
            </summary>
            <param name="value1">The first vector.</param>
            <param name="value2">The second vector.</param>
            <returns>The distance between two vectors.</returns>
        </member>
        <member name="M:Microsoft.Xna.Framework.Vector4.Distance(Microsoft.Xna.Framework.Vector4@,Microsoft.Xna.Framework.Vector4@,System.Single@)">
            <summary>
            Returns the distance between two vectors.
            </summary>
            <param name="value1">The first vector.</param>
            <param name="value2">The second vector.</param>
            <param name="result">The distance between two vectors as an output parameter.</param>
        </member>
        <member name="M:Microsoft.Xna.Framework.Vector4.DistanceSquared(Microsoft.Xna.Framework.Vector4,Microsoft.Xna.Framework.Vector4)">
            <summary>
            Returns the squared distance between two vectors.
            </summary>
            <param name="value1">The first vector.</param>
            <param name="value2">The second vector.</param>
            <returns>The squared distance between two vectors.</returns>
        </member>
        <member name="M:Microsoft.Xna.Framework.Vector4.DistanceSquared(Microsoft.Xna.Framework.Vector4@,Microsoft.Xna.Framework.Vector4@,System.Single@)">
            <summary>
            Returns the squared distance between two vectors.
            </summary>
            <param name="value1">The first vector.</param>
            <param name="value2">The second vector.</param>
            <param name="result">The squared distance between two vectors as an output parameter.</param>
        </member>
        <member name="M:Microsoft.Xna.Framework.Vector4.Divide(Microsoft.Xna.Framework.Vector4,Microsoft.Xna.Framework.Vector4)">
            <summary>
            Divides the components of a <see cref="T:Microsoft.Xna.Framework.Vector4"/> by the components of another <see cref="T:Microsoft.Xna.Framework.Vector4"/>.
            </summary>
            <param name="left">Source <see cref="T:Microsoft.Xna.Framework.Vector4"/>.</param>
            <param name="right">Divisor <see cref="T:Microsoft.Xna.Framework.Vector4"/>.</param>
            <returns>The result of dividing the vectors.</returns>
        </member>
        <member name="M:Microsoft.Xna.Framework.Vector4.Divide(Microsoft.Xna.Framework.Vector4,System.Single)">
            <summary>
            Divides the components of a <see cref="T:Microsoft.Xna.Framework.Vector4"/> by a scalar.
            </summary>
            <param name="left">Source <see cref="T:Microsoft.Xna.Framework.Vector4"/>.</param>
            <param name="right">Divisor scalar.</param>
            <returns>The result of dividing a vector by a scalar.</returns>
        </member>
        <member name="M:Microsoft.Xna.Framework.Vector4.Divide(Microsoft.Xna.Framework.Vector4@,System.Single,Microsoft.Xna.Framework.Vector4@)">
            <summary>
            Divides the components of a <see cref="T:Microsoft.Xna.Framework.Vector4"/> by a scalar.
            </summary>
            <param name="left">Source <see cref="T:Microsoft.Xna.Framework.Vector4"/>.</param>
            <param name="right">Divisor scalar.</param>
            <param name="result">The result of dividing a vector by a scalar as an output parameter.</param>
        </member>
        <member name="M:Microsoft.Xna.Framework.Vector4.Divide(Microsoft.Xna.Framework.Vector4@,Microsoft.Xna.Framework.Vector4@,Microsoft.Xna.Framework.Vector4@)">
            <summary>
            Divides the components of a <see cref="T:Microsoft.Xna.Framework.Vector4"/> by the components of another <see cref="T:Microsoft.Xna.Framework.Vector4"/>.
            </summary>
            <param name="left">Source <see cref="T:Microsoft.Xna.Framework.Vector4"/>.</param>
            <param name="right">Divisor <see cref="T:Microsoft.Xna.Framework.Vector4"/>.</param>
            <param name="result">The result of dividing the vectors as an output parameter.</param>
        </member>
        <member name="M:Microsoft.Xna.Framework.Vector4.Dot(Microsoft.Xna.Framework.Vector4,Microsoft.Xna.Framework.Vector4)">
            <summary>
            Returns a dot product of two vectors.
            </summary>
            <param name="left">The first vector.</param>
            <param name="right">The second vector.</param>
            <returns>The dot product of two vectors.</returns>
        </member>
        <member name="M:Microsoft.Xna.Framework.Vector4.Dot(Microsoft.Xna.Framework.Vector4@,Microsoft.Xna.Framework.Vector4@,System.Single@)">
            <summary>
            Returns a dot product of two vectors.
            </summary>
            <param name="left">The first vector.</param>
            <param name="right">The second vector.</param>
            <param name="result">The dot product of two vectors as an output parameter.</param>
        </member>
        <member name="M:Microsoft.Xna.Framework.Vector4.Equals(System.Object)">
            <summary>
            Compares whether current instance is equal to specified <see cref="T:System.Object"/>.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> to compare.</param>
            <returns><c>true</c> if the instances are equal; <c>false</c> otherwise.</returns>
        </member>
        <member name="M:Microsoft.Xna.Framework.Vector4.Equals(Microsoft.Xna.Framework.Vector4)">
            <summary>
            Compares whether current instance is equal to specified <see cref="T:Microsoft.Xna.Framework.Vector4"/>.
            </summary>
            <param name="other">The <see cref="T:Microsoft.Xna.Framework.Vector4"/> to compare.</param>
            <returns><c>true</c> if the instances are equal; <c>false</c> otherwise.</returns>
        </member>
        <member name="M:Microsoft.Xna.Framework.Vector4.Floor">
            <summary>
            Round the members of this <see cref="T:Microsoft.Xna.Framework.Vector4"/> towards negative infinity.
            </summary>
        </member>
        <member name="M:Microsoft.Xna.Framework.Vector4.Floor(Microsoft.Xna.Framework.Vector4)">
            <summary>
            Creates a new <see cref="T:Microsoft.Xna.Framework.Vector4"/> that contains members from another vector rounded towards negative infinity.
            </summary>
            <param name="value">Source <see cref="T:Microsoft.Xna.Framework.Vector4"/>.</param>
            <returns>The rounded <see cref="T:Microsoft.Xna.Framework.Vector4"/>.</returns>
        </member>
        <member name="M:Microsoft.Xna.Framework.Vector4.Floor(Microsoft.Xna.Framework.Vector4@,Microsoft.Xna.Framework.Vector4@)">
            <summary>
            Creates a new <see cref="T:Microsoft.Xna.Framework.Vector4"/> that contains members from another vector rounded towards negative infinity.
            </summary>
            <param name="value">Source <see cref="T:Microsoft.Xna.Framework.Vector4"/>.</param>
            <param name="result">The rounded <see cref="T:Microsoft.Xna.Framework.Vector4"/>.</param>
        </member>
        <member name="M:Microsoft.Xna.Framework.Vector4.GetHashCode">
            <summary>
            Gets the hash code of this <see cref="T:Microsoft.Xna.Framework.Vector4"/>.
            </summary>
            <returns>Hash code of this <see cref="T:Microsoft.Xna.Framework.Vector4"/>.</returns>
        </member>
        <member name="M:Microsoft.Xna.Framework.Vector4.Hermite(Microsoft.Xna.Framework.Vector4,Microsoft.Xna.Framework.Vector4,Microsoft.Xna.Framework.Vector4,Microsoft.Xna.Framework.Vector4,System.Single)">
            <summary>
            Creates a new <see cref="T:Microsoft.Xna.Framework.Vector4"/> that contains hermite spline interpolation.
            </summary>
            <param name="value1">The first position vector.</param>
            <param name="tangent1">The first tangent vector.</param>
            <param name="value2">The second position vector.</param>
            <param name="tangent2">The second tangent vector.</param>
            <param name="amount">Weighting factor.</param>
            <returns>The hermite spline interpolation vector.</returns>
        </member>
        <member name="M:Microsoft.Xna.Framework.Vector4.Hermite(Microsoft.Xna.Framework.Vector4@,Microsoft.Xna.Framework.Vector4@,Microsoft.Xna.Framework.Vector4@,Microsoft.Xna.Framework.Vector4@,System.Single,Microsoft.Xna.Framework.Vector4@)">
            <summary>
            Creates a new <see cref="T:Microsoft.Xna.Framework.Vector4"/> that contains hermite spline interpolation.
            </summary>
            <param name="value1">The first position vector.</param>
            <param name="tangent1">The first tangent vector.</param>
            <param name="value2">The second position vector.</param>
            <param name="tangent2">The second tangent vector.</param>
            <param name="amount">Weighting factor.</param>
            <param name="result">The hermite spline interpolation vector as an output parameter.</param>
        </member>
        <member name="M:Microsoft.Xna.Framework.Vector4.Length">
            <summary>
            Returns the length of this <see cref="T:Microsoft.Xna.Framework.Vector4"/>.
            </summary>
            <returns>The length of this <see cref="T:Microsoft.Xna.Framework.Vector4"/>.</returns>
        </member>
        <member name="M:Microsoft.Xna.Framework.Vector4.LengthSquared">
            <summary>
            Returns the squared length of this <see cref="T:Microsoft.Xna.Framework.Vector4"/>.
            </summary>
            <returns>The squared length of this <see cref="T:Microsoft.Xna.Framework.Vector4"/>.</returns>
        </member>
        <member name="M:Microsoft.Xna.Framework.Vector4.Lerp(Microsoft.Xna.Framework.Vector4,Microsoft.Xna.Framework.Vector4,System.Single)">
            <summary>
            Creates a new <see cref="T:Microsoft.Xna.Framework.Vector4"/> that contains linear interpolation of the specified vectors.
            </summary>
            <param name="start">The first vector.</param>
            <param name="end">The second vector.</param>
            <param name="amount">Weighting value(between 0.0 and 1.0).</param>
            <returns>The result of linear interpolation of the specified vectors.</returns>
        </member>
        <member name="M:Microsoft.Xna.Framework.Vector4.Lerp(Microsoft.Xna.Framework.Vector4@,Microsoft.Xna.Framework.Vector4@,System.Single,Microsoft.Xna.Framework.Vector4@)">
            <summary>
            Creates a new <see cref="T:Microsoft.Xna.Framework.Vector4"/> that contains linear interpolation of the specified vectors.
            </summary>
            <param name="start">The first vector.</param>
            <param name="end">The second vector.</param>
            <param name="amount">Weighting value(between 0.0 and 1.0).</param>
            <param name="result">The result of linear interpolation of the specified vectors as an output parameter.</param>
        </member>
        <member name="M:Microsoft.Xna.Framework.Vector4.LerpPrecise(Microsoft.Xna.Framework.Vector4,Microsoft.Xna.Framework.Vector4,System.Single)">
            <summary>
            Creates a new <see cref="T:Microsoft.Xna.Framework.Vector4"/> that contains linear interpolation of the specified vectors.
            Uses <see cref="M:Microsoft.Xna.Framework.MathHelper.LerpPrecise(System.Single,System.Single,System.Single)"/> on MathHelper for the interpolation.
            Less efficient but more precise compared to <see cref="M:Microsoft.Xna.Framework.Vector4.Lerp(Microsoft.Xna.Framework.Vector4,Microsoft.Xna.Framework.Vector4,System.Single)"/>.
            See remarks section of <see cref="M:Microsoft.Xna.Framework.MathHelper.LerpPrecise(System.Single,System.Single,System.Single)"/> on MathHelper for more info.
            </summary>
            <param name="start">The first vector.</param>
            <param name="end">The second vector.</param>
            <param name="amount">Weighting value(between 0.0 and 1.0).</param>
            <returns>The result of linear interpolation of the specified vectors.</returns>
        </member>
        <member name="M:Microsoft.Xna.Framework.Vector4.LerpPrecise(Microsoft.Xna.Framework.Vector4@,Microsoft.Xna.Framework.Vector4@,System.Single,Microsoft.Xna.Framework.Vector4@)">
            <summary>
            Creates a new <see cref="T:Microsoft.Xna.Framework.Vector4"/> that contains linear interpolation of the specified vectors.
            Uses <see cref="M:Microsoft.Xna.Framework.MathHelper.LerpPrecise(System.Single,System.Single,System.Single)"/> on MathHelper for the interpolation.
            Less efficient but more precise compared to <see cref="M:Microsoft.Xna.Framework.Vector4.Lerp(Microsoft.Xna.Framework.Vector4@,Microsoft.Xna.Framework.Vector4@,System.Single,Microsoft.Xna.Framework.Vector4@)"/>.
            See remarks section of <see cref="M:Microsoft.Xna.Framework.MathHelper.LerpPrecise(System.Single,System.Single,System.Single)"/> on MathHelper for more info.
            </summary>
            <param name="start">The first vector.</param>
            <param name="end">The second vector.</param>
            <param name="amount">Weighting value(between 0.0 and 1.0).</param>
            <param name="result">The result of linear interpolation of the specified vectors as an output parameter.</param>
        </member>
        <member name="M:Microsoft.Xna.Framework.Vector4.Max(Microsoft.Xna.Framework.Vector4,Microsoft.Xna.Framework.Vector4)">
            <summary>
            Creates a new <see cref="T:Microsoft.Xna.Framework.Vector4"/> that contains a maximal values from the two vectors.
            </summary>
            <param name="value1">The first vector.</param>
            <param name="value2">The second vector.</param>
            <returns>The <see cref="T:Microsoft.Xna.Framework.Vector4"/> with maximal values from the two vectors.</returns>
        </member>
        <member name="M:Microsoft.Xna.Framework.Vector4.Max(Microsoft.Xna.Framework.Vector4@,Microsoft.Xna.Framework.Vector4@,Microsoft.Xna.Framework.Vector4@)">
            <summary>
            Creates a new <see cref="T:Microsoft.Xna.Framework.Vector4"/> that contains a maximal values from the two vectors.
            </summary>
            <param name="value1">The first vector.</param>
            <param name="value2">The second vector.</param>
            <param name="result">The <see cref="T:Microsoft.Xna.Framework.Vector4"/> with maximal values from the two vectors as an output parameter.</param>
        </member>
        <member name="M:Microsoft.Xna.Framework.Vector4.Min(Microsoft.Xna.Framework.Vector4,Microsoft.Xna.Framework.Vector4)">
            <summary>
            Creates a new <see cref="T:Microsoft.Xna.Framework.Vector4"/> that contains a minimal values from the two vectors.
            </summary>
            <param name="value1">The first vector.</param>
            <param name="value2">The second vector.</param>
            <returns>The <see cref="T:Microsoft.Xna.Framework.Vector4"/> with minimal values from the two vectors.</returns>
        </member>
        <member name="M:Microsoft.Xna.Framework.Vector4.Min(Microsoft.Xna.Framework.Vector4@,Microsoft.Xna.Framework.Vector4@,Microsoft.Xna.Framework.Vector4@)">
            <summary>
            Creates a new <see cref="T:Microsoft.Xna.Framework.Vector4"/> that contains a minimal values from the two vectors.
            </summary>
            <param name="value1">The first vector.</param>
            <param name="value2">The second vector.</param>
            <param name="result">The <see cref="T:Microsoft.Xna.Framework.Vector4"/> with minimal values from the two vectors as an output parameter.</param>
        </member>
        <member name="M:Microsoft.Xna.Framework.Vector4.Multiply(Microsoft.Xna.Framework.Vector4,Microsoft.Xna.Framework.Vector4)">
            <summary>
            Creates a new <see cref="T:Microsoft.Xna.Framework.Vector4"/> that contains a multiplication of two vectors.
            </summary>
            <param name="left">Source <see cref="T:Microsoft.Xna.Framework.Vector4"/>.</param>
            <param name="right">Source <see cref="T:Microsoft.Xna.Framework.Vector4"/>.</param>
            <returns>The result of the vector multiplication.</returns>
        </member>
        <member name="M:Microsoft.Xna.Framework.Vector4.Multiply(Microsoft.Xna.Framework.Vector4,System.Single)">
            <summary>
            Creates a new <see cref="T:Microsoft.Xna.Framework.Vector4"/> that contains a multiplication of <see cref="T:Microsoft.Xna.Framework.Vector4"/> and a scalar.
            </summary>
            <param name="left">Source <see cref="T:Microsoft.Xna.Framework.Vector4"/>.</param>
            <param name="right">Scalar value.</param>
            <returns>The result of the vector multiplication with a scalar.</returns>
        </member>
        <member name="M:Microsoft.Xna.Framework.Vector4.Multiply(Microsoft.Xna.Framework.Vector4@,System.Single,Microsoft.Xna.Framework.Vector4@)">
            <summary>
            Creates a new <see cref="T:Microsoft.Xna.Framework.Vector4"/> that contains a multiplication of <see cref="T:Microsoft.Xna.Framework.Vector4"/> and a scalar.
            </summary>
            <param name="left">Source <see cref="T:Microsoft.Xna.Framework.Vector4"/>.</param>
            <param name="right">Scalar value.</param>
            <param name="result">The result of the multiplication with a scalar as an output parameter.</param>
        </member>
        <member name="M:Microsoft.Xna.Framework.Vector4.Multiply(Microsoft.Xna.Framework.Vector4@,Microsoft.Xna.Framework.Vector4@,Microsoft.Xna.Framework.Vector4@)">
            <summary>
            Creates a new <see cref="T:Microsoft.Xna.Framework.Vector4"/> that contains a multiplication of two vectors.
            </summary>
            <param name="left">Source <see cref="T:Microsoft.Xna.Framework.Vector4"/>.</param>
            <param name="right">Source <see cref="T:Microsoft.Xna.Framework.Vector4"/>.</param>
            <param name="result">The result of the vector multiplication as an output parameter.</param>
        </member>
        <member name="M:Microsoft.Xna.Framework.Vector4.Negate(Microsoft.Xna.Framework.Vector4)">
            <summary>
            Creates a new <see cref="T:Microsoft.Xna.Framework.Vector4"/> that contains the specified vector inversion.
            </summary>
            <param name="value">Source <see cref="T:Microsoft.Xna.Framework.Vector4"/>.</param>
            <returns>The result of the vector inversion.</returns>
        </member>
        <member name="M:Microsoft.Xna.Framework.Vector4.Negate(Microsoft.Xna.Framework.Vector4@,Microsoft.Xna.Framework.Vector4@)">
            <summary>
            Creates a new <see cref="T:Microsoft.Xna.Framework.Vector4"/> that contains the specified vector inversion.
            </summary>
            <param name="value">Source <see cref="T:Microsoft.Xna.Framework.Vector4"/>.</param>
            <param name="result">The result of the vector inversion as an output parameter.</param>
        </member>
        <member name="M:Microsoft.Xna.Framework.Vector4.Normalize">
            <summary>
            Turns this <see cref="T:Microsoft.Xna.Framework.Vector4"/> to a unit vector with the same direction.
            </summary>
        </member>
        <member name="M:Microsoft.Xna.Framework.Vector4.Normalize(Microsoft.Xna.Framework.Vector4)">
            <summary>
            Creates a new <see cref="T:Microsoft.Xna.Framework.Vector4"/> that contains a normalized values from another vector.
            </summary>
            <param name="value">Source <see cref="T:Microsoft.Xna.Framework.Vector4"/>.</param>
            <returns>Unit vector.</returns>
        </member>
        <member name="M:Microsoft.Xna.Framework.Vector4.Normalize(Microsoft.Xna.Framework.Vector4@,Microsoft.Xna.Framework.Vector4@)">
            <summary>
            Creates a new <see cref="T:Microsoft.Xna.Framework.Vector4"/> that contains a normalized values from another vector.
            </summary>
            <param name="value">Source <see cref="T:Microsoft.Xna.Framework.Vector4"/>.</param>
            <param name="result">Unit vector as an output parameter.</param>
        </member>
        <member name="M:Microsoft.Xna.Framework.Vector4.Round">
            <summary>
            Round the members of this <see cref="T:Microsoft.Xna.Framework.Vector4"/> to the nearest integer value.
            </summary>
        </member>
        <member name="M:Microsoft.Xna.Framework.Vector4.Round(Microsoft.Xna.Framework.Vector4)">
            <summary>
            Creates a new <see cref="T:Microsoft.Xna.Framework.Vector4"/> that contains members from another vector rounded to the nearest integer value.
            </summary>
            <param name="value">Source <see cref="T:Microsoft.Xna.Framework.Vector4"/>.</param>
            <returns>The rounded <see cref="T:Microsoft.Xna.Framework.Vector4"/>.</returns>
        </member>
        <member name="M:Microsoft.Xna.Framework.Vector4.Round(Microsoft.Xna.Framework.Vector4@,Microsoft.Xna.Framework.Vector4@)">
            <summary>
            Creates a new <see cref="T:Microsoft.Xna.Framework.Vector4"/> that contains members from another vector rounded to the nearest integer value.
            </summary>
            <param name="value">Source <see cref="T:Microsoft.Xna.Framework.Vector4"/>.</param>
            <param name="result">The rounded <see cref="T:Microsoft.Xna.Framework.Vector4"/>.</param>
        </member>
        <member name="M:Microsoft.Xna.Framework.Vector4.SmoothStep(Microsoft.Xna.Framework.Vector4,Microsoft.Xna.Framework.Vector4,System.Single)">
            <summary>
            Creates a new <see cref="T:Microsoft.Xna.Framework.Vector4"/> that contains cubic interpolation of the specified vectors.
            </summary>
            <param name="value1">Source <see cref="T:Microsoft.Xna.Framework.Vector4"/>.</param>
            <param name="value2">Source <see cref="T:Microsoft.Xna.Framework.Vector4"/>.</param>
            <param name="amount">Weighting value.</param>
            <returns>Cubic interpolation of the specified vectors.</returns>
        </member>
        <member name="M:Microsoft.Xna.Framework.Vector4.SmoothStep(Microsoft.Xna.Framework.Vector4@,Microsoft.Xna.Framework.Vector4@,System.Single,Microsoft.Xna.Framework.Vector4@)">
            <summary>
            Creates a new <see cref="T:Microsoft.Xna.Framework.Vector4"/> that contains cubic interpolation of the specified vectors.
            </summary>
            <param name="value1">Source <see cref="T:Microsoft.Xna.Framework.Vector4"/>.</param>
            <param name="value2">Source <see cref="T:Microsoft.Xna.Framework.Vector4"/>.</param>
            <param name="amount">Weighting value.</param>
            <param name="result">Cubic interpolation of the specified vectors as an output parameter.</param>
        </member>
        <member name="M:Microsoft.Xna.Framework.Vector4.Subtract(Microsoft.Xna.Framework.Vector4,Microsoft.Xna.Framework.Vector4)">
            <summary>
            Creates a new <see cref="T:Microsoft.Xna.Framework.Vector4"/> that contains subtraction of on <see cref="T:Microsoft.Xna.Framework.Vector4"/> from a another.
            </summary>
            <param name="left">Source <see cref="T:Microsoft.Xna.Framework.Vector4"/>.</param>
            <param name="right">Source <see cref="T:Microsoft.Xna.Framework.Vector4"/>.</param>
            <returns>The result of the vector subtraction.</returns>
        </member>
        <member name="M:Microsoft.Xna.Framework.Vector4.Subtract(Microsoft.Xna.Framework.Vector4@,Microsoft.Xna.Framework.Vector4@,Microsoft.Xna.Framework.Vector4@)">
            <summary>
            Creates a new <see cref="T:Microsoft.Xna.Framework.Vector4"/> that contains subtraction of on <see cref="T:Microsoft.Xna.Framework.Vector4"/> from a another.
            </summary>
            <param name="left">Source <see cref="T:Microsoft.Xna.Framework.Vector4"/>.</param>
            <param name="right">Source <see cref="T:Microsoft.Xna.Framework.Vector4"/>.</param>
            <param name="result">The result of the vector subtraction as an output parameter.</param>
        </member>
        <member name="M:Microsoft.Xna.Framework.Vector4.Transform(Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Matrix)">
            <summary>
            Creates a new <see cref="T:Microsoft.Xna.Framework.Vector4"/> that contains a transformation of 2d-vector by the specified <see cref="T:Microsoft.Xna.Framework.Matrix"/>.
            </summary>
            <param name="value">Source <see cref="T:Microsoft.Xna.Framework.Vector2"/>.</param>
            <param name="matrix">The transformation <see cref="T:Microsoft.Xna.Framework.Matrix"/>.</param>
            <returns>Transformed <see cref="T:Microsoft.Xna.Framework.Vector4"/>.</returns>
        </member>
        <member name="M:Microsoft.Xna.Framework.Vector4.Transform(Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Quaternion)">
            <summary>
            Creates a new <see cref="T:Microsoft.Xna.Framework.Vector4"/> that contains a transformation of 2d-vector by the specified <see cref="T:Microsoft.Xna.Framework.Quaternion"/>.
            </summary>
            <param name="value">Source <see cref="T:Microsoft.Xna.Framework.Vector2"/>.</param>
            <param name="rotation">The <see cref="T:Microsoft.Xna.Framework.Quaternion"/> which contains rotation transformation.</param>
            <returns>Transformed <see cref="T:Microsoft.Xna.Framework.Vector4"/>.</returns>
        </member>
        <member name="M:Microsoft.Xna.Framework.Vector4.Transform(Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Matrix)">
            <summary>
            Creates a new <see cref="T:Microsoft.Xna.Framework.Vector4"/> that contains a transformation of 3d-vector by the specified <see cref="T:Microsoft.Xna.Framework.Matrix"/>.
            </summary>
            <param name="value">Source <see cref="T:Microsoft.Xna.Framework.Vector3"/>.</param>
            <param name="matrix">The transformation <see cref="T:Microsoft.Xna.Framework.Matrix"/>.</param>
            <returns>Transformed <see cref="T:Microsoft.Xna.Framework.Vector4"/>.</returns>
        </member>
        <member name="M:Microsoft.Xna.Framework.Vector4.Transform(Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Quaternion)">
            <summary>
            Creates a new <see cref="T:Microsoft.Xna.Framework.Vector4"/> that contains a transformation of 3d-vector by the specified <see cref="T:Microsoft.Xna.Framework.Quaternion"/>.
            </summary>
            <param name="value">Source <see cref="T:Microsoft.Xna.Framework.Vector3"/>.</param>
            <param name="rotation">The <see cref="T:Microsoft.Xna.Framework.Quaternion"/> which contains rotation transformation.</param>
            <returns>Transformed <see cref="T:Microsoft.Xna.Framework.Vector4"/>.</returns>
        </member>
        <member name="M:Microsoft.Xna.Framework.Vector4.Transform(Microsoft.Xna.Framework.Vector4,Microsoft.Xna.Framework.Matrix)">
            <summary>
            Creates a new <see cref="T:Microsoft.Xna.Framework.Vector4"/> that contains a transformation of 4d-vector by the specified <see cref="T:Microsoft.Xna.Framework.Matrix"/>.
            </summary>
            <param name="value">Source <see cref="T:Microsoft.Xna.Framework.Vector4"/>.</param>
            <param name="matrix">The transformation <see cref="T:Microsoft.Xna.Framework.Matrix"/>.</param>
            <returns>Transformed <see cref="T:Microsoft.Xna.Framework.Vector4"/>.</returns>
        </member>
        <member name="M:Microsoft.Xna.Framework.Vector4.Transform(Microsoft.Xna.Framework.Vector4,Microsoft.Xna.Framework.Quaternion)">
            <summary>
            Creates a new <see cref="T:Microsoft.Xna.Framework.Vector4"/> that contains a transformation of 4d-vector by the specified <see cref="T:Microsoft.Xna.Framework.Quaternion"/>.
            </summary>
            <param name="value">Source <see cref="T:Microsoft.Xna.Framework.Vector4"/>.</param>
            <param name="rotation">The <see cref="T:Microsoft.Xna.Framework.Quaternion"/> which contains rotation transformation.</param>
            <returns>Transformed <see cref="T:Microsoft.Xna.Framework.Vector4"/>.</returns>
        </member>
        <member name="M:Microsoft.Xna.Framework.Vector4.Transform(Microsoft.Xna.Framework.Vector2@,Microsoft.Xna.Framework.Matrix@,Microsoft.Xna.Framework.Vector4@)">
            <summary>
            Creates a new <see cref="T:Microsoft.Xna.Framework.Vector4"/> that contains a transformation of 2d-vector by the specified <see cref="T:Microsoft.Xna.Framework.Matrix"/>.
            </summary>
            <param name="value">Source <see cref="T:Microsoft.Xna.Framework.Vector2"/>.</param>
            <param name="matrix">The transformation <see cref="T:Microsoft.Xna.Framework.Matrix"/>.</param>
            <param name="result">Transformed <see cref="T:Microsoft.Xna.Framework.Vector4"/> as an output parameter.</param>
        </member>
        <member name="M:Microsoft.Xna.Framework.Vector4.Transform(Microsoft.Xna.Framework.Vector2@,Microsoft.Xna.Framework.Quaternion@,Microsoft.Xna.Framework.Vector4@)">
            <summary>
            Creates a new <see cref="T:Microsoft.Xna.Framework.Vector4"/> that contains a transformation of 2d-vector by the specified <see cref="T:Microsoft.Xna.Framework.Quaternion"/>.
            </summary>
            <param name="value">Source <see cref="T:Microsoft.Xna.Framework.Vector2"/>.</param>
            <param name="rotation">The <see cref="T:Microsoft.Xna.Framework.Quaternion"/> which contains rotation transformation.</param>
            <param name="result">Transformed <see cref="T:Microsoft.Xna.Framework.Vector4"/> as an output parameter.</param>
        </member>
        <member name="M:Microsoft.Xna.Framework.Vector4.Transform(Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Matrix@,Microsoft.Xna.Framework.Vector4@)">
            <summary>
            Creates a new <see cref="T:Microsoft.Xna.Framework.Vector4"/> that contains a transformation of 3d-vector by the specified <see cref="T:Microsoft.Xna.Framework.Matrix"/>.
            </summary>
            <param name="value">Source <see cref="T:Microsoft.Xna.Framework.Vector3"/>.</param>
            <param name="matrix">The transformation <see cref="T:Microsoft.Xna.Framework.Matrix"/>.</param>
            <param name="result">Transformed <see cref="T:Microsoft.Xna.Framework.Vector4"/> as an output parameter.</param>
        </member>
        <member name="M:Microsoft.Xna.Framework.Vector4.Transform(Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Quaternion@,Microsoft.Xna.Framework.Vector4@)">
            <summary>
            Creates a new <see cref="T:Microsoft.Xna.Framework.Vector4"/> that contains a transformation of 3d-vector by the specified <see cref="T:Microsoft.Xna.Framework.Quaternion"/>.
            </summary>
            <param name="value">Source <see cref="T:Microsoft.Xna.Framework.Vector3"/>.</param>
            <param name="rotation">The <see cref="T:Microsoft.Xna.Framework.Quaternion"/> which contains rotation transformation.</param>
            <param name="result">Transformed <see cref="T:Microsoft.Xna.Framework.Vector4"/> as an output parameter.</param>
        </member>
        <member name="M:Microsoft.Xna.Framework.Vector4.Transform(Microsoft.Xna.Framework.Vector4@,Microsoft.Xna.Framework.Matrix@,Microsoft.Xna.Framework.Vector4@)">
            <summary>
            Creates a new <see cref="T:Microsoft.Xna.Framework.Vector4"/> that contains a transformation of 4d-vector by the specified <see cref="T:Microsoft.Xna.Framework.Matrix"/>.
            </summary>
            <param name="value">Source <see cref="T:Microsoft.Xna.Framework.Vector4"/>.</param>
            <param name="matrix">The transformation <see cref="T:Microsoft.Xna.Framework.Matrix"/>.</param>
            <param name="result">Transformed <see cref="T:Microsoft.Xna.Framework.Vector4"/> as an output parameter.</param>
        </member>
        <member name="M:Microsoft.Xna.Framework.Vector4.Transform(Microsoft.Xna.Framework.Vector4@,Microsoft.Xna.Framework.Quaternion@,Microsoft.Xna.Framework.Vector4@)">
            <summary>
            Creates a new <see cref="T:Microsoft.Xna.Framework.Vector4"/> that contains a transformation of 4d-vector by the specified <see cref="T:Microsoft.Xna.Framework.Quaternion"/>.
            </summary>
            <param name="value">Source <see cref="T:Microsoft.Xna.Framework.Vector4"/>.</param>
            <param name="rotation">The <see cref="T:Microsoft.Xna.Framework.Quaternion"/> which contains rotation transformation.</param>
            <param name="result">Transformed <see cref="T:Microsoft.Xna.Framework.Vector4"/> as an output parameter.</param>
        </member>
        <member name="M:Microsoft.Xna.Framework.Vector4.Transform(Microsoft.Xna.Framework.Vector4[],System.Int32,Microsoft.Xna.Framework.Matrix@,Microsoft.Xna.Framework.Vector4[],System.Int32,System.Int32)">
            <summary>
            Apply transformation on vectors within array of <see cref="T:Microsoft.Xna.Framework.Vector4"/> by the specified <see cref="T:Microsoft.Xna.Framework.Matrix"/> and places the results in an another array.
            </summary>
            <param name="sourceArray">Source array.</param>
            <param name="sourceIndex">The starting index of transformation in the source array.</param>
            <param name="matrix">The transformation <see cref="T:Microsoft.Xna.Framework.Matrix"/>.</param>
            <param name="destinationArray">Destination array.</param>
            <param name="destinationIndex">The starting index in the destination array, where the first <see cref="T:Microsoft.Xna.Framework.Vector4"/> should be written.</param>
            <param name="length">The number of vectors to be transformed.</param>
        </member>
        <member name="M:Microsoft.Xna.Framework.Vector4.Transform(Microsoft.Xna.Framework.Vector4[],System.Int32,Microsoft.Xna.Framework.Quaternion@,Microsoft.Xna.Framework.Vector4[],System.Int32,System.Int32)">
            <summary>
            Apply transformation on vectors within array of <see cref="T:Microsoft.Xna.Framework.Vector4"/> by the specified <see cref="T:Microsoft.Xna.Framework.Quaternion"/> and places the results in an another array.
            </summary>
            <param name="sourceArray">Source array.</param>
            <param name="sourceIndex">The starting index of transformation in the source array.</param>
            <param name="rotation">The <see cref="T:Microsoft.Xna.Framework.Quaternion"/> which contains rotation transformation.</param>
            <param name="destinationArray">Destination array.</param>
            <param name="destinationIndex">The starting index in the destination array, where the first <see cref="T:Microsoft.Xna.Framework.Vector4"/> should be written.</param>
            <param name="length">The number of vectors to be transformed.</param>
        </member>
        <member name="M:Microsoft.Xna.Framework.Vector4.Transform(Microsoft.Xna.Framework.Vector4[],Microsoft.Xna.Framework.Matrix@,Microsoft.Xna.Framework.Vector4[])">
            <summary>
            Apply transformation on all vectors within array of <see cref="T:Microsoft.Xna.Framework.Vector4"/> by the specified <see cref="T:Microsoft.Xna.Framework.Matrix"/> and places the results in an another array.
            </summary>
            <param name="sourceArray">Source array.</param>
            <param name="matrix">The transformation <see cref="T:Microsoft.Xna.Framework.Matrix"/>.</param>
            <param name="destinationArray">Destination array.</param>
        </member>
        <member name="M:Microsoft.Xna.Framework.Vector4.Transform(Microsoft.Xna.Framework.Vector4[],Microsoft.Xna.Framework.Quaternion@,Microsoft.Xna.Framework.Vector4[])">
            <summary>
            Apply transformation on all vectors within array of <see cref="T:Microsoft.Xna.Framework.Vector4"/> by the specified <see cref="T:Microsoft.Xna.Framework.Quaternion"/> and places the results in an another array.
            </summary>
            <param name="sourceArray">Source array.</param>
            <param name="rotation">The <see cref="T:Microsoft.Xna.Framework.Quaternion"/> which contains rotation transformation.</param>
            <param name="destinationArray">Destination array.</param>
        </member>
        <member name="M:Microsoft.Xna.Framework.Vector4.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> representation of this <see cref="T:Microsoft.Xna.Framework.Vector4"/> in the format:
            {X:[<see cref="F:Microsoft.Xna.Framework.Vector4.X"/>] Y:[<see cref="F:Microsoft.Xna.Framework.Vector4.Y"/>] Z:[<see cref="F:Microsoft.Xna.Framework.Vector4.Z"/>] W:[<see cref="F:Microsoft.Xna.Framework.Vector4.W"/>]}
            </summary>
            <returns>A <see cref="T:System.String"/> representation of this <see cref="T:Microsoft.Xna.Framework.Vector4"/>.</returns>
        </member>
        <member name="M:Microsoft.Xna.Framework.Vector4.Deconstruct(System.Single@,System.Single@,System.Single@,System.Single@)">
            <summary>
            Deconstruction method for <see cref="T:Microsoft.Xna.Framework.Vector4"/>.
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <param name="z"></param>
            <param name="w"></param>
        </member>
        <member name="M:Microsoft.Xna.Framework.Vector4.op_UnaryNegation(Microsoft.Xna.Framework.Vector4)">
            <summary>
            Inverts values in the specified <see cref="T:Microsoft.Xna.Framework.Vector4"/>.
            </summary>
            <param name="value">Source <see cref="T:Microsoft.Xna.Framework.Vector4"/> on the right of the sub sign.</param>
            <returns>Result of the inversion.</returns>
        </member>
        <member name="M:Microsoft.Xna.Framework.Vector4.op_Equality(Microsoft.Xna.Framework.Vector4,Microsoft.Xna.Framework.Vector4)">
            <summary>
            Compares whether two <see cref="T:Microsoft.Xna.Framework.Vector4"/> instances are equal.
            </summary>
            <param name="left"><see cref="T:Microsoft.Xna.Framework.Vector4"/> instance on the left of the equal sign.</param>
            <param name="right"><see cref="T:Microsoft.Xna.Framework.Vector4"/> instance on the right of the equal sign.</param>
            <returns><c>true</c> if the instances are equal; <c>false</c> otherwise.</returns>
        </member>
        <member name="M:Microsoft.Xna.Framework.Vector4.op_Inequality(Microsoft.Xna.Framework.Vector4,Microsoft.Xna.Framework.Vector4)">
            <summary>
            Compares whether two <see cref="T:Microsoft.Xna.Framework.Vector4"/> instances are not equal.
            </summary>
            <param name="left"><see cref="T:Microsoft.Xna.Framework.Vector4"/> instance on the left of the not equal sign.</param>
            <param name="right"><see cref="T:Microsoft.Xna.Framework.Vector4"/> instance on the right of the not equal sign.</param>
            <returns><c>true</c> if the instances are not equal; <c>false</c> otherwise.</returns>	
        </member>
        <member name="M:Microsoft.Xna.Framework.Vector4.op_Addition(Microsoft.Xna.Framework.Vector4,Microsoft.Xna.Framework.Vector4)">
            <summary>
            Adds two vectors.
            </summary>
            <param name="left">Source <see cref="T:Microsoft.Xna.Framework.Vector4"/> on the left of the add sign.</param>
            <param name="right">Source <see cref="T:Microsoft.Xna.Framework.Vector4"/> on the right of the add sign.</param>
            <returns>Sum of the vectors.</returns>
        </member>
        <member name="M:Microsoft.Xna.Framework.Vector4.op_Subtraction(Microsoft.Xna.Framework.Vector4,Microsoft.Xna.Framework.Vector4)">
            <summary>
            Subtracts a <see cref="T:Microsoft.Xna.Framework.Vector4"/> from a <see cref="T:Microsoft.Xna.Framework.Vector4"/>.
            </summary>
            <param name="left">Source <see cref="T:Microsoft.Xna.Framework.Vector4"/> on the left of the sub sign.</param>
            <param name="right">Source <see cref="T:Microsoft.Xna.Framework.Vector4"/> on the right of the sub sign.</param>
            <returns>Result of the vector subtraction.</returns>
        </member>
        <member name="M:Microsoft.Xna.Framework.Vector4.op_Multiply(Microsoft.Xna.Framework.Vector4,Microsoft.Xna.Framework.Vector4)">
            <summary>
            Multiplies the components of two vectors by each other.
            </summary>
            <param name="left">Source <see cref="T:Microsoft.Xna.Framework.Vector4"/> on the left of the mul sign.</param>
            <param name="right">Source <see cref="T:Microsoft.Xna.Framework.Vector4"/> on the right of the mul sign.</param>
            <returns>Result of the vector multiplication.</returns>
        </member>
        <member name="M:Microsoft.Xna.Framework.Vector4.op_Multiply(Microsoft.Xna.Framework.Vector4,System.Single)">
            <summary>
            Multiplies the components of vector by a scalar.
            </summary>
            <param name="left">Source <see cref="T:Microsoft.Xna.Framework.Vector4"/> on the left of the mul sign.</param>
            <param name="right">Scalar value on the right of the mul sign.</param>
            <returns>Result of the vector multiplication with a scalar.</returns>
        </member>
        <member name="M:Microsoft.Xna.Framework.Vector4.op_Multiply(System.Single,Microsoft.Xna.Framework.Vector4)">
            <summary>
            Multiplies the components of vector by a scalar.
            </summary>
            <param name="left">Scalar value on the left of the mul sign.</param>
            <param name="right">Source <see cref="T:Microsoft.Xna.Framework.Vector4"/> on the right of the mul sign.</param>
            <returns>Result of the vector multiplication with a scalar.</returns>
        </member>
        <member name="M:Microsoft.Xna.Framework.Vector4.op_Division(Microsoft.Xna.Framework.Vector4,Microsoft.Xna.Framework.Vector4)">
            <summary>
            Divides the components of a <see cref="T:Microsoft.Xna.Framework.Vector4"/> by the components of another <see cref="T:Microsoft.Xna.Framework.Vector4"/>.
            </summary>
            <param name="left">Source <see cref="T:Microsoft.Xna.Framework.Vector4"/> on the left of the div sign.</param>
            <param name="right">Divisor <see cref="T:Microsoft.Xna.Framework.Vector4"/> on the right of the div sign.</param>
            <returns>The result of dividing the vectors.</returns>
        </member>
        <member name="M:Microsoft.Xna.Framework.Vector4.op_Division(Microsoft.Xna.Framework.Vector4,System.Single)">
            <summary>
            Divides the components of a <see cref="T:Microsoft.Xna.Framework.Vector4"/> by a scalar.
            </summary>
            <param name="left">Source <see cref="T:Microsoft.Xna.Framework.Vector4"/> on the left of the div sign.</param>
            <param name="right">Divisor scalar on the right of the div sign.</param>
            <returns>The result of dividing a vector by a scalar.</returns>
        </member>
    </members>
</doc>
